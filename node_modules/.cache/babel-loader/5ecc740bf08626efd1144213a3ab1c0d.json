{"ast":null,"code":"import { InfuraProvider } from 'ethers/providers';\nimport * as ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n      let displayItems;\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new ethers.utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      async function prepareDisplayItem(singleLog, userAddress) {\n        const provider = new InfuraProvider();\n        const abi = [// Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\", // Authenticated Functions\n        \"function transfer(address to, uint amount) returns (bool)\", // Events\n        \"event Transfer(address indexed from, address indexed to, uint amount)\"];\n        const address = \"0x869814034d96544f3C62DE2aC22448ed79Ac8e70\";\n        const erc20 = new ethers.Contract(address, abi, provider);\n        const tokenInfo = await erc20.symbol();\n        const humanReadableAmount = new ethers.utils.BigNumber(singleLog.values.amount);\n        const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n        return {\n          tokenType: tokenInfo,\n          amount: convertedAmount.toString(),\n          userAddress: userAddress\n        };\n      } // WORKING VERSION!\n      //const promises = await parsedLogs.map(async (singleLog) => {\n      //    return getAssoitaedTypeId(singleLog, this.colonyClient)\n      //        .then(this.colonyClient.getPayment)\n      //        .then(address => { return prepareDisplayItem(singleLog, address, this.colonyClient.provider) })\n      //        .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount, displayUserAddress: displayInfo.userAddress}))\n      //});\n\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(result => prepareDisplayItem(singleLog, result.recipient)).then(displayInfo => displayItems.push(displayInfo));\n      }); //const promises = await parsedLogs.map(async (singleLog) => {\n      //    return getAssoitaedTypeId(singleLog, this.colonyClient)\n      //        .then(this.colonyClient.getPayment)\n      //        .then(r => Object.assign({}, singleLog, { displayUserAddress: r.userAddress}))\n      //        .then(s => prepareDisplayItem(s))\n      //        .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount, displayUserAddress: displayInfo.userAddress}))\n      //});\n\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["InfuraProvider","ethers","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","displayItems","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","utils","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","prepareDisplayItem","userAddress","provider","abi","address","erc20","Contract","tokenInfo","symbol","humanReadableAmount","amount","convertedAmount","div","pow","tokenType","promises","map","then","getPayment","result","recipient","displayInfo","push","preparedLogs","all","error","console","log"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport * as  ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem';\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n            let displayItems: DisplayPayoutClaimedItem[];\n        \n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new ethers.utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n            async function prepareDisplayItem(singleLog: PayoutClaimedItem, userAddress: any) {\n\n                const provider = new InfuraProvider();\n\n                const abi = [\n                    // Read-Only Functions\n                    \"function balanceOf(address owner) view returns (uint256)\",\n                    \"function decimals() view returns (uint8)\",\n                    \"function symbol() view returns (string)\",\n\n                    // Authenticated Functions\n                    \"function transfer(address to, uint amount) returns (bool)\",\n\n                    // Events\n                    \"event Transfer(address indexed from, address indexed to, uint amount)\"\n                ];\n\n                const address = \"0x869814034d96544f3C62DE2aC22448ed79Ac8e70\";\n\n                const erc20 = new ethers.Contract(address, abi, provider);\n                const tokenInfo = await erc20.symbol();\n\n                const humanReadableAmount = new ethers.utils.BigNumber(singleLog.values.amount);\n\n                const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n                \n                return {tokenType: tokenInfo, amount: convertedAmount.toString(), userAddress: userAddress}\n            }\n\n\n            // WORKING VERSION!\n\n            //const promises = await parsedLogs.map(async (singleLog) => {\n            //    return getAssoitaedTypeId(singleLog, this.colonyClient)\n            //        .then(this.colonyClient.getPayment)\n            //        .then(address => { return prepareDisplayItem(singleLog, address, this.colonyClient.provider) })\n            //        .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount, displayUserAddress: displayInfo.userAddress}))\n            //});\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(result => prepareDisplayItem(singleLog, result.recipient))\n                    .then(displayInfo => displayItems.push(displayInfo));\n            });\n\n            //const promises = await parsedLogs.map(async (singleLog) => {\n            //    return getAssoitaedTypeId(singleLog, this.colonyClient)\n            //        .then(this.colonyClient.getPayment)\n            //        .then(r => Object.assign({}, singleLog, { displayUserAddress: r.userAddress}))\n            //        .then(s => prepareDisplayItem(s))\n            //        .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount, displayUserAddress: displayInfo.userAddress}))\n            //});\n\n\n\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}