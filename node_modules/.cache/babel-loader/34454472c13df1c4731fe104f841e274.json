{"ast":null,"code":"import { utils } from 'ethers';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    this.colonyClient = await this.networkClient.getClient();\n    const logsService = new LogsService();\n    let parsedLogs = eval(\"logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null))\");\n    parsedLogs.map(async singleLog => {\n      const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n      const {\n        associatedTypeId\n      } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n      const recipient = await this.colonyClient.getPayment(associatedTypeId);\n      singleLog.userAddress = recipient.recipient;\n    });\n    return parsedLogs;\n  }\n\n}","map":{"version":3,"names":["utils","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","eval","map","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","recipient","getPayment","userAddress"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient;\n    }\n\n    public async prepareLogs() {\n\n        this.colonyClient = await this.networkClient.getClient();\n\n        const logsService = new LogsService();\n\n        let parsedLogs: PayoutClaimedItem[] = eval(\"logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null))\");\n\n        parsedLogs.map(async (singleLog: PayoutClaimedItem) => {\n            const humanReadableFundingPotId = new utils.BigNumber(\n                singleLog.values.fundingPotId\n            ).toString();\n\n            const {\n                associatedTypeId,\n            } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n\n            const recipient = await this.colonyClient.getPayment(associatedTypeId);\n            singleLog.userAddress = recipient.recipient;\n        });\n\n        return parsedLogs;\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AAEA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAGA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;IAEA,MAAMC,WAAW,GAAG,IAAIP,WAAJ,EAApB;IAEA,IAAIQ,UAA+B,GAAGC,IAAI,CAAC,sFAAD,CAA1C;IAEAD,UAAU,CAACE,GAAX,CAAe,MAAOC,SAAP,IAAwC;MACnD,MAAMC,yBAAyB,GAAG,IAAId,KAAK,CAACe,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;MAIA,MAAM;QACFC;MADE,IAEF,MAAM,KAAKd,YAAL,CAAkBe,aAAlB,CAAgCN,yBAAhC,CAFV;MAIA,MAAMO,SAAS,GAAG,MAAM,KAAKhB,YAAL,CAAkBiB,UAAlB,CAA6BH,gBAA7B,CAAxB;MACAN,SAAS,CAACU,WAAV,GAAwBF,SAAS,CAACA,SAAlC;IACH,CAXD;IAaA,OAAOX,UAAP;EACH;;AA/BqC"},"metadata":{},"sourceType":"module"}