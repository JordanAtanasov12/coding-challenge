import { ContractTransaction } from 'ethers';
import { BigNumber, BigNumberish } from 'ethers/utils';
import { TransactionOverrides } from '../../../contracts/3';
import { IColony as IColonyV3 } from '../../../contracts/3/IColony';
import { IColony as IColonyV4 } from '../../../contracts/4/IColony';
import { ColonyNetworkClient } from '../../ColonyNetworkClient';
import { ExtendedIColony } from './commonExtensions';
declare type ValidColony = IColonyV3 | IColonyV4;
export interface ExtendedEstimateV3 {
    setArbitrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
}
export declare type ColonyExtensionsV3<T extends ValidColony> = {
    setArbitrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    estimate: T['estimate'] & ExtendedEstimateV3;
};
export declare const addExtensions: (instance: ExtendedIColony<ValidColony>, networkClient: ColonyNetworkClient) => (IColonyV3 & {
    clientType: import("../../../constants").ClientType.ColonyClient;
    networkClient: ColonyNetworkClient;
    oneTxPaymentClient?: import("../../OneTxPaymentClient").OneTxPaymentClient | undefined;
    tokenClient: import("../../TokenClient").TokenClient;
    awkwardRecoveryRoleEventClient: IColonyV4;
    deployTokenAuthority(tokenAddress: string, allowedToTransfer: string[]): Promise<ContractTransaction>;
    setArchitectureRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setFundingRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setAdministrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    addDomainWithProofs(_parentDomainId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    addPaymentWithProofs(_recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    finalizePaymentWithProofs(_id: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentRecipientWithProofs(_id: BigNumberish, _recipient: string, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentSkillWithProofs(_id: BigNumberish, _skillId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentPayoutWithProofs(_id: BigNumberish, _token: BigNumberish, _amount: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    makeTaskWithProofs(_specificationHash: import("ethers/utils").Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    moveFundsBetweenPotsWithProofs(_fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    estimate: import("./commonExtensions").ExtendedEstimate<ValidColony>;
    getReputation(skillId: BigNumberish, address: string): Promise<import("../types").ReputationOracleResponse>;
} & ColonyExtensionsV3<ValidColony>) | (IColonyV4 & {
    clientType: import("../../../constants").ClientType.ColonyClient;
    networkClient: ColonyNetworkClient;
    oneTxPaymentClient?: import("../../OneTxPaymentClient").OneTxPaymentClient | undefined;
    tokenClient: import("../../TokenClient").TokenClient;
    awkwardRecoveryRoleEventClient: IColonyV4;
    deployTokenAuthority(tokenAddress: string, allowedToTransfer: string[]): Promise<ContractTransaction>;
    setArchitectureRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setFundingRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setAdministrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    addDomainWithProofs(_parentDomainId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    addPaymentWithProofs(_recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    finalizePaymentWithProofs(_id: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentRecipientWithProofs(_id: BigNumberish, _recipient: string, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentSkillWithProofs(_id: BigNumberish, _skillId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentPayoutWithProofs(_id: BigNumberish, _token: BigNumberish, _amount: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    makeTaskWithProofs(_specificationHash: import("ethers/utils").Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    moveFundsBetweenPotsWithProofs(_fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    estimate: import("./commonExtensions").ExtendedEstimate<ValidColony>;
    getReputation(skillId: BigNumberish, address: string): Promise<import("../types").ReputationOracleResponse>;
} & ColonyExtensionsV3<ValidColony>);
export {};
