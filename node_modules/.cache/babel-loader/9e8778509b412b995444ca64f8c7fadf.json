{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar constants_1 = require(\"../constants\");\n\nvar errors = __importStar(require(\"../errors\"));\n\nvar secp256k1_1 = require(\"./secp256k1\");\n\nvar address_1 = require(\"./address\");\n\nvar bignumber_1 = require(\"./bignumber\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar keccak256_1 = require(\"./keccak256\");\n\nvar properties_1 = require(\"./properties\");\n\nvar RLP = __importStar(require(\"./rlp\"));\n\nvar abstract_provider_1 = require(\"../providers/abstract-provider\"); ///////////////////////////////\n\n\nfunction handleAddress(value) {\n  if (value === '0x') {\n    return null;\n  }\n\n  return address_1.getAddress(value);\n}\n\nfunction handleNumber(value) {\n  if (value === '0x') {\n    return constants_1.Zero;\n  }\n\n  return bignumber_1.bigNumberify(value);\n}\n\nvar transactionFields = [{\n  name: 'nonce',\n  maxLength: 32\n}, {\n  name: 'gasPrice',\n  maxLength: 32\n}, {\n  name: 'gasLimit',\n  maxLength: 32\n}, {\n  name: 'to',\n  length: 20\n}, {\n  name: 'value',\n  maxLength: 32\n}, {\n  name: 'data'\n}];\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\n\nfunction serialize(transaction, signature) {\n  properties_1.checkProperties(transaction, allowedTransactionKeys);\n  var raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    var value = transaction[fieldInfo.name] || [];\n    value = bytes_1.arrayify(bytes_1.hexlify(value)); // Fixed-width field\n\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, {\n        arg: 'transaction' + fieldInfo.name,\n        value: value\n      });\n    } // Variable-width (with a maximum)\n\n\n    if (fieldInfo.maxLength) {\n      value = bytes_1.stripZeros(value);\n\n      if (value.length > fieldInfo.maxLength) {\n        errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, {\n          arg: 'transaction' + fieldInfo.name,\n          value: value\n        });\n      }\n    }\n\n    raw.push(bytes_1.hexlify(value));\n  });\n\n  if (transaction.chainId != null && transaction.chainId !== 0) {\n    raw.push(bytes_1.hexlify(transaction.chainId));\n    raw.push('0x');\n    raw.push('0x');\n  }\n\n  var unsignedTransaction = RLP.encode(raw); // Requesting an unsigned transation\n\n  if (!signature) {\n    return unsignedTransaction;\n  } // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n\n\n  var sig = bytes_1.splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n  var v = 27 + sig.recoveryParam;\n\n  if (raw.length === 9) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += transaction.chainId * 2 + 8;\n  }\n\n  raw.push(bytes_1.hexlify(v));\n  raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.r)));\n  raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.s)));\n  return RLP.encode(raw);\n}\n\nexports.serialize = serialize;\n\nfunction parse(rawTransaction) {\n  var transaction = RLP.decode(rawTransaction);\n\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    errors.throwError('invalid raw transaction', errors.INVALID_ARGUMENT, {\n      arg: 'rawTransactin',\n      value: rawTransaction\n    });\n  }\n\n  var tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  }; // Legacy unsigned transaction\n\n  if (transaction.length === 6) {\n    return tx;\n  }\n\n  try {\n    tx.v = bignumber_1.bigNumberify(transaction[6]).toNumber();\n  } catch (error) {\n    errors.info(error);\n    return tx;\n  }\n\n  tx.r = bytes_1.hexZeroPad(transaction[7], 32);\n  tx.s = bytes_1.hexZeroPad(transaction[8], 32);\n\n  if (bignumber_1.bigNumberify(tx.r).isZero() && bignumber_1.bigNumberify(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n\n    var recoveryParam = tx.v - 27;\n    var raw = transaction.slice(0, 6);\n\n    if (tx.chainId !== 0) {\n      raw.push(bytes_1.hexlify(tx.chainId));\n      raw.push('0x');\n      raw.push('0x');\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n\n    var digest = keccak256_1.keccak256(RLP.encode(raw));\n\n    try {\n      tx.from = secp256k1_1.recoverAddress(digest, {\n        r: bytes_1.hexlify(tx.r),\n        s: bytes_1.hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {\n      errors.info(error);\n    }\n\n    tx.hash = keccak256_1.keccak256(rawTransaction);\n  }\n\n  return tx;\n}\n\nexports.parse = parse;\n\nfunction populateTransaction(transaction, provider, from) {\n  if (!abstract_provider_1.Provider.isProvider(provider)) {\n    errors.throwError('missing provider', errors.INVALID_ARGUMENT, {\n      argument: 'provider',\n      value: provider\n    });\n  }\n\n  properties_1.checkProperties(transaction, allowedTransactionKeys);\n  var tx = properties_1.shallowCopy(transaction);\n\n  if (tx.to != null) {\n    tx.to = provider.resolveName(tx.to);\n  }\n\n  if (tx.gasPrice == null) {\n    tx.gasPrice = provider.getGasPrice();\n  }\n\n  if (tx.nonce == null) {\n    tx.nonce = provider.getTransactionCount(from);\n  }\n\n  if (tx.gasLimit == null) {\n    var estimate = properties_1.shallowCopy(tx);\n    estimate.from = from;\n    tx.gasLimit = provider.estimateGas(estimate);\n  }\n\n  if (tx.chainId == null) {\n    tx.chainId = provider.getNetwork().then(function (network) {\n      return network.chainId;\n    });\n  }\n\n  return properties_1.resolveProperties(tx);\n}\n\nexports.populateTransaction = populateTransaction;","map":{"version":3,"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","constants_1","require","errors","secp256k1_1","address_1","bignumber_1","bytes_1","keccak256_1","properties_1","RLP","abstract_provider_1","handleAddress","getAddress","handleNumber","Zero","bigNumberify","transactionFields","name","maxLength","length","allowedTransactionKeys","chainId","data","gasLimit","gasPrice","nonce","to","serialize","transaction","signature","checkProperties","raw","forEach","fieldInfo","arrayify","hexlify","throwError","INVALID_ARGUMENT","arg","stripZeros","push","unsignedTransaction","encode","sig","splitSignature","v","recoveryParam","pop","r","s","parse","rawTransaction","decode","tx","toNumber","error","info","hexZeroPad","isZero","Math","floor","slice","digest","keccak256","from","recoverAddress","hash","populateTransaction","provider","Provider","isProvider","argument","shallowCopy","resolveName","getGasPrice","getTransactionCount","estimate","estimateGas","getNetwork","then","network","resolveProperties"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/node_modules/ethers/utils/transaction.js"],"sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"../constants\");\nvar errors = __importStar(require(\"../errors\"));\nvar secp256k1_1 = require(\"./secp256k1\");\nvar address_1 = require(\"./address\");\nvar bignumber_1 = require(\"./bignumber\");\nvar bytes_1 = require(\"./bytes\");\nvar keccak256_1 = require(\"./keccak256\");\nvar properties_1 = require(\"./properties\");\nvar RLP = __importStar(require(\"./rlp\"));\nvar abstract_provider_1 = require(\"../providers/abstract-provider\");\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === '0x') {\n        return null;\n    }\n    return address_1.getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === '0x') {\n        return constants_1.Zero;\n    }\n    return bignumber_1.bigNumberify(value);\n}\nvar transactionFields = [\n    { name: 'nonce', maxLength: 32 },\n    { name: 'gasPrice', maxLength: 32 },\n    { name: 'gasLimit', maxLength: 32 },\n    { name: 'to', length: 20 },\n    { name: 'value', maxLength: 32 },\n    { name: 'data' },\n];\nvar allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nfunction serialize(transaction, signature) {\n    properties_1.checkProperties(transaction, allowedTransactionKeys);\n    var raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        var value = transaction[fieldInfo.name] || ([]);\n        value = bytes_1.arrayify(bytes_1.hexlify(value));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, { arg: ('transaction' + fieldInfo.name), value: value });\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = bytes_1.stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                errors.throwError('invalid length for ' + fieldInfo.name, errors.INVALID_ARGUMENT, { arg: ('transaction' + fieldInfo.name), value: value });\n            }\n        }\n        raw.push(bytes_1.hexlify(value));\n    });\n    if (transaction.chainId != null && transaction.chainId !== 0) {\n        raw.push(bytes_1.hexlify(transaction.chainId));\n        raw.push('0x');\n        raw.push('0x');\n    }\n    var unsignedTransaction = RLP.encode(raw);\n    // Requesting an unsigned transation\n    if (!signature) {\n        return unsignedTransaction;\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    var sig = bytes_1.splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    var v = 27 + sig.recoveryParam;\n    if (raw.length === 9) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += transaction.chainId * 2 + 8;\n    }\n    raw.push(bytes_1.hexlify(v));\n    raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.r)));\n    raw.push(bytes_1.stripZeros(bytes_1.arrayify(sig.s)));\n    return RLP.encode(raw);\n}\nexports.serialize = serialize;\nfunction parse(rawTransaction) {\n    var transaction = RLP.decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        errors.throwError('invalid raw transaction', errors.INVALID_ARGUMENT, { arg: 'rawTransactin', value: rawTransaction });\n    }\n    var tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = bignumber_1.bigNumberify(transaction[6]).toNumber();\n    }\n    catch (error) {\n        errors.info(error);\n        return tx;\n    }\n    tx.r = bytes_1.hexZeroPad(transaction[7], 32);\n    tx.s = bytes_1.hexZeroPad(transaction[8], 32);\n    if (bignumber_1.bigNumberify(tx.r).isZero() && bignumber_1.bigNumberify(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        var recoveryParam = tx.v - 27;\n        var raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(bytes_1.hexlify(tx.chainId));\n            raw.push('0x');\n            raw.push('0x');\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        var digest = keccak256_1.keccak256(RLP.encode(raw));\n        try {\n            tx.from = secp256k1_1.recoverAddress(digest, { r: bytes_1.hexlify(tx.r), s: bytes_1.hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) {\n            errors.info(error);\n        }\n        tx.hash = keccak256_1.keccak256(rawTransaction);\n    }\n    return tx;\n}\nexports.parse = parse;\nfunction populateTransaction(transaction, provider, from) {\n    if (!abstract_provider_1.Provider.isProvider(provider)) {\n        errors.throwError('missing provider', errors.INVALID_ARGUMENT, {\n            argument: 'provider',\n            value: provider\n        });\n    }\n    properties_1.checkProperties(transaction, allowedTransactionKeys);\n    var tx = properties_1.shallowCopy(transaction);\n    if (tx.to != null) {\n        tx.to = provider.resolveName(tx.to);\n    }\n    if (tx.gasPrice == null) {\n        tx.gasPrice = provider.getGasPrice();\n    }\n    if (tx.nonce == null) {\n        tx.nonce = provider.getTransactionCount(from);\n    }\n    if (tx.gasLimit == null) {\n        var estimate = properties_1.shallowCopy(tx);\n        estimate.from = from;\n        tx.gasLimit = provider.estimateGas(estimate);\n    }\n    if (tx.chainId == null) {\n        tx.chainId = provider.getNetwork().then(function (network) { return network.chainId; });\n    }\n    return properties_1.resolveProperties(tx);\n}\nexports.populateTransaction = populateTransaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}