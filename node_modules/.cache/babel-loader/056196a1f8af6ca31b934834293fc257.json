{"ast":null,"code":"import { InfuraProvider } from 'ethers/providers';\nimport { utils, Contract } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n      let displayItems; //=============================================\n      //=============================================\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      async function prepareDisplayItems(useraddress, singleLog) {\n        const provider = new InfuraProvider();\n        const abi = [// Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\", // Authenticated Functions\n        \"function transfer(address to, uint amount) returns (bool)\", // Events\n        \"event Transfer(address indexed from, address indexed to, uint amount)\"];\n        const address = \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\";\n        const erc20 = new Contract(address, abi, provider);\n        const tokenInfo = await erc20.symbol(); // Create a new BigNumber instance from the hex string amount in the parsed log\n\n        const humanReadableAmount = new utils.BigNumber(singleLog.values.amount);\n        console.log(humanReadableAmount.toString()); //const wei = new utils.BigNumber(10);\n        // The converted amount is the human readable amount divided by the wei value raised to the power of 18\n\n        const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18)); // If you are confident that it's a low enough value, you can display it as an integer -- .toNumber()\n        // But to be on the safe side, you can also use it as a string\n\n        console.log(convertedAmount.toString()); //const someInfo = await erc20.balanceOf(\"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\", provider);\n\n        let displayItem = {\n          userAddress: useraddress,\n          tokenType: tokenInfo,\n          amount: convertedAmount.toString()\n        };\n        displayItems.push(displayItem);\n        return displayItems;\n      }\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(r => prepareDisplayItems(r, singleLog));\n      });\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["InfuraProvider","utils","Contract","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","displayItems","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","prepareDisplayItems","useraddress","provider","abi","address","erc20","tokenInfo","symbol","humanReadableAmount","amount","console","log","convertedAmount","div","pow","displayItem","userAddress","tokenType","push","promises","map","then","getPayment","r","preparedLogs","all","error"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils, Contract } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem';\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n            let displayItems: DisplayPayoutClaimedItem[];\n\n            //=============================================\n\n\n\n\n            //=============================================\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n            async function prepareDisplayItems(useraddress: any, singleLog: PayoutClaimedItem) {\n                const provider = new InfuraProvider();\n                const abi = [\n                    // Read-Only Functions\n                    \"function balanceOf(address owner) view returns (uint256)\",\n                    \"function decimals() view returns (uint8)\",\n                    \"function symbol() view returns (string)\",\n\n                    // Authenticated Functions\n                    \"function transfer(address to, uint amount) returns (bool)\",\n\n                    // Events\n                    \"event Transfer(address indexed from, address indexed to, uint amount)\"\n                ];\n\n                const address = \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\";\n\n                const erc20 = new Contract(address, abi, provider);\n                const tokenInfo = await erc20.symbol();\n\n                // Create a new BigNumber instance from the hex string amount in the parsed log\n                const humanReadableAmount = new utils.BigNumber(singleLog.values.amount);\n\n                console.log(humanReadableAmount.toString());\n\n                //const wei = new utils.BigNumber(10);\n\n                // The converted amount is the human readable amount divided by the wei value raised to the power of 18\n                const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n\n                // If you are confident that it's a low enough value, you can display it as an integer -- .toNumber()\n                // But to be on the safe side, you can also use it as a string\n                console.log(convertedAmount.toString());\n\n                //const someInfo = await erc20.balanceOf(\"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\", provider);\n\n                let displayItem: DisplayPayoutClaimedItem = {\n                    userAddress: useraddress,\n                    tokenType: tokenInfo,\n                    amount: convertedAmount.toString()\n                }\n\n                displayItems.push(displayItem);\n                return displayItems;\n            }\n\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(r =>prepareDisplayItems(r, singleLog))\n            });\n\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}