{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\nimport Blockies from 'react-blockies';\nimport { styles } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayItems = void 0;\n    this.colonyClient = void 0;\n    this.state = {\n      events: []\n    };\n  }\n\n  async componentDidMount() {\n    this.colonyClient = await ColonyNetworkClientFactory.getColonyClient();\n    this.displayItems = new Array(); //const payoutCalimedServise = new PayoutClaimedService(this.colonyClient);\n    //const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n    //this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n\n    const colonyInitService = new ColonyInitService(this.colonyClient);\n    const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs];\n    const colonyRoleSetService = new ColonyRoleSetService(this.colonyClient);\n    const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs];\n    const domainAddedService = new DomainAddedService(this.colonyClient);\n    const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n    this.setState({\n      events: this.displayItems\n    });\n  }\n\n  render() {\n    const avatarStyle = {\n      borderRadius: '100px'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.eventList,\n      children: this.state.events.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.firstItem,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.eventHeader,\n          children: /*#__PURE__*/_jsxDEV(Blockies, {\n            seed: post.avatarSeed,\n            size: 37,\n            scale: 1,\n            color: \"#dfe\",\n            bgColor: \"#ffe\",\n            spotColor: \"#abc\",\n            className: \"avatar-display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.eventFooter,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.descriptionText,\n            children: [\" \", post.description, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.dateText,\n            children: [\" \", post.date.toString(), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","ColonyInitService","ColonyRoleSetService","DomainAddedService","ColonyNetworkClientFactory","Blockies","styles","EventLogs","Component","displayItems","colonyClient","state","events","componentDidMount","getColonyClient","Array","colonyInitService","colonyInitPreparedLogs","prepareLogs","colonyRoleSetService","colonyRoleSetPreparedLogs","domainAddedService","domaiAddedPreparedLogs","setState","render","avatarStyle","borderRadius","eventList","map","post","firstItem","eventHeader","avatarSeed","eventFooter","descriptionText","description","dateText","date","toString"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem'\nimport { DisplayEventItem } from \"../interfaces/DisplayEventItem\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\nimport Blockies from 'react-blockies';\nimport { styles } from '../styles';\n\n\nexport default class EventLogs extends React.Component {\n\n    public displayItems: any;\n    private colonyClient: any;\n\n    state = { events: [] };\n\n    async componentDidMount() {\n\n        this.colonyClient = await ColonyNetworkClientFactory.getColonyClient();\n        this.displayItems = new Array<DisplayEventItem>();\n\n        //const payoutCalimedServise = new PayoutClaimedService(this.colonyClient);\n        //const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n        //this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n\n        const colonyInitService = new ColonyInitService(this.colonyClient);\n        const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs]\n\n        const colonyRoleSetService = new ColonyRoleSetService(this.colonyClient);\n        const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs]\n\n        const domainAddedService = new DomainAddedService(this.colonyClient);\n        const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n\n        this.setState({ events: this.displayItems });\n    }\n\n\n    render() {\n\n        const avatarStyle = {\n            borderRadius: '100px'\n        }\n\n        return (\n            <div style={styles.eventList}>\n                {this.state.events.map((post: DisplayEventItem) => (\n                    <div style={styles.firstItem}>\n                        <div style={styles.eventHeader}>\n                            <Blockies\n                                seed={post.avatarSeed}\n                                size={37}\n                                scale={1}\n                                color=\"#dfe\"\n                                bgColor=\"#ffe\"\n                                spotColor=\"#abc\"\n                                className=\"avatar-display\"\n                            />\n                        </div>\n                        <div style={styles.eventFooter}>\n                            <div style={styles.descriptionText} > {post.description} </div>\n                            <div style={styles.dateText} > {post.date.toString()} </div>\n                        </div>\n                    </div>\n                ))\n                }\n            </div>\n        )\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AAGA,OAAOC,0BAAP,MAAuC,uCAAvC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAGA,eAAe,MAAMC,SAAN,SAAwBP,KAAK,CAACQ,SAA9B,CAAwC;EAAA;IAAA;IAAA,KAE5CC,YAF4C;IAAA,KAG3CC,YAH2C;IAAA,KAKnDC,KALmD,GAK3C;MAAEC,MAAM,EAAE;IAAV,CAL2C;EAAA;;EAO5B,MAAjBC,iBAAiB,GAAG;IAEtB,KAAKH,YAAL,GAAoB,MAAMN,0BAA0B,CAACU,eAA3B,EAA1B;IACA,KAAKL,YAAL,GAAoB,IAAIM,KAAJ,EAApB,CAHsB,CAKtB;IACA;IACA;;IAEA,MAAMC,iBAAiB,GAAG,IAAIf,iBAAJ,CAAsB,KAAKS,YAA3B,CAA1B;IACA,MAAMO,sBAAsB,GAAG,MAAMD,iBAAiB,CAACE,WAAlB,EAArC;IACA,KAAKT,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGQ,sBAA1B,CAApB;IAEA,MAAME,oBAAoB,GAAG,IAAIjB,oBAAJ,CAAyB,KAAKQ,YAA9B,CAA7B;IACA,MAAMU,yBAAyB,GAAG,MAAMD,oBAAoB,CAACD,WAArB,EAAxC;IACA,KAAKT,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGW,yBAA1B,CAApB;IAEA,MAAMC,kBAAkB,GAAG,IAAIlB,kBAAJ,CAAuB,KAAKO,YAA5B,CAA3B;IACA,MAAMY,sBAAsB,GAAG,MAAMD,kBAAkB,CAACH,WAAnB,EAArC;IACA,KAAKT,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGa,sBAA1B,CAApB;IAEA,KAAKC,QAAL,CAAc;MAAEX,MAAM,EAAE,KAAKH;IAAf,CAAd;EACH;;EAGDe,MAAM,GAAG;IAEL,MAAMC,WAAW,GAAG;MAChBC,YAAY,EAAE;IADE,CAApB;IAIA,oBACI;MAAK,KAAK,EAAEpB,MAAM,CAACqB,SAAnB;MAAA,UACK,KAAKhB,KAAL,CAAWC,MAAX,CAAkBgB,GAAlB,CAAuBC,IAAD,iBACnB;QAAK,KAAK,EAAEvB,MAAM,CAACwB,SAAnB;QAAA,wBACI;UAAK,KAAK,EAAExB,MAAM,CAACyB,WAAnB;UAAA,uBACI,QAAC,QAAD;YACI,IAAI,EAAEF,IAAI,CAACG,UADf;YAEI,IAAI,EAAE,EAFV;YAGI,KAAK,EAAE,CAHX;YAII,KAAK,EAAC,MAJV;YAKI,OAAO,EAAC,MALZ;YAMI,SAAS,EAAC,MANd;YAOI,SAAS,EAAC;UAPd;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QADJ,eAYI;UAAK,KAAK,EAAE1B,MAAM,CAAC2B,WAAnB;UAAA,wBACI;YAAK,KAAK,EAAE3B,MAAM,CAAC4B,eAAnB;YAAA,gBAAuCL,IAAI,CAACM,WAA5C;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAK,KAAK,EAAE7B,MAAM,CAAC8B,QAAnB;YAAA,gBAAgCP,IAAI,CAACQ,IAAL,CAAUC,QAAV,EAAhC;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAZJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QADJ;EAwBH;;AA9DkD"},"metadata":{},"sourceType":"module"}