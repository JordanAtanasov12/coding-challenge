{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethers_1 = require(\"ethers\");\n\nconst constants_1 = require(\"ethers/constants\");\n\nconst constants_2 = require(\"../constants\"); // @TODO this _HAS_ to be the newest version _ALWAYS_. Let's try to figure out a way to make sure of this\n\n\nconst IColonyNetworkFactory_1 = require(\"../contracts/4/IColonyNetworkFactory\");\n\nconst Token_json_1 = require(\"../contracts/deploy/Token.json\");\n\nconst ColonyVersionClient_1 = require(\"./Colony/ColonyVersionClient\");\n\nconst ColonyClientV1_1 = require(\"./Colony/ColonyClientV1\");\n\nconst ColonyClientV2_1 = require(\"./Colony/ColonyClientV2\");\n\nconst ColonyClientV3_1 = require(\"./Colony/ColonyClientV3\");\n\nconst ColonyClientV4_1 = require(\"./Colony/ColonyClientV4\");\n\nconst TokenClient_1 = require(\"./TokenClient\");\n\nconst TokenLockingClient_1 = require(\"./TokenLockingClient\");\n\nconst OneTxPaymentDeployerClient_1 = require(\"./OneTxPaymentDeployerClient\");\n\nconst OneTxPaymentClient_1 = require(\"./OneTxPaymentClient\");\n\nconst getColonyNetworkClient = function () {\n  let network = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : constants_2.Network.Mainnet;\n  let signerOrProvider = arguments.length > 1 ? arguments[1] : undefined;\n  let options = arguments.length > 2 ? arguments[2] : undefined;\n  const networkAddress = options && options.networkAddress ? options.networkAddress : constants_2.colonyNetworkAddresses[network];\n\n  if (!networkAddress) {\n    throw new Error(`Could not get ColonyNetwork address for ${network}. Please specify`);\n  }\n\n  const networkClient = IColonyNetworkFactory_1.IColonyNetworkFactory.connect(networkAddress, signerOrProvider);\n  networkClient.clientType = constants_2.ClientType.NetworkClient;\n  networkClient.network = network;\n  networkClient.reputationOracleEndpoint = options && options.reputationOracleEndpoint || constants_2.REPUTATION_ORACLE_ENDPOINT; // @TODO move to getter function `getOneTxPaymentFactorylient` as we do with all the others\n\n  networkClient.oneTxPaymentFactoryClient = OneTxPaymentDeployerClient_1.default(network, signerOrProvider, options && options.oneTxPaymentFactoryAddress);\n\n  networkClient.getTokenLockingClient = () => __awaiter(void 0, void 0, void 0, function* () {\n    const tokenLockingAddress = yield networkClient.getTokenLocking();\n    return TokenLockingClient_1.default(tokenLockingAddress, signerOrProvider);\n  });\n\n  networkClient.getColonyClient = addressOrId => __awaiter(void 0, void 0, void 0, function* () {\n    let colonyAddress;\n\n    if (typeof addressOrId == 'number') {\n      colonyAddress = yield networkClient.getColony(addressOrId);\n    } else {\n      colonyAddress = addressOrId;\n    }\n\n    const colonyVersionClient = ColonyVersionClient_1.default(colonyAddress, signerOrProvider); // This is *kinda* hacky, but I have no better idea ¯\\_(ツ)_/¯\n    // We have to get the version somehow before instantiating the right contract version\n\n    const versionBN = yield colonyVersionClient.version();\n    const version = versionBN.toNumber();\n    let colonyClient;\n\n    switch (version) {\n      case constants_2.ColonyVersion.GoerliGlider:\n        {\n          colonyClient = ColonyClientV1_1.default.call(networkClient, colonyAddress, signerOrProvider);\n          break;\n        }\n\n      case constants_2.ColonyVersion.Glider:\n        {\n          colonyClient = ColonyClientV2_1.default.call(networkClient, colonyAddress, signerOrProvider);\n          break;\n        }\n\n      case constants_2.ColonyVersion.AuburnGlider:\n        {\n          colonyClient = ColonyClientV3_1.default.call(networkClient, colonyAddress, signerOrProvider);\n          break;\n        }\n\n      case constants_2.ColonyVersion.BurgundyGlider:\n        {\n          colonyClient = ColonyClientV4_1.default.call(networkClient, colonyAddress, signerOrProvider);\n          break;\n        }\n\n      default:\n        {\n          throw new Error('Colony version not supported');\n        }\n    }\n\n    const tokenAddress = yield colonyClient.getToken();\n    colonyClient.tokenClient = yield TokenClient_1.default(tokenAddress, signerOrProvider); // eslint-disable-next-line max-len\n\n    const oneTxPaymentAddress = yield networkClient.oneTxPaymentFactoryClient.deployedExtensions(colonyClient.address);\n\n    if (oneTxPaymentAddress !== constants_1.AddressZero) {\n      colonyClient.oneTxPaymentClient = OneTxPaymentClient_1.default(oneTxPaymentAddress, colonyClient);\n    }\n\n    return colonyClient;\n  });\n\n  networkClient.getMetaColonyClient = () => __awaiter(void 0, void 0, void 0, function* () {\n    const metaColonyAddress = yield networkClient.getMetaColony();\n    return networkClient.getColonyClient(metaColonyAddress);\n  });\n\n  networkClient.lookupRegisteredENSDomainWithGoerliPatch = addr => __awaiter(void 0, void 0, void 0, function* () {\n    const domain = yield networkClient.lookupRegisteredENSDomain(addr);\n\n    if (domain && networkClient.network === constants_2.Network.Goerli) {\n      const [name, scope] = domain.split('.');\n      return `${name}.${scope}.joincolony.test`;\n    }\n\n    return domain;\n  });\n\n  networkClient.deployToken = function (name, symbol) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n    return __awaiter(void 0, void 0, void 0, function* () {\n      const tokenFactory = new ethers_1.ContractFactory(Token_json_1.abi, Token_json_1.bytecode, networkClient.signer);\n      const tokenContract = yield tokenFactory.deploy(name, symbol, decimals);\n      yield tokenContract.deployed();\n      return tokenContract.deployTransaction;\n    });\n  };\n\n  networkClient.estimate.deployToken = function (name, symbol) {\n    let decimals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 18;\n    return __awaiter(void 0, void 0, void 0, function* () {\n      const tokenFactory = new ethers_1.ContractFactory(Token_json_1.abi, Token_json_1.bytecode);\n      const deployTx = tokenFactory.getDeployTransaction(name, symbol, decimals);\n      return networkClient.provider.estimateGas(deployTx);\n    });\n  };\n\n  return networkClient;\n};\n\nexports.default = getColonyNetworkClient;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","ethers_1","require","constants_1","constants_2","IColonyNetworkFactory_1","Token_json_1","ColonyVersionClient_1","ColonyClientV1_1","ColonyClientV2_1","ColonyClientV3_1","ColonyClientV4_1","TokenClient_1","TokenLockingClient_1","OneTxPaymentDeployerClient_1","OneTxPaymentClient_1","getColonyNetworkClient","network","Network","Mainnet","signerOrProvider","options","networkAddress","colonyNetworkAddresses","Error","networkClient","IColonyNetworkFactory","connect","clientType","ClientType","NetworkClient","reputationOracleEndpoint","REPUTATION_ORACLE_ENDPOINT","oneTxPaymentFactoryClient","default","oneTxPaymentFactoryAddress","getTokenLockingClient","tokenLockingAddress","getTokenLocking","getColonyClient","addressOrId","colonyAddress","getColony","colonyVersionClient","versionBN","version","toNumber","colonyClient","ColonyVersion","GoerliGlider","call","Glider","AuburnGlider","BurgundyGlider","tokenAddress","getToken","tokenClient","oneTxPaymentAddress","deployedExtensions","address","AddressZero","oneTxPaymentClient","getMetaColonyClient","metaColonyAddress","getMetaColony","lookupRegisteredENSDomainWithGoerliPatch","addr","domain","lookupRegisteredENSDomain","Goerli","name","scope","split","deployToken","symbol","decimals","tokenFactory","ContractFactory","abi","bytecode","signer","tokenContract","deploy","deployed","deployTransaction","estimate","deployTx","getDeployTransaction","provider","estimateGas"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/node_modules/@colony/colony-js/lib/clients/ColonyNetworkClient.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethers_1 = require(\"ethers\");\nconst constants_1 = require(\"ethers/constants\");\nconst constants_2 = require(\"../constants\");\n// @TODO this _HAS_ to be the newest version _ALWAYS_. Let's try to figure out a way to make sure of this\nconst IColonyNetworkFactory_1 = require(\"../contracts/4/IColonyNetworkFactory\");\nconst Token_json_1 = require(\"../contracts/deploy/Token.json\");\nconst ColonyVersionClient_1 = require(\"./Colony/ColonyVersionClient\");\nconst ColonyClientV1_1 = require(\"./Colony/ColonyClientV1\");\nconst ColonyClientV2_1 = require(\"./Colony/ColonyClientV2\");\nconst ColonyClientV3_1 = require(\"./Colony/ColonyClientV3\");\nconst ColonyClientV4_1 = require(\"./Colony/ColonyClientV4\");\nconst TokenClient_1 = require(\"./TokenClient\");\nconst TokenLockingClient_1 = require(\"./TokenLockingClient\");\nconst OneTxPaymentDeployerClient_1 = require(\"./OneTxPaymentDeployerClient\");\nconst OneTxPaymentClient_1 = require(\"./OneTxPaymentClient\");\nconst getColonyNetworkClient = (network = constants_2.Network.Mainnet, signerOrProvider, options) => {\n    const networkAddress = options && options.networkAddress\n        ? options.networkAddress\n        : constants_2.colonyNetworkAddresses[network];\n    if (!networkAddress) {\n        throw new Error(`Could not get ColonyNetwork address for ${network}. Please specify`);\n    }\n    const networkClient = IColonyNetworkFactory_1.IColonyNetworkFactory.connect(networkAddress, signerOrProvider);\n    networkClient.clientType = constants_2.ClientType.NetworkClient;\n    networkClient.network = network;\n    networkClient.reputationOracleEndpoint =\n        (options && options.reputationOracleEndpoint) || constants_2.REPUTATION_ORACLE_ENDPOINT;\n    // @TODO move to getter function `getOneTxPaymentFactorylient` as we do with all the others\n    networkClient.oneTxPaymentFactoryClient = OneTxPaymentDeployerClient_1.default(network, signerOrProvider, options && options.oneTxPaymentFactoryAddress);\n    networkClient.getTokenLockingClient = () => __awaiter(void 0, void 0, void 0, function* () {\n        const tokenLockingAddress = yield networkClient.getTokenLocking();\n        return TokenLockingClient_1.default(tokenLockingAddress, signerOrProvider);\n    });\n    networkClient.getColonyClient = (addressOrId) => __awaiter(void 0, void 0, void 0, function* () {\n        let colonyAddress;\n        if (typeof addressOrId == 'number') {\n            colonyAddress = yield networkClient.getColony(addressOrId);\n        }\n        else {\n            colonyAddress = addressOrId;\n        }\n        const colonyVersionClient = ColonyVersionClient_1.default(colonyAddress, signerOrProvider);\n        // This is *kinda* hacky, but I have no better idea ¯\\_(ツ)_/¯\n        // We have to get the version somehow before instantiating the right contract version\n        const versionBN = yield colonyVersionClient.version();\n        const version = versionBN.toNumber();\n        let colonyClient;\n        switch (version) {\n            case constants_2.ColonyVersion.GoerliGlider: {\n                colonyClient = ColonyClientV1_1.default.call(networkClient, colonyAddress, signerOrProvider);\n                break;\n            }\n            case constants_2.ColonyVersion.Glider: {\n                colonyClient = ColonyClientV2_1.default.call(networkClient, colonyAddress, signerOrProvider);\n                break;\n            }\n            case constants_2.ColonyVersion.AuburnGlider: {\n                colonyClient = ColonyClientV3_1.default.call(networkClient, colonyAddress, signerOrProvider);\n                break;\n            }\n            case constants_2.ColonyVersion.BurgundyGlider: {\n                colonyClient = ColonyClientV4_1.default.call(networkClient, colonyAddress, signerOrProvider);\n                break;\n            }\n            default: {\n                throw new Error('Colony version not supported');\n            }\n        }\n        const tokenAddress = yield colonyClient.getToken();\n        colonyClient.tokenClient = yield TokenClient_1.default(tokenAddress, signerOrProvider);\n        // eslint-disable-next-line max-len\n        const oneTxPaymentAddress = yield networkClient.oneTxPaymentFactoryClient.deployedExtensions(colonyClient.address);\n        if (oneTxPaymentAddress !== constants_1.AddressZero) {\n            colonyClient.oneTxPaymentClient = OneTxPaymentClient_1.default(oneTxPaymentAddress, colonyClient);\n        }\n        return colonyClient;\n    });\n    networkClient.getMetaColonyClient = () => __awaiter(void 0, void 0, void 0, function* () {\n        const metaColonyAddress = yield networkClient.getMetaColony();\n        return networkClient.getColonyClient(metaColonyAddress);\n    });\n    networkClient.lookupRegisteredENSDomainWithGoerliPatch = (addr) => __awaiter(void 0, void 0, void 0, function* () {\n        const domain = yield networkClient.lookupRegisteredENSDomain(addr);\n        if (domain && networkClient.network === constants_2.Network.Goerli) {\n            const [name, scope] = domain.split('.');\n            return `${name}.${scope}.joincolony.test`;\n        }\n        return domain;\n    });\n    networkClient.deployToken = (name, symbol, decimals = 18) => __awaiter(void 0, void 0, void 0, function* () {\n        const tokenFactory = new ethers_1.ContractFactory(Token_json_1.abi, Token_json_1.bytecode, networkClient.signer);\n        const tokenContract = yield tokenFactory.deploy(name, symbol, decimals);\n        yield tokenContract.deployed();\n        return tokenContract.deployTransaction;\n    });\n    networkClient.estimate.deployToken = (name, symbol, decimals = 18) => __awaiter(void 0, void 0, void 0, function* () {\n        const tokenFactory = new ethers_1.ContractFactory(Token_json_1.abi, Token_json_1.bytecode);\n        const deployTx = tokenFactory.getDeployTransaction(name, symbol, decimals);\n        return networkClient.provider.estimateGas(deployTx);\n    });\n    return networkClient;\n};\nexports.default = getColonyNetworkClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}