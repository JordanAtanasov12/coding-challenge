{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethers_1 = require(\"ethers\");\n\nconst utils_1 = require(\"ethers/utils\");\n\nconst constants_1 = require(\"ethers/constants\");\n\nconst utils_2 = require(\"../../../utils\");\n\nconst constants_2 = require(\"../../../constants\");\n\nconst IColonyFactory_1 = require(\"../../../contracts/4/IColonyFactory\");\n\nconst TokenAuthority_json_1 = require(\"../../../contracts/deploy/TokenAuthority.json\");\n\nexports.getPotDomain = (contract, potId) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    associatedType,\n    associatedTypeId\n  } = yield contract.getFundingPot(potId);\n\n  switch (associatedType) {\n    case constants_2.FundingPotAssociatedType.Unassigned:\n      {\n        // This is probably the reward pot\n        return constants_2.ROOT_DOMAIN_ID;\n      }\n\n    case constants_2.FundingPotAssociatedType.Domain:\n      {\n        return associatedTypeId;\n      }\n\n    case constants_2.FundingPotAssociatedType.Payment:\n      {\n        const {\n          domainId\n        } = yield contract.getPayment(associatedTypeId);\n        return domainId;\n      }\n\n    case constants_2.FundingPotAssociatedType.Task:\n      {\n        const {\n          domainId\n        } = yield contract.getTask(associatedTypeId);\n        return domainId;\n      }\n\n    default:\n      {\n        throw new Error(`No valid domain found for pot ${potId}`);\n      }\n  }\n});\n\nexports.getChildIndex = (contract, parentDomainId, domainId) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    skillId: parentSkillId\n  } = yield contract.getDomain(parentDomainId);\n  const {\n    skillId\n  } = yield contract.getDomain(domainId);\n  const {\n    children\n  } = yield contract.networkClient.getSkill(parentSkillId);\n  const idx = children.findIndex(childSkillId => childSkillId.eq(skillId));\n  return utils_1.bigNumberify(idx);\n});\n\nexports.getPermissionProofs = (contract, domainId, role, customAddress) => __awaiter(void 0, void 0, void 0, function* () {\n  const walletAddress = customAddress || (yield contract.signer.getAddress());\n  const hasPermissionInDomain = yield contract.hasUserRole(walletAddress, domainId, role);\n\n  if (hasPermissionInDomain) {\n    return [utils_1.bigNumberify(domainId), constants_1.MaxUint256];\n  } // @TODO once we allow nested domains on the network level, this needs to traverse down the skill/domain tree. Use binary search\n\n\n  const foundDomainId = utils_1.bigNumberify(constants_2.ROOT_DOMAIN_ID);\n  const hasPermissionInAParentDomain = yield contract.hasUserRole(walletAddress, foundDomainId, role);\n\n  if (!hasPermissionInAParentDomain) {\n    throw new Error(`User does not have the permission ${role} in any parent domain`);\n  }\n\n  const idx = yield exports.getChildIndex(contract, foundDomainId, domainId);\n\n  if (idx.lt(0)) {\n    throw new Error(`User does not have the permission ${role} in any parent domain`);\n  }\n\n  return [foundDomainId, idx];\n});\n\nexports.getMoveFundsPermissionProofs = (contract, fromtPotId, toPotId, customAddress) => __awaiter(void 0, void 0, void 0, function* () {\n  const walletAddress = customAddress || (yield contract.signer.getAddress());\n  const fromDomainId = yield exports.getPotDomain(contract, fromtPotId);\n  const toDomainId = yield exports.getPotDomain(contract, toPotId);\n  const [fromPermissionDomainId, fromChildSkillIndex] = yield exports.getPermissionProofs(contract, fromDomainId, constants_2.ColonyRole.Funding, walletAddress); // @TODO: once getPermissionProofs is more expensive we can just check the domain here\n  // with userHasRole and then immediately get the permission proofs\n\n  const [toPermissionDomainId, toChildSkillIndex] = yield exports.getPermissionProofs(contract, toDomainId, constants_2.ColonyRole.Funding, walletAddress); // Here's a weird case. We have found permissions for these domains but they don't share\n  // a parent domain with that permission. We can still find a common parent domain that\n  // has the funding permission\n\n  if (!fromPermissionDomainId.eq(toPermissionDomainId)) {\n    const hasFundingInRoot = yield contract.hasUserRole(walletAddress, constants_2.ROOT_DOMAIN_ID, constants_2.ColonyRole.Funding); // @TODO: In the future we have to not only check the ROOT domain but traverse the tree\n    // (binary search) to find a common parent domain with funding permission\n\n    if (hasFundingInRoot) {\n      const rootFromChildSkillIndex = yield exports.getChildIndex(contract, constants_2.ROOT_DOMAIN_ID, fromDomainId);\n      const rootToChildSkillIndex = yield exports.getChildIndex(contract, constants_2.ROOT_DOMAIN_ID, toDomainId); // This shouldn't really happen as we have already checked whether the user has funding\n\n      if (rootFromChildSkillIndex.lt(0) || rootToChildSkillIndex.lt(0)) {\n        throw new Error(`User does not have the funding permission in any parent domain`);\n      }\n\n      return [fromPermissionDomainId, rootFromChildSkillIndex, rootToChildSkillIndex];\n    }\n\n    throw new Error( // eslint-disable-next-line max-len\n    'User has to have the funding role in a domain that both associated pots a children of');\n  }\n\n  return [fromPermissionDomainId, fromChildSkillIndex, toChildSkillIndex];\n});\n\nfunction setArchitectureRoleWithProofs(_user, _domainId, _setTo, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let proofs; // This method has two potential permissions, so we try both of them\n\n    try {\n      proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n    } catch (err) {\n      proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Root);\n    }\n\n    const [permissionDomainId, childSkillIndex] = proofs;\n    return this.setArchitectureRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo, overrides);\n  });\n}\n\nfunction setFundingRoleWithProofs(_user, _domainId, _setTo, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let proofs; // This method has two potential permissions, so we try both of them\n\n    try {\n      proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n    } catch (err) {\n      proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Root);\n    }\n\n    const [permissionDomainId, childSkillIndex] = proofs;\n    return this.setFundingRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo, overrides);\n  });\n}\n\nfunction setAdministrationRoleWithProofs(_user, _domainId, _setTo, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let proofs; // This method has two potential permissions, so we try both of them\n\n    try {\n      proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n    } catch (err) {\n      proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Root);\n    }\n\n    const [permissionDomainId, childSkillIndex] = proofs;\n    return this.setAdministrationRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo, overrides);\n  });\n}\n\nfunction addDomainWithProofs(_parentDomainId, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _parentDomainId, constants_2.ColonyRole.Architecture);\n    return this.addDomain(permissionDomainId, childSkillIndex, _parentDomainId, overrides);\n  });\n}\n\nfunction addPaymentWithProofs(_recipient, _token, _amount, _domainId, _skillId, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n    return this.addPayment(permissionDomainId, childSkillIndex, _recipient, _token, _amount, _domainId, _skillId, overrides);\n  });\n}\n\nfunction finalizePaymentWithProofs(_id, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.finalizePayment(permissionDomainId, childSkillIndex, _id, overrides);\n  });\n}\n\nfunction setPaymentRecipientWithProofs(_id, _recipient, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.setPaymentRecipient(permissionDomainId, childSkillIndex, _id, _recipient, overrides);\n  });\n}\n\nfunction setPaymentSkillWithProofs(_id, _skillId, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.setPaymentSkill(permissionDomainId, childSkillIndex, _id, _skillId, overrides);\n  });\n}\n\nfunction setPaymentPayoutWithProofs(_id, _token, _amount, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.setPaymentPayout(permissionDomainId, childSkillIndex, _id, _token, _amount, overrides);\n  });\n}\n\nfunction makeTaskWithProofs(_specificationHash, _domainId, _skillId, _dueDate, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n    return this.makeTask(permissionDomainId, childSkillIndex, _specificationHash, _domainId, _skillId, _dueDate, overrides);\n  });\n}\n\nfunction moveFundsBetweenPotsWithProofs(_fromPot, _toPot, _amount, _token, overrides) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, fromChildSkillIndex, toChildSkillIndex] = yield exports.getMoveFundsPermissionProofs(this, _fromPot, _toPot);\n    return this.moveFundsBetweenPots(permissionDomainId, fromChildSkillIndex, toChildSkillIndex, _fromPot, _toPot, _amount, _token, overrides);\n  });\n}\n\nfunction estimateSetArchitectureRoleWithProofs(_user, _domainId, _setTo) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n    return this.estimate.setArchitectureRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo);\n  });\n}\n\nfunction estimateSetFundingRoleWithProofs(_user, _domainId, _setTo) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n    return this.estimate.setFundingRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo);\n  });\n}\n\nfunction estimateSetAdministrationRoleWithProofs(_user, _domainId, _setTo) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n    return this.estimate.setAdministrationRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo);\n  });\n}\n\nfunction estimateAddDomainWithProofs(_parentDomainId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _parentDomainId, constants_2.ColonyRole.Architecture);\n    return this.estimate.addDomain(permissionDomainId, childSkillIndex, _parentDomainId);\n  });\n}\n\nfunction estimateAddPaymentWithProofs(_recipient, _token, _amount, _domainId, _skillId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n    return this.estimate.addPayment(permissionDomainId, childSkillIndex, _recipient, _token, _amount, _domainId, _skillId);\n  });\n}\n\nfunction estimateFinalizePaymentWithProofs(_id) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.estimate.finalizePayment(permissionDomainId, childSkillIndex, _id);\n  });\n}\n\nfunction estimateSetPaymentRecipientWithProofs(_id, _recipient) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.estimate.setPaymentRecipient(permissionDomainId, childSkillIndex, _id, _recipient);\n  });\n}\n\nfunction estimateSetPaymentSkillWithProofs(_id, _skillId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.estimate.setPaymentSkill(permissionDomainId, childSkillIndex, _id, _skillId);\n  });\n}\n\nfunction estimateSetPaymentPayoutWithProofs(_id, _token, _amount) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const {\n      domainId\n    } = yield this.getPayment(_id);\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n    return this.estimate.setPaymentPayout(permissionDomainId, childSkillIndex, _id, _token, _amount);\n  });\n}\n\nfunction estimateMakeTaskWithProofs(_specificationHash, _domainId, _skillId, _dueDate) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n    return this.estimate.makeTask(permissionDomainId, childSkillIndex, _specificationHash, _domainId, _skillId, _dueDate);\n  });\n}\n\nfunction estimateMoveFundsBetweenPotsWithProofs(_fromPot, _toPot, _amount, _token) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const [permissionDomainId, fromChildSkillIndex, toChildSkillIndex] = yield exports.getMoveFundsPermissionProofs(this, _fromPot, _toPot);\n    return this.estimate.moveFundsBetweenPots(permissionDomainId, fromChildSkillIndex, toChildSkillIndex, _fromPot, _toPot, _amount, _token);\n  });\n}\n\nfunction getReputation(skillId, address) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!utils_2.isAddress(address)) {\n      throw new Error('Please provide a valid address');\n    }\n\n    const {\n      network,\n      reputationOracleEndpoint\n    } = this.networkClient;\n\n    if (network !== constants_2.Network.Mainnet && network !== constants_2.Network.Goerli) {\n      throw new Error('This method is only supported on mainnet and goerli');\n    }\n\n    const skillIdString = utils_1.bigNumberify(skillId).toString();\n    const rootHash = yield this.networkClient.getReputationRootHash();\n    const response = yield fetch(`${reputationOracleEndpoint}/${network}/${rootHash}/${this.address}/${skillIdString}/${address}`);\n    const result = yield response.json();\n    return Object.assign(Object.assign({}, result), {\n      reputationAmount: utils_1.bigNumberify(result.reputationAmount || 0)\n    });\n  });\n}\n\nfunction deployTokenAuthority(tokenAddress, allowedToTransfer) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const tokenAuthorityFactory = new ethers_1.ContractFactory(TokenAuthority_json_1.abi, TokenAuthority_json_1.bytecode, this.signer);\n    const tokenAuthorityContract = yield tokenAuthorityFactory.deploy(tokenAddress, this.address, allowedToTransfer);\n    yield tokenAuthorityContract.deployed();\n    return tokenAuthorityContract.deployTransaction;\n  });\n}\n\nfunction estimateDeployTokenAuthority(tokenAddress, allowedToTransfer) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const tokenAuthorityFactory = new ethers_1.ContractFactory(TokenAuthority_json_1.abi, TokenAuthority_json_1.bytecode);\n    const deployTx = tokenAuthorityFactory.getDeployTransaction(tokenAddress, this.address, allowedToTransfer);\n    return this.provider.estimateGas(deployTx);\n  });\n}\n\nexports.addExtensions = (instance, networkClient) => {\n  /* eslint-disable no-param-reassign, max-len */\n  instance.clientType = constants_2.ClientType.ColonyClient;\n  instance.networkClient = networkClient;\n  instance.deployTokenAuthority = deployTokenAuthority.bind(instance);\n  instance.setArchitectureRoleWithProofs = setArchitectureRoleWithProofs.bind(instance);\n  instance.setFundingRoleWithProofs = setFundingRoleWithProofs.bind(instance);\n  instance.setAdministrationRoleWithProofs = setAdministrationRoleWithProofs.bind(instance);\n  instance.addDomainWithProofs = addDomainWithProofs.bind(instance);\n  instance.addPaymentWithProofs = addPaymentWithProofs.bind(instance);\n  instance.finalizePaymentWithProofs = finalizePaymentWithProofs.bind(instance);\n  instance.setPaymentRecipientWithProofs = setPaymentRecipientWithProofs.bind(instance);\n  instance.setPaymentSkillWithProofs = setPaymentSkillWithProofs.bind(instance);\n  instance.setPaymentPayoutWithProofs = setPaymentPayoutWithProofs.bind(instance);\n  instance.makeTaskWithProofs = makeTaskWithProofs.bind(instance);\n  instance.moveFundsBetweenPotsWithProofs = moveFundsBetweenPotsWithProofs.bind(instance);\n  instance.estimate.deployTokenAuthority = estimateDeployTokenAuthority.bind(instance);\n  instance.estimate.setArchitectureRoleWithProofs = estimateSetArchitectureRoleWithProofs.bind(instance);\n  instance.estimate.setFundingRoleWithProofs = estimateSetFundingRoleWithProofs.bind(instance);\n  instance.estimate.setAdministrationRoleWithProofs = estimateSetAdministrationRoleWithProofs.bind(instance);\n  instance.estimate.addDomainWithProofs = estimateAddDomainWithProofs.bind(instance);\n  instance.estimate.addPaymentWithProofs = estimateAddPaymentWithProofs.bind(instance);\n  instance.estimate.finalizePaymentWithProofs = estimateFinalizePaymentWithProofs.bind(instance);\n  instance.estimate.setPaymentRecipientWithProofs = estimateSetPaymentRecipientWithProofs.bind(instance);\n  instance.estimate.setPaymentSkillWithProofs = estimateSetPaymentSkillWithProofs.bind(instance);\n  instance.estimate.setPaymentPayoutWithProofs = estimateSetPaymentPayoutWithProofs.bind(instance);\n  instance.estimate.makeTaskWithProofs = estimateMakeTaskWithProofs.bind(instance);\n  instance.estimate.moveFundsBetweenPotsWithProofs = estimateMoveFundsBetweenPotsWithProofs.bind(instance); // This is awkward and just used to get the RecoveryRoleSet event which is missing (but emitted)\n  // in other colonies. We can remove this once all of the active colonies are at version 4\n\n  instance.awkwardRecoveryRoleEventClient = IColonyFactory_1.IColonyFactory.connect(instance.address, instance.provider);\n  instance.getReputation = getReputation.bind(instance);\n  /* eslint-enable no-param-reassign, max-len */\n\n  return instance;\n};","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","ethers_1","require","utils_1","constants_1","utils_2","constants_2","IColonyFactory_1","TokenAuthority_json_1","getPotDomain","contract","potId","associatedType","associatedTypeId","getFundingPot","FundingPotAssociatedType","Unassigned","ROOT_DOMAIN_ID","Domain","Payment","domainId","getPayment","Task","getTask","Error","getChildIndex","parentDomainId","skillId","parentSkillId","getDomain","children","networkClient","getSkill","idx","findIndex","childSkillId","eq","bigNumberify","getPermissionProofs","role","customAddress","walletAddress","signer","getAddress","hasPermissionInDomain","hasUserRole","MaxUint256","foundDomainId","hasPermissionInAParentDomain","lt","getMoveFundsPermissionProofs","fromtPotId","toPotId","fromDomainId","toDomainId","fromPermissionDomainId","fromChildSkillIndex","ColonyRole","Funding","toPermissionDomainId","toChildSkillIndex","hasFundingInRoot","rootFromChildSkillIndex","rootToChildSkillIndex","setArchitectureRoleWithProofs","_user","_domainId","_setTo","overrides","proofs","Architecture","err","Root","permissionDomainId","childSkillIndex","setArchitectureRole","setFundingRoleWithProofs","setFundingRole","setAdministrationRoleWithProofs","setAdministrationRole","addDomainWithProofs","_parentDomainId","addDomain","addPaymentWithProofs","_recipient","_token","_amount","_skillId","Administration","addPayment","finalizePaymentWithProofs","_id","finalizePayment","setPaymentRecipientWithProofs","setPaymentRecipient","setPaymentSkillWithProofs","setPaymentSkill","setPaymentPayoutWithProofs","setPaymentPayout","makeTaskWithProofs","_specificationHash","_dueDate","makeTask","moveFundsBetweenPotsWithProofs","_fromPot","_toPot","moveFundsBetweenPots","estimateSetArchitectureRoleWithProofs","estimate","estimateSetFundingRoleWithProofs","estimateSetAdministrationRoleWithProofs","estimateAddDomainWithProofs","estimateAddPaymentWithProofs","estimateFinalizePaymentWithProofs","estimateSetPaymentRecipientWithProofs","estimateSetPaymentSkillWithProofs","estimateSetPaymentPayoutWithProofs","estimateMakeTaskWithProofs","estimateMoveFundsBetweenPotsWithProofs","getReputation","address","isAddress","network","reputationOracleEndpoint","Network","Mainnet","Goerli","skillIdString","toString","rootHash","getReputationRootHash","response","fetch","json","assign","reputationAmount","deployTokenAuthority","tokenAddress","allowedToTransfer","tokenAuthorityFactory","ContractFactory","abi","bytecode","tokenAuthorityContract","deploy","deployed","deployTransaction","estimateDeployTokenAuthority","deployTx","getDeployTransaction","provider","estimateGas","addExtensions","instance","clientType","ClientType","ColonyClient","bind","awkwardRecoveryRoleEventClient","IColonyFactory","connect"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP/coding-challenge-events-list-bootstrap/node_modules/@colony/colony-js/lib/clients/Colony/extensions/commonExtensions.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"ethers/utils\");\nconst constants_1 = require(\"ethers/constants\");\nconst utils_2 = require(\"../../../utils\");\nconst constants_2 = require(\"../../../constants\");\nconst IColonyFactory_1 = require(\"../../../contracts/4/IColonyFactory\");\nconst TokenAuthority_json_1 = require(\"../../../contracts/deploy/TokenAuthority.json\");\nexports.getPotDomain = (contract, potId) => __awaiter(void 0, void 0, void 0, function* () {\n    const { associatedType, associatedTypeId } = yield contract.getFundingPot(potId);\n    switch (associatedType) {\n        case constants_2.FundingPotAssociatedType.Unassigned: {\n            // This is probably the reward pot\n            return constants_2.ROOT_DOMAIN_ID;\n        }\n        case constants_2.FundingPotAssociatedType.Domain: {\n            return associatedTypeId;\n        }\n        case constants_2.FundingPotAssociatedType.Payment: {\n            const { domainId } = yield contract.getPayment(associatedTypeId);\n            return domainId;\n        }\n        case constants_2.FundingPotAssociatedType.Task: {\n            const { domainId } = yield contract.getTask(associatedTypeId);\n            return domainId;\n        }\n        default: {\n            throw new Error(`No valid domain found for pot ${potId}`);\n        }\n    }\n});\nexports.getChildIndex = (contract, parentDomainId, domainId) => __awaiter(void 0, void 0, void 0, function* () {\n    const { skillId: parentSkillId } = yield contract.getDomain(parentDomainId);\n    const { skillId } = yield contract.getDomain(domainId);\n    const { children } = yield contract.networkClient.getSkill(parentSkillId);\n    const idx = children.findIndex((childSkillId) => childSkillId.eq(skillId));\n    return utils_1.bigNumberify(idx);\n});\nexports.getPermissionProofs = (contract, domainId, role, customAddress) => __awaiter(void 0, void 0, void 0, function* () {\n    const walletAddress = customAddress || (yield contract.signer.getAddress());\n    const hasPermissionInDomain = yield contract.hasUserRole(walletAddress, domainId, role);\n    if (hasPermissionInDomain) {\n        return [utils_1.bigNumberify(domainId), constants_1.MaxUint256];\n    }\n    // @TODO once we allow nested domains on the network level, this needs to traverse down the skill/domain tree. Use binary search\n    const foundDomainId = utils_1.bigNumberify(constants_2.ROOT_DOMAIN_ID);\n    const hasPermissionInAParentDomain = yield contract.hasUserRole(walletAddress, foundDomainId, role);\n    if (!hasPermissionInAParentDomain) {\n        throw new Error(`User does not have the permission ${role} in any parent domain`);\n    }\n    const idx = yield exports.getChildIndex(contract, foundDomainId, domainId);\n    if (idx.lt(0)) {\n        throw new Error(`User does not have the permission ${role} in any parent domain`);\n    }\n    return [foundDomainId, idx];\n});\nexports.getMoveFundsPermissionProofs = (contract, fromtPotId, toPotId, customAddress) => __awaiter(void 0, void 0, void 0, function* () {\n    const walletAddress = customAddress || (yield contract.signer.getAddress());\n    const fromDomainId = yield exports.getPotDomain(contract, fromtPotId);\n    const toDomainId = yield exports.getPotDomain(contract, toPotId);\n    const [fromPermissionDomainId, fromChildSkillIndex,] = yield exports.getPermissionProofs(contract, fromDomainId, constants_2.ColonyRole.Funding, walletAddress);\n    // @TODO: once getPermissionProofs is more expensive we can just check the domain here\n    // with userHasRole and then immediately get the permission proofs\n    const [toPermissionDomainId, toChildSkillIndex] = yield exports.getPermissionProofs(contract, toDomainId, constants_2.ColonyRole.Funding, walletAddress);\n    // Here's a weird case. We have found permissions for these domains but they don't share\n    // a parent domain with that permission. We can still find a common parent domain that\n    // has the funding permission\n    if (!fromPermissionDomainId.eq(toPermissionDomainId)) {\n        const hasFundingInRoot = yield contract.hasUserRole(walletAddress, constants_2.ROOT_DOMAIN_ID, constants_2.ColonyRole.Funding);\n        // @TODO: In the future we have to not only check the ROOT domain but traverse the tree\n        // (binary search) to find a common parent domain with funding permission\n        if (hasFundingInRoot) {\n            const rootFromChildSkillIndex = yield exports.getChildIndex(contract, constants_2.ROOT_DOMAIN_ID, fromDomainId);\n            const rootToChildSkillIndex = yield exports.getChildIndex(contract, constants_2.ROOT_DOMAIN_ID, toDomainId);\n            // This shouldn't really happen as we have already checked whether the user has funding\n            if (rootFromChildSkillIndex.lt(0) || rootToChildSkillIndex.lt(0)) {\n                throw new Error(`User does not have the funding permission in any parent domain`);\n            }\n            return [\n                fromPermissionDomainId,\n                rootFromChildSkillIndex,\n                rootToChildSkillIndex,\n            ];\n        }\n        throw new Error(\n        // eslint-disable-next-line max-len\n        'User has to have the funding role in a domain that both associated pots a children of');\n    }\n    return [fromPermissionDomainId, fromChildSkillIndex, toChildSkillIndex];\n});\nfunction setArchitectureRoleWithProofs(_user, _domainId, _setTo, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let proofs;\n        // This method has two potential permissions, so we try both of them\n        try {\n            proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n        }\n        catch (err) {\n            proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Root);\n        }\n        const [permissionDomainId, childSkillIndex] = proofs;\n        return this.setArchitectureRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo, overrides);\n    });\n}\nfunction setFundingRoleWithProofs(_user, _domainId, _setTo, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let proofs;\n        // This method has two potential permissions, so we try both of them\n        try {\n            proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n        }\n        catch (err) {\n            proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Root);\n        }\n        const [permissionDomainId, childSkillIndex] = proofs;\n        return this.setFundingRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo, overrides);\n    });\n}\nfunction setAdministrationRoleWithProofs(_user, _domainId, _setTo, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let proofs;\n        // This method has two potential permissions, so we try both of them\n        try {\n            proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n        }\n        catch (err) {\n            proofs = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Root);\n        }\n        const [permissionDomainId, childSkillIndex] = proofs;\n        return this.setAdministrationRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo, overrides);\n    });\n}\nfunction addDomainWithProofs(_parentDomainId, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _parentDomainId, constants_2.ColonyRole.Architecture);\n        return this.addDomain(permissionDomainId, childSkillIndex, _parentDomainId, overrides);\n    });\n}\nfunction addPaymentWithProofs(_recipient, _token, _amount, _domainId, _skillId, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n        return this.addPayment(permissionDomainId, childSkillIndex, _recipient, _token, _amount, _domainId, _skillId, overrides);\n    });\n}\nfunction finalizePaymentWithProofs(_id, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.finalizePayment(permissionDomainId, childSkillIndex, _id, overrides);\n    });\n}\nfunction setPaymentRecipientWithProofs(_id, _recipient, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.setPaymentRecipient(permissionDomainId, childSkillIndex, _id, _recipient, overrides);\n    });\n}\nfunction setPaymentSkillWithProofs(_id, _skillId, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.setPaymentSkill(permissionDomainId, childSkillIndex, _id, _skillId, overrides);\n    });\n}\nfunction setPaymentPayoutWithProofs(_id, _token, _amount, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.setPaymentPayout(permissionDomainId, childSkillIndex, _id, _token, _amount, overrides);\n    });\n}\nfunction makeTaskWithProofs(_specificationHash, _domainId, _skillId, _dueDate, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n        return this.makeTask(permissionDomainId, childSkillIndex, _specificationHash, _domainId, _skillId, _dueDate, overrides);\n    });\n}\nfunction moveFundsBetweenPotsWithProofs(_fromPot, _toPot, _amount, _token, overrides) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, fromChildSkillIndex, toChildSkillIndex,] = yield exports.getMoveFundsPermissionProofs(this, _fromPot, _toPot);\n        return this.moveFundsBetweenPots(permissionDomainId, fromChildSkillIndex, toChildSkillIndex, _fromPot, _toPot, _amount, _token, overrides);\n    });\n}\nfunction estimateSetArchitectureRoleWithProofs(_user, _domainId, _setTo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n        return this.estimate.setArchitectureRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo);\n    });\n}\nfunction estimateSetFundingRoleWithProofs(_user, _domainId, _setTo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n        return this.estimate.setFundingRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo);\n    });\n}\nfunction estimateSetAdministrationRoleWithProofs(_user, _domainId, _setTo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Architecture);\n        return this.estimate.setAdministrationRole(permissionDomainId, childSkillIndex, _user, _domainId, _setTo);\n    });\n}\nfunction estimateAddDomainWithProofs(_parentDomainId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _parentDomainId, constants_2.ColonyRole.Architecture);\n        return this.estimate.addDomain(permissionDomainId, childSkillIndex, _parentDomainId);\n    });\n}\nfunction estimateAddPaymentWithProofs(_recipient, _token, _amount, _domainId, _skillId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n        return this.estimate.addPayment(permissionDomainId, childSkillIndex, _recipient, _token, _amount, _domainId, _skillId);\n    });\n}\nfunction estimateFinalizePaymentWithProofs(_id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.estimate.finalizePayment(permissionDomainId, childSkillIndex, _id);\n    });\n}\nfunction estimateSetPaymentRecipientWithProofs(_id, _recipient) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.estimate.setPaymentRecipient(permissionDomainId, childSkillIndex, _id, _recipient);\n    });\n}\nfunction estimateSetPaymentSkillWithProofs(_id, _skillId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.estimate.setPaymentSkill(permissionDomainId, childSkillIndex, _id, _skillId);\n    });\n}\nfunction estimateSetPaymentPayoutWithProofs(_id, _token, _amount) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { domainId } = yield this.getPayment(_id);\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, domainId, constants_2.ColonyRole.Administration);\n        return this.estimate.setPaymentPayout(permissionDomainId, childSkillIndex, _id, _token, _amount);\n    });\n}\nfunction estimateMakeTaskWithProofs(_specificationHash, _domainId, _skillId, _dueDate) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, childSkillIndex] = yield exports.getPermissionProofs(this, _domainId, constants_2.ColonyRole.Administration);\n        return this.estimate.makeTask(permissionDomainId, childSkillIndex, _specificationHash, _domainId, _skillId, _dueDate);\n    });\n}\nfunction estimateMoveFundsBetweenPotsWithProofs(_fromPot, _toPot, _amount, _token) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [permissionDomainId, fromChildSkillIndex, toChildSkillIndex,] = yield exports.getMoveFundsPermissionProofs(this, _fromPot, _toPot);\n        return this.estimate.moveFundsBetweenPots(permissionDomainId, fromChildSkillIndex, toChildSkillIndex, _fromPot, _toPot, _amount, _token);\n    });\n}\nfunction getReputation(skillId, address) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!utils_2.isAddress(address)) {\n            throw new Error('Please provide a valid address');\n        }\n        const { network, reputationOracleEndpoint } = this.networkClient;\n        if (network !== constants_2.Network.Mainnet && network !== constants_2.Network.Goerli) {\n            throw new Error('This method is only supported on mainnet and goerli');\n        }\n        const skillIdString = utils_1.bigNumberify(skillId).toString();\n        const rootHash = yield this.networkClient.getReputationRootHash();\n        const response = yield fetch(`${reputationOracleEndpoint}/${network}/${rootHash}/${this.address}/${skillIdString}/${address}`);\n        const result = yield response.json();\n        return Object.assign(Object.assign({}, result), { reputationAmount: utils_1.bigNumberify(result.reputationAmount || 0) });\n    });\n}\nfunction deployTokenAuthority(tokenAddress, allowedToTransfer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const tokenAuthorityFactory = new ethers_1.ContractFactory(TokenAuthority_json_1.abi, TokenAuthority_json_1.bytecode, this.signer);\n        const tokenAuthorityContract = yield tokenAuthorityFactory.deploy(tokenAddress, this.address, allowedToTransfer);\n        yield tokenAuthorityContract.deployed();\n        return tokenAuthorityContract.deployTransaction;\n    });\n}\nfunction estimateDeployTokenAuthority(tokenAddress, allowedToTransfer) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const tokenAuthorityFactory = new ethers_1.ContractFactory(TokenAuthority_json_1.abi, TokenAuthority_json_1.bytecode);\n        const deployTx = tokenAuthorityFactory.getDeployTransaction(tokenAddress, this.address, allowedToTransfer);\n        return this.provider.estimateGas(deployTx);\n    });\n}\nexports.addExtensions = (instance, networkClient) => {\n    /* eslint-disable no-param-reassign, max-len */\n    instance.clientType = constants_2.ClientType.ColonyClient;\n    instance.networkClient = networkClient;\n    instance.deployTokenAuthority = deployTokenAuthority.bind(instance);\n    instance.setArchitectureRoleWithProofs = setArchitectureRoleWithProofs.bind(instance);\n    instance.setFundingRoleWithProofs = setFundingRoleWithProofs.bind(instance);\n    instance.setAdministrationRoleWithProofs = setAdministrationRoleWithProofs.bind(instance);\n    instance.addDomainWithProofs = addDomainWithProofs.bind(instance);\n    instance.addPaymentWithProofs = addPaymentWithProofs.bind(instance);\n    instance.finalizePaymentWithProofs = finalizePaymentWithProofs.bind(instance);\n    instance.setPaymentRecipientWithProofs = setPaymentRecipientWithProofs.bind(instance);\n    instance.setPaymentSkillWithProofs = setPaymentSkillWithProofs.bind(instance);\n    instance.setPaymentPayoutWithProofs = setPaymentPayoutWithProofs.bind(instance);\n    instance.makeTaskWithProofs = makeTaskWithProofs.bind(instance);\n    instance.moveFundsBetweenPotsWithProofs = moveFundsBetweenPotsWithProofs.bind(instance);\n    instance.estimate.deployTokenAuthority = estimateDeployTokenAuthority.bind(instance);\n    instance.estimate.setArchitectureRoleWithProofs = estimateSetArchitectureRoleWithProofs.bind(instance);\n    instance.estimate.setFundingRoleWithProofs = estimateSetFundingRoleWithProofs.bind(instance);\n    instance.estimate.setAdministrationRoleWithProofs = estimateSetAdministrationRoleWithProofs.bind(instance);\n    instance.estimate.addDomainWithProofs = estimateAddDomainWithProofs.bind(instance);\n    instance.estimate.addPaymentWithProofs = estimateAddPaymentWithProofs.bind(instance);\n    instance.estimate.finalizePaymentWithProofs = estimateFinalizePaymentWithProofs.bind(instance);\n    instance.estimate.setPaymentRecipientWithProofs = estimateSetPaymentRecipientWithProofs.bind(instance);\n    instance.estimate.setPaymentSkillWithProofs = estimateSetPaymentSkillWithProofs.bind(instance);\n    instance.estimate.setPaymentPayoutWithProofs = estimateSetPaymentPayoutWithProofs.bind(instance);\n    instance.estimate.makeTaskWithProofs = estimateMakeTaskWithProofs.bind(instance);\n    instance.estimate.moveFundsBetweenPotsWithProofs = estimateMoveFundsBetweenPotsWithProofs.bind(instance);\n    // This is awkward and just used to get the RecoveryRoleSet event which is missing (but emitted)\n    // in other colonies. We can remove this once all of the active colonies are at version 4\n    instance.awkwardRecoveryRoleEventClient = IColonyFactory_1.IColonyFactory.connect(instance.address, instance.provider);\n    instance.getReputation = getReputation.bind(instance);\n    /* eslint-enable no-param-reassign, max-len */\n    return instance;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}