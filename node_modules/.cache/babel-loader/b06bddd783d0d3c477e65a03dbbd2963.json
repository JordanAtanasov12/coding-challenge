{"ast":null,"code":"import { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return {\n          associatedTypeId\n        };\n      } // const promises = parsedLogs.map(async (singleLog) => {\n      //     return await getAssoitaedTypeId(singleLog, this.colonyClient).then( async (associatedTypeId) => {\n      //         const { recipient: userAddress } = await this.colonyClient.getPayment(associatedTypeId);\n      //         return  { recipient: userAddress };\n      //     }).then((recipient) => {\n      //         Object.assign({}, singleLog, { userAddress:  recipient});\n      //     });\n      //   });\n\n\n      console.log(getAssoitaedTypeId(parsedLogs[0], this.colonyClient));\n      const promises = parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(async associatedTypeId => {\n          const {\n            recipient: userAddress\n          } = await this.colonyClient.getPayment(associatedTypeId);\n          return {\n            recipient: userAddress\n          };\n        }).then(recipient => {\n          Object.assign({}, singleLog, {\n            userAddress: recipient\n          });\n        });\n      }); //const employees = await fetchAllEmployees(baseApi)\n\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["utils","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","console","log","promises","map","then","recipient","userAddress","getPayment","Object","assign","preparedLogs","all","error"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { constants } from \"perf_hooks\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return { associatedTypeId, };\n            }\n\n            // const promises = parsedLogs.map(async (singleLog) => {\n            //     return await getAssoitaedTypeId(singleLog, this.colonyClient).then( async (associatedTypeId) => {\n            //         const { recipient: userAddress } = await this.colonyClient.getPayment(associatedTypeId);\n            //         return  { recipient: userAddress };\n            //     }).then((recipient) => {\n            //         Object.assign({}, singleLog, { userAddress:  recipient});\n            //     });\n            //   });\n\n            console.log( getAssoitaedTypeId(parsedLogs[0], this.colonyClient));\n            \n\n            const promises = parsedLogs.map(async (singleLog) => {\n                    return getAssoitaedTypeId(singleLog, this.colonyClient)\n                        .then( async (associatedTypeId) => {\n                            const { recipient: userAddress } = await this.colonyClient.getPayment(associatedTypeId);\n                            return  { recipient: userAddress };\n                        })\n                        .then((recipient) => {\n                            Object.assign({}, singleLog, { userAddress:  recipient});\n                    });\n                  });\n            \n\n            //const employees = await fetchAllEmployees(baseApi)\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAIA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIP,WAAJ,EAApB;MAEA,MAAMQ,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C;;MAEA,eAAeC,kBAAf,CAAkCC,SAAlC,EAAgEV,YAAhE,EAAmF;QAC/E,MAAMW,yBAAyB,GAAG,IAAIjB,KAAK,CAACkB,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAMhB,YAAY,CAACiB,aAAb,CAA2BN,yBAA3B,CAFV;QAIA,OAAO;UAAEK;QAAF,CAAP;MACH,CAlBD,CAoBA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;;MAEAE,OAAO,CAACC,GAAR,CAAaV,kBAAkB,CAACJ,UAAU,CAAC,CAAD,CAAX,EAAgB,KAAKL,YAArB,CAA/B;MAGA,MAAMoB,QAAQ,GAAGf,UAAU,CAACgB,GAAX,CAAe,MAAOX,SAAP,IAAqB;QAC7C,OAAOD,kBAAkB,CAACC,SAAD,EAAY,KAAKV,YAAjB,CAAlB,CACFsB,IADE,CACI,MAAON,gBAAP,IAA4B;UAC/B,MAAM;YAAEO,SAAS,EAAEC;UAAb,IAA6B,MAAM,KAAKxB,YAAL,CAAkByB,UAAlB,CAA6BT,gBAA7B,CAAzC;UACA,OAAQ;YAAEO,SAAS,EAAEC;UAAb,CAAR;QACH,CAJE,EAKFF,IALE,CAKIC,SAAD,IAAe;UACjBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,SAAlB,EAA6B;YAAEc,WAAW,EAAGD;UAAhB,CAA7B;QACP,CAPM,CAAP;MAQD,CATU,CAAjB,CAhCA,CA4CA;;MACA,MAAMK,YAAY,GAAG,MAAMjC,OAAO,CAACkC,GAAR,CAAYT,QAAZ,CAA3B;MACA,OAAOQ,YAAP;IACH,CA/CD,CA+CE,OAAOE,KAAP,EAAc;MACZZ,OAAO,CAACC,GAAR,CAAYW,KAAZ;IACH;EACJ;;AA7DqC"},"metadata":{},"sourceType":"module"}