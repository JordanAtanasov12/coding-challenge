{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_1 = require(\"./bignumber\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar utf8_1 = require(\"./utf8\");\n\nvar keccak256_1 = require(\"./keccak256\");\n\nvar sha2_1 = require(\"./sha2\");\n\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = '0000000000000000000000000000000000000000000000000000000000000000';\n\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case 'address':\n      if (isArray) {\n        return bytes_1.padZeros(value, 32);\n      }\n\n      return bytes_1.arrayify(value);\n\n    case 'string':\n      return utf8_1.toUtf8Bytes(value);\n\n    case 'bytes':\n      return bytes_1.arrayify(value);\n\n    case 'bool':\n      value = value ? '0x01' : '0x00';\n\n      if (isArray) {\n        return bytes_1.padZeros(value, 32);\n      }\n\n      return bytes_1.arrayify(value);\n  }\n\n  var match = type.match(regexNumber);\n\n  if (match) {\n    //var signed = (match[1] === 'int')\n    var size = parseInt(match[2] || \"256\");\n\n    if (size % 8 != 0 || size === 0 || size > 256) {\n      throw new Error('invalid number type - ' + type);\n    }\n\n    if (isArray) {\n      size = 256;\n    }\n\n    value = bignumber_1.bigNumberify(value).toTwos(size);\n    return bytes_1.padZeros(value, size / 8);\n  }\n\n  match = type.match(regexBytes);\n\n  if (match) {\n    var size = parseInt(match[1]);\n\n    if (String(size) != match[1] || size === 0 || size > 32) {\n      throw new Error('invalid number type - ' + type);\n    }\n\n    if (bytes_1.arrayify(value).byteLength !== size) {\n      throw new Error('invalid value for ' + type);\n    }\n\n    if (isArray) {\n      return bytes_1.arrayify((value + Zeros).substring(0, 66));\n    }\n\n    return value;\n  }\n\n  match = type.match(regexArray);\n\n  if (match && Array.isArray(value)) {\n    var baseType = match[1];\n    var count = parseInt(match[2] || String(value.length));\n\n    if (count != value.length) {\n      throw new Error('invalid value for ' + type);\n    }\n\n    var result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return bytes_1.concat(result);\n  }\n\n  throw new Error('unknown type - ' + type);\n} // @TODO: Array Enum\n\n\nfunction pack(types, values) {\n  if (types.length != values.length) {\n    throw new Error('type/value count mismatch');\n  }\n\n  var tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return bytes_1.hexlify(bytes_1.concat(tight));\n}\n\nexports.pack = pack;\n\nfunction keccak256(types, values) {\n  return keccak256_1.keccak256(pack(types, values));\n}\n\nexports.keccak256 = keccak256;\n\nfunction sha256(types, values) {\n  return sha2_1.sha256(pack(types, values));\n}\n\nexports.sha256 = sha256;","map":{"version":3,"names":["Object","defineProperty","exports","value","bignumber_1","require","bytes_1","utf8_1","keccak256_1","sha2_1","regexBytes","RegExp","regexNumber","regexArray","Zeros","_pack","type","isArray","padZeros","arrayify","toUtf8Bytes","match","size","parseInt","Error","bigNumberify","toTwos","String","byteLength","substring","Array","baseType","count","length","result","forEach","push","concat","pack","types","values","tight","index","hexlify","keccak256","sha256"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/node_modules/ethers/utils/solidity.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bignumber_1 = require(\"./bignumber\");\nvar bytes_1 = require(\"./bytes\");\nvar utf8_1 = require(\"./utf8\");\nvar keccak256_1 = require(\"./keccak256\");\nvar sha2_1 = require(\"./sha2\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = '0000000000000000000000000000000000000000000000000000000000000000';\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case 'address':\n            if (isArray) {\n                return bytes_1.padZeros(value, 32);\n            }\n            return bytes_1.arrayify(value);\n        case 'string':\n            return utf8_1.toUtf8Bytes(value);\n        case 'bytes':\n            return bytes_1.arrayify(value);\n        case 'bool':\n            value = (value ? '0x01' : '0x00');\n            if (isArray) {\n                return bytes_1.padZeros(value, 32);\n            }\n            return bytes_1.arrayify(value);\n    }\n    var match = type.match(regexNumber);\n    if (match) {\n        //var signed = (match[1] === 'int')\n        var size = parseInt(match[2] || \"256\");\n        if ((size % 8 != 0) || size === 0 || size > 256) {\n            throw new Error('invalid number type - ' + type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = bignumber_1.bigNumberify(value).toTwos(size);\n        return bytes_1.padZeros(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        var size = parseInt(match[1]);\n        if (String(size) != match[1] || size === 0 || size > 32) {\n            throw new Error('invalid number type - ' + type);\n        }\n        if (bytes_1.arrayify(value).byteLength !== size) {\n            throw new Error('invalid value for ' + type);\n        }\n        if (isArray) {\n            return bytes_1.arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        var baseType = match[1];\n        var count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            throw new Error('invalid value for ' + type);\n        }\n        var result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return bytes_1.concat(result);\n    }\n    throw new Error('unknown type - ' + type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        throw new Error('type/value count mismatch');\n    }\n    var tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return bytes_1.hexlify(bytes_1.concat(tight));\n}\nexports.pack = pack;\nfunction keccak256(types, values) {\n    return keccak256_1.keccak256(pack(types, values));\n}\nexports.keccak256 = keccak256;\nfunction sha256(types, values) {\n    return sha2_1.sha256(pack(types, values));\n}\nexports.sha256 = sha256;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}