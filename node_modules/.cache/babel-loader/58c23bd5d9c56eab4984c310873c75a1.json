{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayItems = void 0;\n    this.state = {\n      events: []\n    };\n  }\n\n  async componentDidMount() {\n    //this.displayItems = new Array<DisplayEventItem>();\n    //const payoutCalimedServise = new PayoutClaimedService(await ColonyNetworkClientFactory.getColonyClient());\n    //const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n    //this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n    const colonyInitService = new ColonyInitService(await ColonyNetworkClientFactory.getColonyClient());\n    const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs];\n    const colonyRoleSetService = new ColonyRoleSetService(await ColonyNetworkClientFactory.getColonyClient());\n    const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs];\n    const domainAddedService = new DomainAddedService(await ColonyNetworkClientFactory.getColonyClient());\n    const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n    this.setState({\n      events: this.displayItems\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","ColonyInitService","ColonyRoleSetService","DomainAddedService","ColonyNetworkClientFactory","EventLogs","Component","displayItems","state","events","componentDidMount","colonyInitService","getColonyClient","colonyInitPreparedLogs","prepareLogs","colonyRoleSetService","colonyRoleSetPreparedLogs","domainAddedService","domaiAddedPreparedLogs","setState","render"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem'\nimport { DisplayEventItem } from \"../interfaces/DisplayEventItem\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\n\n\nexport default class EventLogs extends React.Component {\n\n    public displayItems: any;\n\n    state = { events: [] };\n\n    async componentDidMount() {\n        //this.displayItems = new Array<DisplayEventItem>();\n        //const payoutCalimedServise = new PayoutClaimedService(await ColonyNetworkClientFactory.getColonyClient());\n        //const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n        //this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n\n        const colonyInitService = new ColonyInitService(await ColonyNetworkClientFactory.getColonyClient());\n        const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs]\n\n        const colonyRoleSetService = new ColonyRoleSetService(await ColonyNetworkClientFactory.getColonyClient());\n        const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs]\n\n        const domainAddedService = new DomainAddedService(await ColonyNetworkClientFactory.getColonyClient());\n        const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n\n        this.setState({ events: this.displayItems });\n    }\n\n\n    render() {\n        return (\n            <div>\n            </div>\n        )\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAEA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AAGA,OAAOC,0BAAP,MAAuC,uCAAvC;;AAGA,eAAe,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;EAAA;IAAA;IAAA,KAE5CC,YAF4C;IAAA,KAInDC,KAJmD,GAI3C;MAAEC,MAAM,EAAE;IAAV,CAJ2C;EAAA;;EAM5B,MAAjBC,iBAAiB,GAAG;IACtB;IACA;IACA;IACA;IAEA,MAAMC,iBAAiB,GAAG,IAAIV,iBAAJ,CAAsB,MAAMG,0BAA0B,CAACQ,eAA3B,EAA5B,CAA1B;IACA,MAAMC,sBAAsB,GAAG,MAAMF,iBAAiB,CAACG,WAAlB,EAArC;IACA,KAAKP,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGM,sBAA1B,CAApB;IAEA,MAAME,oBAAoB,GAAG,IAAIb,oBAAJ,CAAyB,MAAME,0BAA0B,CAACQ,eAA3B,EAA/B,CAA7B;IACA,MAAMI,yBAAyB,GAAG,MAAMD,oBAAoB,CAACD,WAArB,EAAxC;IACA,KAAKP,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGS,yBAA1B,CAApB;IAEA,MAAMC,kBAAkB,GAAG,IAAId,kBAAJ,CAAuB,MAAMC,0BAA0B,CAACQ,eAA3B,EAA7B,CAA3B;IACA,MAAMM,sBAAsB,GAAG,MAAMD,kBAAkB,CAACH,WAAnB,EAArC;IACA,KAAKP,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGW,sBAA1B,CAApB;IAEA,KAAKC,QAAL,CAAc;MAAEV,MAAM,EAAE,KAAKF;IAAf,CAAd;EACH;;EAGDa,MAAM,GAAG;IACL,oBACI;MAAA;MAAA;MAAA;IAAA,QADJ;EAIH;;AAjCkD"},"metadata":{},"sourceType":"module"}