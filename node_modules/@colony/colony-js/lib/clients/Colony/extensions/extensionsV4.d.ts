import { ContractTransaction } from 'ethers';
import { BigNumber, BigNumberish } from 'ethers/utils';
import { TransactionOverrides } from '../../../contracts/3';
import { IColony as IColonyV4 } from '../../../contracts/4/IColony';
import { ColonyNetworkClient } from '../../ColonyNetworkClient';
import { ExtendedIColony } from './commonExtensions';
import { ColonyExtensionsV3, ExtendedEstimateV3 } from './extensionsV3';
declare type ValidColony = IColonyV4;
export interface ExtendedEstimateV4 extends ExtendedEstimateV3 {
    makeExpenditureWithProofs(_domainId: BigNumberish): Promise<BigNumber>;
    setExpenditureClaimDelayWithProofs(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish): Promise<BigNumber>;
    setExpenditurePayoutModifierWithProofs(_id: BigNumberish, _slot: BigNumberish, _payoutModifier: BigNumberish): Promise<BigNumber>;
    transferExpenditureViaArbitrationWithProofs(_id: BigNumberish, _newOwner: string): Promise<BigNumber>;
}
export declare type ColonyExtensionsV4<T extends ValidColony> = {
    hasInheritedUserRoleWithProofs(_user: string, _domainId: BigNumberish, _role: BigNumberish): Promise<boolean>;
    makeExpenditureWithProofs(_domainId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setExpenditureClaimDelayWithProofs(_id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setExpenditurePayoutModifierWithProofs(_id: BigNumberish, _slot: BigNumberish, _payoutModifier: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    transferExpenditureViaArbitrationWithProofs(_id: BigNumberish, _newOwner: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    estimate: T['estimate'] & ExtendedEstimateV4;
};
export declare const addExtensions: (instance: ExtendedIColony<IColonyV4>, networkClient: ColonyNetworkClient) => IColonyV4 & {
    clientType: import("../../../constants").ClientType.ColonyClient;
    networkClient: ColonyNetworkClient;
    oneTxPaymentClient?: import("../../OneTxPaymentClient").OneTxPaymentClient | undefined;
    tokenClient: import("../../TokenClient").TokenClient;
    awkwardRecoveryRoleEventClient: IColonyV4;
    deployTokenAuthority(tokenAddress: string, allowedToTransfer: string[]): Promise<ContractTransaction>;
    setArchitectureRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setFundingRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setAdministrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    addDomainWithProofs(_parentDomainId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    addPaymentWithProofs(_recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    finalizePaymentWithProofs(_id: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentRecipientWithProofs(_id: BigNumberish, _recipient: string, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentSkillWithProofs(_id: BigNumberish, _skillId: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    setPaymentPayoutWithProofs(_id: BigNumberish, _token: BigNumberish, _amount: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    makeTaskWithProofs(_specificationHash: import("ethers/utils").Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    moveFundsBetweenPotsWithProofs(_fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: import("../../..").TransactionOverrides | undefined): Promise<ContractTransaction>;
    estimate: {
        approveExitRecovery(): Promise<BigNumber>;
        exitRecoveryMode(): Promise<BigNumber>;
        numRecoveryRoles(): Promise<BigNumber>;
        setStorageSlotRecovery(_slot: BigNumberish, _value: import("ethers/utils").Arrayish): Promise<BigNumber>;
        isInRecoveryMode(): Promise<BigNumber>;
        checkNotAdditionalProtectedVariable(_slot: BigNumberish): Promise<BigNumber>;
        removeRecoveryRole(_user: string): Promise<BigNumber>;
        setRecoveryRole(_user: string): Promise<BigNumber>;
        enterRecoveryMode(): Promise<BigNumber>;
        authority(): Promise<BigNumber>;
        owner(): Promise<BigNumber>;
        version(): Promise<BigNumber>;
        upgrade(_newVersion: BigNumberish): Promise<BigNumber>;
        finishUpgrade(): Promise<BigNumber>;
        getColonyNetwork(): Promise<BigNumber>;
        getToken(): Promise<BigNumber>;
        setRootRole(_user: string, _setTo: boolean): Promise<BigNumber>;
        setArbitrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        setArchitectureRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        setFundingRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        setAdministrationRole(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        hasUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish): Promise<BigNumber>;
        hasInheritedUserRole(_user: string, _domainId: BigNumberish, _role: BigNumberish, _childSkillIndex: BigNumberish, _childDomainId: BigNumberish): Promise<BigNumber>;
        getUserRoles(who: string, where: BigNumberish): Promise<BigNumber>;
        initialiseColony(_colonyNetworkAddress: string, _token: string): Promise<BigNumber>;
        bootstrapColony(_users: string[], _amount: BigNumberish[]): Promise<BigNumber>;
        mintTokens(_wad: BigNumberish): Promise<BigNumber>;
        registerColonyLabel(colonyName: string, orbitdb: string): Promise<BigNumber>;
        updateColonyOrbitDB(orbitdb: string): Promise<BigNumber>;
        addDomain(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _parentDomainId: BigNumberish): Promise<BigNumber>;
        getDomain(_id: BigNumberish): Promise<BigNumber>;
        getDomainCount(): Promise<BigNumber>;
        verifyReputationProof(key: import("ethers/utils").Arrayish, value: import("ethers/utils").Arrayish, branchMask: BigNumberish, siblings: import("ethers/utils").Arrayish[]): Promise<BigNumber>;
        makeExpenditure(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _domainId: BigNumberish): Promise<BigNumber>;
        transferExpenditure(_id: BigNumberish, _newOwner: string): Promise<BigNumber>;
        transferExpenditureViaArbitration(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _newOwner: string): Promise<BigNumber>;
        cancelExpenditure(_id: BigNumberish): Promise<BigNumber>;
        finalizeExpenditure(_id: BigNumberish): Promise<BigNumber>;
        setExpenditureRecipient(_id: BigNumberish, _slot: BigNumberish, _recipient: string): Promise<BigNumber>;
        setExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string, _amount: BigNumberish): Promise<BigNumber>;
        setExpenditureSkill(_id: BigNumberish, _slot: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
        setExpenditurePayoutModifier(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _payoutModifier: BigNumberish): Promise<BigNumber>;
        setExpenditureClaimDelay(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _slot: BigNumberish, _claimDelay: BigNumberish): Promise<BigNumber>;
        claimExpenditurePayout(_id: BigNumberish, _slot: BigNumberish, _token: string): Promise<BigNumber>;
        getExpenditureCount(): Promise<BigNumber>;
        getExpenditure(_id: BigNumberish): Promise<BigNumber>;
        getExpenditureSlot(_id: BigNumberish, _slot: BigNumberish): Promise<BigNumber>;
        getExpenditureSlotPayout(_id: BigNumberish, _slot: BigNumberish, _token: string): Promise<BigNumber>;
        addPayment(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
        finalizePayment(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish): Promise<BigNumber>;
        setPaymentRecipient(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _recipient: string): Promise<BigNumber>;
        setPaymentSkill(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
        setPaymentPayout(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _id: BigNumberish, _token: string, _amount: BigNumberish): Promise<BigNumber>;
        getPayment(_id: BigNumberish): Promise<BigNumber>;
        claimPayment(_id: BigNumberish, _token: string): Promise<BigNumber>;
        getPaymentCount(): Promise<BigNumber>;
        makeTask(_permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish, _specificationHash: import("ethers/utils").Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish): Promise<BigNumber>;
        getTaskCount(): Promise<BigNumber>;
        getTaskChangeNonce(_id: BigNumberish): Promise<BigNumber>;
        executeTaskChange(_sigV: BigNumberish[], _sigR: import("ethers/utils").Arrayish[], _sigS: import("ethers/utils").Arrayish[], _mode: BigNumberish[], _value: BigNumberish, _data: import("ethers/utils").Arrayish): Promise<BigNumber>;
        executeTaskRoleAssignment(_sigV: BigNumberish[], _sigR: import("ethers/utils").Arrayish[], _sigS: import("ethers/utils").Arrayish[], _mode: BigNumberish[], _value: BigNumberish, _data: import("ethers/utils").Arrayish): Promise<BigNumber>;
        submitTaskWorkRating(_id: BigNumberish, _role: BigNumberish, _ratingSecret: import("ethers/utils").Arrayish): Promise<BigNumber>;
        revealTaskWorkRating(_id: BigNumberish, _role: BigNumberish, _rating: BigNumberish, _salt: import("ethers/utils").Arrayish): Promise<BigNumber>;
        generateSecret(_salt: import("ethers/utils").Arrayish, _value: BigNumberish): Promise<BigNumber>;
        getTaskWorkRatingSecretsInfo(_id: BigNumberish): Promise<BigNumber>;
        getTaskWorkRatingSecret(_id: BigNumberish, _role: BigNumberish): Promise<BigNumber>;
        setTaskManagerRole(_id: BigNumberish, _user: string, _permissionDomainId: BigNumberish, _childSkillIndex: BigNumberish): Promise<BigNumber>;
        setTaskEvaluatorRole(_id: BigNumberish, _user: string): Promise<BigNumber>;
        setTaskWorkerRole(_id: BigNumberish, _user: string): Promise<BigNumber>;
        removeTaskEvaluatorRole(_id: BigNumberish): Promise<BigNumber>;
        removeTaskWorkerRole(_id: BigNumberish): Promise<BigNumber>;
        setTaskSkill(_id: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
        setTaskBrief(_id: BigNumberish, _specificationHash: import("ethers/utils").Arrayish): Promise<BigNumber>;
        setTaskDueDate(_id: BigNumberish, _dueDate: BigNumberish): Promise<BigNumber>;
        submitTaskDeliverable(_id: BigNumberish, _deliverableHash: import("ethers/utils").Arrayish): Promise<BigNumber>;
        submitTaskDeliverableAndRating(_id: BigNumberish, _deliverableHash: import("ethers/utils").Arrayish, _ratingSecret: import("ethers/utils").Arrayish): Promise<BigNumber>;
        finalizeTask(_id: BigNumberish): Promise<BigNumber>;
        cancelTask(_id: BigNumberish): Promise<BigNumber>;
        completeTask(_id: BigNumberish): Promise<BigNumber>;
        getTask(_id: BigNumberish): Promise<BigNumber>;
        getTaskRole(_id: BigNumberish, _role: BigNumberish): Promise<BigNumber>;
        setRewardInverse(_rewardInverse: BigNumberish): Promise<BigNumber>;
        getRewardInverse(): Promise<BigNumber>;
        getTaskPayout(_id: BigNumberish, _role: BigNumberish, _token: string): Promise<BigNumber>;
        setTaskManagerPayout(_id: BigNumberish, _token: string, _amount: BigNumberish): Promise<BigNumber>;
        setTaskEvaluatorPayout(_id: BigNumberish, _token: string, _amount: BigNumberish): Promise<BigNumber>;
        setTaskWorkerPayout(_id: BigNumberish, _token: string, _amount: BigNumberish): Promise<BigNumber>;
        setAllTaskPayouts(_id: BigNumberish, _token: string, _managerAmount: BigNumberish, _evaluatorAmount: BigNumberish, _workerAmount: BigNumberish): Promise<BigNumber>;
        claimTaskPayout(_id: BigNumberish, _role: BigNumberish, _token: string): Promise<BigNumber>;
        startNextRewardPayout(_token: string, key: import("ethers/utils").Arrayish, value: import("ethers/utils").Arrayish, branchMask: BigNumberish, siblings: import("ethers/utils").Arrayish[]): Promise<BigNumber>;
        claimRewardPayout(_payoutId: BigNumberish, _squareRoots: BigNumberish[], key: import("ethers/utils").Arrayish, value: import("ethers/utils").Arrayish, branchMask: BigNumberish, siblings: import("ethers/utils").Arrayish[]): Promise<BigNumber>;
        getRewardPayoutInfo(_payoutId: BigNumberish): Promise<BigNumber>;
        finalizeRewardPayout(_payoutId: BigNumberish): Promise<BigNumber>;
        getFundingPot(_id: BigNumberish): Promise<BigNumber>;
        getFundingPotCount(): Promise<BigNumber>;
        getFundingPotBalance(_potId: BigNumberish, _token: string): Promise<BigNumber>;
        getFundingPotPayout(_potId: BigNumberish, _token: string): Promise<BigNumber>;
        moveFundsBetweenPots(_permissionDomainId: BigNumberish, _fromChildSkillIndex: BigNumberish, _toChildSkillIndex: BigNumberish, _fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string): Promise<BigNumber>;
        claimColonyFunds(_token: string): Promise<BigNumber>;
        getNonRewardPotsTotal(_token: string): Promise<BigNumber>;
    } & {
        deployTokenAuthority(tokenAddress: string, allowedToTransfer: string[]): Promise<BigNumber>;
        setArchitectureRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        setFundingRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        setAdministrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
        addDomainWithProofs(_parentDomainId: BigNumberish): Promise<BigNumber>;
        addPaymentWithProofs(_recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
        finalizePaymentWithProofs(_id: BigNumberish, overrides?: import("../../..").TransactionOverrides | undefined): Promise<BigNumber>;
        setPaymentRecipientWithProofs(_id: BigNumberish, _recipient: string): Promise<BigNumber>;
        setPaymentSkillWithProofs(_id: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
        setPaymentPayoutWithProofs(_id: BigNumberish, _token: BigNumberish, _amount: BigNumberish): Promise<BigNumber>;
        makeTaskWithProofs(_specificationHash: import("ethers/utils").Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish): Promise<BigNumber>;
        moveFundsBetweenPotsWithProofs(_fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string): Promise<BigNumber>;
    };
    getReputation(skillId: BigNumberish, address: string): Promise<import("../types").ReputationOracleResponse>;
} & ColonyExtensionsV3<IColonyV4> & ColonyExtensionsV4<IColonyV4>;
export {};
