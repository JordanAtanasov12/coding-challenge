{"ast":null,"code":"import { getBlockTime } from '@colony/colony-js';\nimport { getLogs } from '@colony/colony-js';\nimport * as ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nexport default class ColonyRoleSetService {\n  constructor(colonyClient) {\n    this.colonyClient = void 0;\n    this.eventFilter = void 0;\n    this.displayItems = void 0;\n    this.logsService = void 0;\n    this.parsedLogs = void 0;\n    this.colonyClient = colonyClient;\n    this.eventFilter = this.colonyClient.filters.ColonyRoleSet();\n    this.parsedLogs = new Array();\n  }\n\n  async prepareLogs() {\n    try {\n      const parsedLogs = await this.getParsedLogs();\n      this.displayItems = new Array();\n      const promises = parsedLogs.forEach(singleLog => {\n        this.prepareDisplayItem(singleLog);\n      }); //await Promise.all(promises);\n\n      return this.displayItems;\n    } catch (error) {\n      console.log(error);\n    }\n  } //async getParsedLogs() {\n  //\n  //    const colonyRoleSetLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n  //    debugger;\n  //    const roleSetLogs: ColonyRoleSetItem[] = colonyRoleSetLogs.map((event: any) => this.colonyClient.interface.parseLog(event));\n  //    return roleSetLogs;\n  //}\n\n\n  async getParsedLogs() {\n    const colonyRoleSetLogs = await getLogs(this.colonyClient, this.eventFilter);\n    const getLogsPromices = await colonyRoleSetLogs.map(async event => {\n      let res = await this.colonyClient.interface.parseLog(event);\n      return await this.setEventDate(res, event);\n    });\n    await Promise.all(getLogsPromices);\n    return this.parsedLogs;\n  }\n\n  async setEventDate(singleLog, unparsedEvent) {\n    const provider = ethers.getDefaultProvider();\n    const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n    let day = \"\";\n    let month = \"\";\n\n    if (timestamp) {\n      const date = new Date(timestamp);\n      day = date.toLocaleString('default', {\n        day: '2-digit'\n      });\n      month = date.toLocaleString('default', {\n        month: 'short'\n      });\n    }\n\n    this.parsedLogs.push({\n      name: singleLog.name,\n      values: {\n        role: singleLog.values.role,\n        domainId: singleLog.values.domainId,\n        user: singleLog.values.user ? singleLog.values.user : this.colonyClient.address\n      },\n      date: `${day} ${month}`,\n      timestamp: timestamp\n    });\n  }\n\n  async prepareDisplayItem(singleLog) {\n    const domainId = new ethers.utils.BigNumber(singleLog.values.domainId).toString();\n    this.displayItems.push({\n      date: singleLog.date,\n      timestamp: singleLog.timestamp,\n      avatarSeed: singleLog.values.user,\n      boldItem0: singleLog.values.role,\n      description0: `role assigned to user`,\n      boldItem1: singleLog.values.user,\n      description1: `in domain`,\n      boldItem2: domainId,\n      description2: ` .`\n    });\n  }\n\n}","map":{"version":3,"names":["getBlockTime","getLogs","ethers","Promise","ColonyRoleSetService","constructor","colonyClient","eventFilter","displayItems","logsService","parsedLogs","filters","ColonyRoleSet","Array","prepareLogs","getParsedLogs","promises","forEach","singleLog","prepareDisplayItem","error","console","log","colonyRoleSetLogs","getLogsPromices","map","event","res","interface","parseLog","setEventDate","all","unparsedEvent","provider","getDefaultProvider","timestamp","blockHash","day","month","date","Date","toLocaleString","push","name","values","role","domainId","user","address","utils","BigNumber","toString","avatarSeed","boldItem0","description0","boldItem1","description1","boldItem2","description2"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/services/ColonyRoleSetService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport {getBlockTime, ColonyRole } from '@colony/colony-js';\nimport { EventFilter, Wallet } from 'ethers';\nimport { getLogs } from '@colony/colony-js';\nimport * as  ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport { ColonyRoleSetItem } from \"../interfaces/ColonyRoleSetItem\";\n\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem';\nimport {DisplayEventItem} from \"../interfaces/DisplayEventItem\"; \nimport { EventLogsService } from \"../interfaces/EventLogsService\";\n\n\n\nexport default class ColonyRoleSetService implements EventLogsService{\n\n    colonyClient: any;\n    eventFilter: EventFilter;\n    public displayItems: any;\n    public logsService: any;\n    public parsedLogs: ColonyRoleSetItem[];\n\n    constructor(colonyClient: any) {\n        this.colonyClient = colonyClient;\n        this.eventFilter = this.colonyClient.filters.ColonyRoleSet();\n        this.parsedLogs = new Array<ColonyRoleSetItem>();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            const parsedLogs: ColonyRoleSetItem[] = await this.getParsedLogs();\n            this.displayItems = new Array<DisplayEventItem>();\n\n            const promises = parsedLogs.forEach((singleLog) => {\n                this.prepareDisplayItem(singleLog)\n                   \n            });\n\n\n            //await Promise.all(promises);\n            return this.displayItems;\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    //async getParsedLogs() {\n//\n    //    const colonyRoleSetLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n    //    debugger;\n    //    const roleSetLogs: ColonyRoleSetItem[] = colonyRoleSetLogs.map((event: any) => this.colonyClient.interface.parseLog(event));\n    //    return roleSetLogs;\n    //}\n\n    async getParsedLogs() {\n\n        const colonyRoleSetLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n        const getLogsPromices  = await colonyRoleSetLogs.map(async (event: any) => {\n                let res: ColonyRoleSetItem = await this.colonyClient.interface.parseLog(event);\n                return await this.setEventDate(res, event);\n            });\n        \n        await Promise.all(getLogsPromices);\n\n        return this.parsedLogs;\n    }\n\n\n    async setEventDate(singleLog: ColonyRoleSetItem, unparsedEvent: any) {\n        \n        const provider = ethers.getDefaultProvider();\n        const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n        let day = \"\";\n        let month = \"\";\n\n        if (timestamp) {\n            const date = new Date(timestamp);\n            day = date.toLocaleString('default', { day: '2-digit' });\n            month = date.toLocaleString('default', { month: 'short' });\n        }\n\n        this.parsedLogs.push({  \n            name: singleLog.name,\n            values: {\n                role: singleLog.values.role,\n                domainId: singleLog.values.domainId,\n                user: singleLog.values.user ? singleLog.values.user : this.colonyClient.address,\n            },\n            date: `${day} ${month}`,\n            timestamp: timestamp\n        })\n    }\n\n    private async prepareDisplayItem(singleLog: ColonyRoleSetItem) {\n\n        const domainId = new ethers.utils.BigNumber(\n            singleLog.values.domainId\n        ).toString();\n\n        this.displayItems.push({\n            date: singleLog.date, \n            timestamp: singleLog.timestamp,\n            avatarSeed: singleLog.values.user,\n            boldItem0: singleLog.values.role,\n            description0: `role assigned to user`,\n            boldItem1: singleLog.values.user,\n            description1: `in domain`,\n            boldItem2: domainId,\n            description2: ` .`\n        });\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}