"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const OneTxPaymentFactory_1 = require("../contracts/4/OneTxPaymentFactory");
const commonExtensions_1 = require("../clients/Colony/extensions/commonExtensions");
const getExtensionPermissionProofs = (colonyClient, domainId, address) => __awaiter(void 0, void 0, void 0, function* () {
    const [fundingPDID, fundingCSI] = yield commonExtensions_1.getPermissionProofs(colonyClient, domainId, constants_1.ColonyRole.Funding, address);
    const [adminPDID, adminCSI] = yield commonExtensions_1.getPermissionProofs(colonyClient, domainId, constants_1.ColonyRole.Administration, address);
    if (!fundingPDID.eq(adminPDID) || !fundingCSI.eq(adminCSI)) {
        // @TODO: this can surely be improved
        throw new Error(
        // eslint-disable-next-line max-len
        `${address || 'User'} has to have the funding and administration role in the same domain`);
    }
    return [adminPDID, adminCSI];
});
const getOneTxPaymentClient = (address, colonyClient) => {
    const oneTxPaymentClient = OneTxPaymentFactory_1.OneTxPaymentFactory.connect(address, colonyClient.signer || colonyClient.provider);
    oneTxPaymentClient.clientType = constants_1.ClientType.OneTxPaymentClient;
    oneTxPaymentClient.makePaymentWithProofs = (_worker, _token, _amount, _domainId, _skillId, overrides) => __awaiter(void 0, void 0, void 0, function* () {
        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);
        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);
        return oneTxPaymentClient.makePayment(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId, overrides);
    });
    oneTxPaymentClient.makePaymentFundedFromDomainWithProofs = (_worker, _token, _amount, _domainId, _skillId, overrides) => __awaiter(void 0, void 0, void 0, function* () {
        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);
        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);
        return oneTxPaymentClient.makePaymentFundedFromDomain(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId, overrides);
    });
    oneTxPaymentClient.estimate.makePaymentWithProofs = (_worker, _token, _amount, _domainId, _skillId) => __awaiter(void 0, void 0, void 0, function* () {
        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);
        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);
        return oneTxPaymentClient.estimate.makePayment(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId);
    });
    oneTxPaymentClient.estimate.makePaymentFundedFromDomainWithProofs = (_worker, _token, _amount, _domainId, _skillId) => __awaiter(void 0, void 0, void 0, function* () {
        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);
        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);
        return oneTxPaymentClient.estimate.makePaymentFundedFromDomain(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId);
    });
    return oneTxPaymentClient;
};
exports.default = getOneTxPaymentClient;
