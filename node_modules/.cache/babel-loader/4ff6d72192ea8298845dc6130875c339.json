{"ast":null,"code":"import { InfuraProvider } from 'ethers/providers';\nimport { utils, Contract } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n      let displayItems;\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      async function prepareDisplayItems(singleLog) {\n        const provider = new InfuraProvider();\n        const abi = [// Read-Only Functions\n        \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\", // Authenticated Functions\n        \"function transfer(address to, uint amount) returns (bool)\", // Events\n        \"event Transfer(address indexed from, address indexed to, uint amount)\"];\n        const address = \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\";\n        const erc20 = new Contract(address, abi, provider);\n        const tokenInfo = await erc20.symbol();\n        const humanReadableAmount = new utils.BigNumber(singleLog.values.amount);\n        const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n        return {\n          tokenType: tokenInfo,\n          amount: convertedAmount.toString()\n        };\n      } // WORKING VERSION!\n      //const promises = await parsedLogs.map(async (singleLog) => {\n      //    return getAssoitaedTypeId(singleLog, this.colonyClient)\n      //        .then(typeId => { return this.colonyClient.getPayment(typeId) })\n      //        .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n      //        .then(log => { return prepareDisplayItems(log) })\n      //        .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount}))\n      //});\n\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return prepareDisplayItems(singleLog).then(displayInfo => Object.assign({}, singleLog, {\n          displayTokenType: displayInfo.tokenType,\n          displayAmount: displayInfo.amount\n        })).then(result => getAssoitaedTypeId(result, this.colonyClient)).then(typeId => {\n          return this.colonyClient.getPayment(typeId);\n        }).then(r => Object.assign({}, singleLog, {\n          displayUserAddress: r.recipient\n        }));\n      });\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["InfuraProvider","utils","Contract","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","displayItems","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","prepareDisplayItems","provider","abi","address","erc20","tokenInfo","symbol","humanReadableAmount","amount","convertedAmount","div","pow","tokenType","promises","map","then","displayInfo","Object","assign","displayTokenType","displayAmount","result","typeId","getPayment","r","displayUserAddress","recipient","preparedLogs","all","error","console","log"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils, Contract } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem';\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n            let displayItems: DisplayPayoutClaimedItem[];\n        \n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n            async function prepareDisplayItems(singleLog: PayoutClaimedItem) {\n\n                const provider = new InfuraProvider();\n\n                const abi = [\n                    // Read-Only Functions\n                    \"function balanceOf(address owner) view returns (uint256)\",\n                    \"function decimals() view returns (uint8)\",\n                    \"function symbol() view returns (string)\",\n\n                    // Authenticated Functions\n                    \"function transfer(address to, uint amount) returns (bool)\",\n\n                    // Events\n                    \"event Transfer(address indexed from, address indexed to, uint amount)\"\n                ];\n\n                const address = \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\";\n\n                const erc20 = new Contract(address, abi, provider);\n                const tokenInfo = await erc20.symbol();\n\n                const humanReadableAmount = new utils.BigNumber(singleLog.values.amount);\n\n                const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n\n                \n                return {tokenType: tokenInfo, amount: convertedAmount.toString()}\n            }\n\n\n            // WORKING VERSION!\n\n            //const promises = await parsedLogs.map(async (singleLog) => {\n            //    return getAssoitaedTypeId(singleLog, this.colonyClient)\n            //        .then(typeId => { return this.colonyClient.getPayment(typeId) })\n            //        .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n            //        .then(log => { return prepareDisplayItems(log) })\n            //        .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount}))\n            //});\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return prepareDisplayItems(singleLog)\n                    .then(displayInfo => Object.assign({}, singleLog, { displayTokenType: displayInfo.tokenType,  displayAmount: displayInfo.amount}))\n                    .then(result => getAssoitaedTypeId(result, this.colonyClient))\n                    .then(typeId => { return this.colonyClient.getPayment(typeId) })\n                    .then(r => Object.assign({}, singleLog, { displayUserAddress: r.recipient }))   \n            });\n\n            const preparedLogs = await Promise.all(promises);\n\n\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}