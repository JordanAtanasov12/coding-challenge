{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport { getColonyNetworkClient, Network } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants'; //import { ColonyRole } from '@colony/colony-js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      colonyInitialisedLogs: [],\n      payoutClaimedLogs: []\n    };\n  }\n\n  async componentDidMount() {\n    const provider = new InfuraProvider(); // Get a random wallet\n\n    const wallet = Wallet.createRandom(); // Connect wallet to the provider\n\n    const connectedWallet = wallet.connect(provider);\n    const networkClient = await getColonyNetworkClient(Network.Mainnet, connectedWallet, {\n      networkAddress: MAINNET_NETWORK_ADDRESS\n    }); // Get the colony client instance for the betacolony\n\n    const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS); // Get the filter for Colony Initilised\n\n    const eventFilter = colonyClient.filters.PayoutClaimed(null, null, null);\n    const colonyInitEventLogs = await getLogs(colonyClient, eventFilter);\n    const parsedLogs = colonyInitEventLogs.map(event => colonyClient.interface.parseLog(event));\n    const payoutCalimedServise = new PayoutClaimedService(); //let payoutPreparedLogs =  await payoutCalimedServise.prepareLogs();    \n    //const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n    async function getAssoitaedTypeId(singleLog, colonyClient) {\n      const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n      const {\n        associatedTypeId\n      } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n      return {\n        associatedTypeId\n      };\n    }\n\n    const promises = parsedLogs.map(singleLog => {\n      return getAssoitaedTypeId(singleLog, colonyClient).then(async associatedTypeId => {\n        const {\n          recipient: userAddress\n        } = await this.colonyClient.getPayment(associatedTypeId);\n        return {\n          recipient: userAddress\n        };\n      }).then(recipient => {\n        Object.assign({}, singleLog, {\n          userAddress: recipient\n        });\n      });\n    }); //const employees = await fetchAllEmployees(baseApi)\n\n    const preparedLogs = await Promise.all(promises);\n    console.log(\"============ PAYOUT CLAIMED ============\");\n    console.log(JSON.stringify(promises));\n    this.setState({\n      colonyInitialisedLogs: promises,\n      payoutClaimedLogs: promises\n    });\n    debugger;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.colonyInitialisedLogs.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.signature, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)), this.state.payoutClaimedLogs.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"ADRESS: \", post.userAddress, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","getColonyNetworkClient","Network","Wallet","InfuraProvider","getLogs","utils","Promise","PayoutClaimedService","MAINNET_NETWORK_ADDRESS","MAINNET_BETACOLONY_ADDRESS","EventLogs","Component","state","colonyInitialisedLogs","payoutClaimedLogs","componentDidMount","provider","wallet","createRandom","connectedWallet","connect","networkClient","Mainnet","networkAddress","colonyClient","getColonyClient","eventFilter","filters","PayoutClaimed","colonyInitEventLogs","parsedLogs","map","event","interface","parseLog","payoutCalimedServise","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","promises","then","recipient","userAddress","getPayment","Object","assign","preparedLogs","all","console","log","JSON","stringify","setState","render","post","name","signature"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport { PayoutClaimedItem } from '../interfaces/PayoutClaimedItem';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n//import { ColonyRole } from '@colony/colony-js';\n\n\n\ninterface ColonyInitValue {\n    colonyNetwork: string;\n    token: string;\n    length: string;\n    fundingPotId: string;\n\n}\n\ninterface PayoutClaimedValue {\n    colonyNetwork: string;\n    token: string;\n    length: string;\n    fundingPotId: string;\n\n}\n\ninterface ColonyInitialisedItem {\n    name: string;\n    signature: string;\n    topic: string;\n    values: ColonyInitValue[];\n}\n\n\ninterface PaymentObject {\n    recipient: string;\n    finalized: boolean;\n}\n\ninterface DisplayPayoutClaimedItem {\n    fundingPotId: string;\n    token: string;\n    userAddress: string;\n}\n\n\n\nexport default class EventLogs extends React.Component {\n\n\n\n    state = { colonyInitialisedLogs: [], payoutClaimedLogs: [] };\n\n    async componentDidMount() {\n\n        const provider = new InfuraProvider();\n\n        // Get a random wallet\n        const wallet = Wallet.createRandom();\n        // Connect wallet to the provider\n        const connectedWallet = wallet.connect(provider);\n\n        const networkClient = await getColonyNetworkClient(\n            Network.Mainnet,\n            connectedWallet,\n            {\n                networkAddress: MAINNET_NETWORK_ADDRESS\n            },\n        );\n\n        // Get the colony client instance for the betacolony\n        const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS);\n\n        // Get the filter for Colony Initilised\n        const eventFilter = colonyClient.filters.PayoutClaimed(null, null, null);\n        const colonyInitEventLogs: any = await getLogs(colonyClient, eventFilter);\n        const parsedLogs: ColonyInitialisedItem[] = colonyInitEventLogs.map((event: any) => colonyClient.interface.parseLog(event));\n\n        const payoutCalimedServise = new PayoutClaimedService();\n        //let payoutPreparedLogs =  await payoutCalimedServise.prepareLogs();    \n\n        //const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n        async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n            const humanReadableFundingPotId = new utils.BigNumber(\n                singleLog.values.fundingPotId\n            ).toString();\n\n            const {\n                associatedTypeId,\n            } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n            return { associatedTypeId, };\n        }\n\n        const promises = parsedLogs.map((singleLog) => {\n            return getAssoitaedTypeId(singleLog, colonyClient).then(async (associatedTypeId) => {\n                const { recipient: userAddress } = await this.colonyClient.getPayment(associatedTypeId);\n                return { recipient: userAddress };\n            }).then((recipient) => {\n                Object.assign({}, singleLog, { userAddress: recipient });\n            });\n        });\n\n\n        //const employees = await fetchAllEmployees(baseApi)\n        const preparedLogs = await Promise.all(promises);\n\n        console.log(\"============ PAYOUT CLAIMED ============\");\n        console.log(JSON.stringify(promises));\n        this.setState({ colonyInitialisedLogs: promises, payoutClaimedLogs: promises });\n        debugger;\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.state.colonyInitialisedLogs.map((post: ColonyInitialisedItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.name} </h4>\n                            <h4> {post.signature} </h4>\n                        </div>\n                    </div>\n                ))}\n                {this.state.payoutClaimedLogs.map((post: PayoutClaimedItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.name} </h4>\n                            <h4>ADRESS: {post.userAddress} </h4>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAASC,sBAAT,EAAiCC,OAAjC,QAA0E,mBAA1E;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AAEA,SAASC,uBAAT,EAAkCC,0BAAlC,QAAoE,sBAApE,C,CACA;;;AAyCA,eAAe,MAAMC,SAAN,SAAwBX,KAAK,CAACY,SAA9B,CAAwC;EAAA;IAAA;IAAA,KAInDC,KAJmD,GAI3C;MAAEC,qBAAqB,EAAE,EAAzB;MAA6BC,iBAAiB,EAAE;IAAhD,CAJ2C;EAAA;;EAM5B,MAAjBC,iBAAiB,GAAG;IAEtB,MAAMC,QAAQ,GAAG,IAAIb,cAAJ,EAAjB,CAFsB,CAItB;;IACA,MAAMc,MAAM,GAAGf,MAAM,CAACgB,YAAP,EAAf,CALsB,CAMtB;;IACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,OAAP,CAAeJ,QAAf,CAAxB;IAEA,MAAMK,aAAa,GAAG,MAAMrB,sBAAsB,CAC9CC,OAAO,CAACqB,OADsC,EAE9CH,eAF8C,EAG9C;MACII,cAAc,EAAEf;IADpB,CAH8C,CAAlD,CATsB,CAiBtB;;IACA,MAAMgB,YAAY,GAAG,MAAMH,aAAa,CAACI,eAAd,CAA8BhB,0BAA9B,CAA3B,CAlBsB,CAoBtB;;IACA,MAAMiB,WAAW,GAAGF,YAAY,CAACG,OAAb,CAAqBC,aAArB,CAAmC,IAAnC,EAAyC,IAAzC,EAA+C,IAA/C,CAApB;IACA,MAAMC,mBAAwB,GAAG,MAAMzB,OAAO,CAACoB,YAAD,EAAeE,WAAf,CAA9C;IACA,MAAMI,UAAmC,GAAGD,mBAAmB,CAACE,GAApB,CAAyBC,KAAD,IAAgBR,YAAY,CAACS,SAAb,CAAuBC,QAAvB,CAAgCF,KAAhC,CAAxC,CAA5C;IAEA,MAAMG,oBAAoB,GAAG,IAAI5B,oBAAJ,EAA7B,CAzBsB,CA0BtB;IAEA;;IAEA,eAAe6B,kBAAf,CAAkCC,SAAlC,EAAgEb,YAAhE,EAAmF;MAC/E,MAAMc,yBAAyB,GAAG,IAAIjC,KAAK,CAACkC,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;MAIA,MAAM;QACFC;MADE,IAEF,MAAMnB,YAAY,CAACoB,aAAb,CAA2BN,yBAA3B,CAFV;MAIA,OAAO;QAAEK;MAAF,CAAP;IACH;;IAED,MAAME,QAAQ,GAAGf,UAAU,CAACC,GAAX,CAAgBM,SAAD,IAAe;MAC3C,OAAOD,kBAAkB,CAACC,SAAD,EAAYb,YAAZ,CAAlB,CAA4CsB,IAA5C,CAAiD,MAAOH,gBAAP,IAA4B;QAChF,MAAM;UAAEI,SAAS,EAAEC;QAAb,IAA6B,MAAM,KAAKxB,YAAL,CAAkByB,UAAlB,CAA6BN,gBAA7B,CAAzC;QACA,OAAO;UAAEI,SAAS,EAAEC;QAAb,CAAP;MACH,CAHM,EAGJF,IAHI,CAGEC,SAAD,IAAe;QACnBG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,SAAlB,EAA6B;UAAEW,WAAW,EAAED;QAAf,CAA7B;MACH,CALM,CAAP;IAMH,CAPgB,CAAjB,CA1CsB,CAoDtB;;IACA,MAAMK,YAAY,GAAG,MAAM9C,OAAO,CAAC+C,GAAR,CAAYR,QAAZ,CAA3B;IAEAS,OAAO,CAACC,GAAR,CAAY,0CAAZ;IACAD,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeZ,QAAf,CAAZ;IACA,KAAKa,QAAL,CAAc;MAAE7C,qBAAqB,EAAEgC,QAAzB;MAAmC/B,iBAAiB,EAAE+B;IAAtD,CAAd;IACA;EACH;;EAGDc,MAAM,GAAG;IACL,oBACI;MAAA,WACK,KAAK/C,KAAL,CAAWC,qBAAX,CAAiCkB,GAAjC,CAAsC6B,IAAD,iBAClC;QAAA,uBACI;UAAA,wBACI;YAAA,gBAAMA,IAAI,CAACC,IAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,gBAAMD,IAAI,CAACE,SAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADH,CADL,EASK,KAAKlD,KAAL,CAAWE,iBAAX,CAA6BiB,GAA7B,CAAkC6B,IAAD,iBAC9B;QAAA,uBACI;UAAA,wBACI;YAAA,gBAAMA,IAAI,CAACC,IAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,uBAAaD,IAAI,CAACZ,WAAlB;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADH,CATL;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAoBH;;AAzFkD"},"metadata":{},"sourceType":"module"}