{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\nimport Blockies from 'react-blockies';\nimport { styles } from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayItems = void 0;\n    this.colonyClient = void 0;\n    this.state = {\n      events: []\n    };\n  }\n\n  async componentDidMount() {\n    this.colonyClient = await ColonyNetworkClientFactory.getColonyClient();\n    this.displayItems = new Array();\n    /*\n        Get all event types logs, sort and map them to generic Display Item \n    */\n    //const payoutCalimedServise = new PayoutClaimedService(this.colonyClient);\n    //const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n    //this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n\n    const colonyInitService = new ColonyInitService(this.colonyClient);\n    const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs];\n    const colonyRoleSetService = new ColonyRoleSetService(this.colonyClient);\n    const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs];\n    const domainAddedService = new DomainAddedService(this.colonyClient);\n    const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n    this.setState({\n      events: this.displayItems.sort(function (x, y) {\n        return x.timestamp - y.timestamp;\n      })\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        style: styles.eventList,\n        children: this.state.events.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: styles.eventBox,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.eventHeader,\n            children: /*#__PURE__*/_jsxDEV(Blockies, {\n              seed: post.avatarSeed,\n              size: 37,\n              scale: 1,\n              color: \"#dfe\",\n              bgColor: \"#ffe\",\n              spotColor: \"#abc\",\n              className: \"avatar-display\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.eventFooter,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.descriptionText,\n              children: [post.description, post.boldItem0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                style: styles.heavyDescription,\n                children: post.boldItem0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 45\n              }, this) : '', post.description0, post.boldItem1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                style: styles.heavyDescription,\n                children: post.boldItem1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 45\n              }, this) : '', post.description1, post.boldItem2 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                style: styles.heavyDescription,\n                children: post.boldItem2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 45\n              }, this) : '', post.description2]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.dateText,\n              children: [\" \", post.date.toString(), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","ColonyInitService","ColonyRoleSetService","DomainAddedService","ColonyNetworkClientFactory","Blockies","styles","EventLogs","Component","displayItems","colonyClient","state","events","componentDidMount","getColonyClient","Array","colonyInitService","colonyInitPreparedLogs","prepareLogs","colonyRoleSetService","colonyRoleSetPreparedLogs","domainAddedService","domaiAddedPreparedLogs","setState","sort","x","y","timestamp","render","eventList","map","post","eventBox","eventHeader","avatarSeed","eventFooter","descriptionText","description","boldItem0","heavyDescription","description0","boldItem1","description1","boldItem2","description2","dateText","date","toString"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from 'react-dom';\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport { DisplayEventItem } from \"../interfaces/eventObjects/DisplayEventItem\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\nimport Blockies from 'react-blockies';\nimport { styles } from '../styles';\n\n\n\nexport default class EventLogs extends React.Component {\n\n    public displayItems: any;\n    private colonyClient: any;\n\n    state = { events: [] };\n\n    async componentDidMount() {\n\n        this.colonyClient = await ColonyNetworkClientFactory.getColonyClient();\n        this.displayItems = new Array<DisplayEventItem>();\n\n        /*\n            Get all event types logs, sort and map them to generic Display Item \n        */\n\n        //const payoutCalimedServise = new PayoutClaimedService(this.colonyClient);\n        //const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n        //this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n\n        const colonyInitService = new ColonyInitService(this.colonyClient);\n        const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs]\n\n        const colonyRoleSetService = new ColonyRoleSetService(this.colonyClient);\n        const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs]\n\n        const domainAddedService = new DomainAddedService(this.colonyClient);\n        const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n\n        this.setState({\n            events: this.displayItems.sort(function (x: DisplayEventItem, y: DisplayEventItem) {\n                return x.timestamp - y.timestamp;\n            })\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <ul style={styles.eventList}>\n                    {this.state.events.map((post: DisplayEventItem) => (\n                        <li style={styles.eventBox}>\n                            <div style={styles.eventHeader}>\n                                <Blockies\n                                    seed={post.avatarSeed}\n                                    size={37}\n                                    scale={1}\n                                    color=\"#dfe\"\n                                    bgColor=\"#ffe\"\n                                    spotColor=\"#abc\"\n                                    className=\"avatar-display\"\n                                />\n                            </div>\n                            <div style={styles.eventFooter}>\n                                <div style={styles.descriptionText}>\n                                    {post.description}\n                                    {\n                                        post.boldItem0 ?\n                                            <span style={styles.heavyDescription}>\n                                                {post.boldItem0}\n                                            </span>\n                                            : ''\n                                    }\n                                    {post.description0}\n                                    {\n                                        post.boldItem1 ?\n                                            <span style={styles.heavyDescription}>\n                                                {post.boldItem1}\n                                            </span>\n                                            : ''\n                                    }\n                                    {post.description1}\n                                    {\n                                        post.boldItem2 ?\n                                            <span style={styles.heavyDescription}>\n                                                {post.boldItem2}\n                                            </span>\n                                            : ''\n                                    }\n                                    {post.description2}\n                                </div>\n                                <div style={styles.dateText} > {post.date.toString()} </div>\n                            </div>\n                        </li>\n                    ))\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}