{"ast":null,"code":"import { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null)); //const [singleLog] = parsedLogs;\n      //for (let singleLog of parsedLogs) {\n      //    //sleep(100);\n      //    const humanReadableFundingPotId = new utils.BigNumber(\n      //        singleLog.values.fundingPotId\n      //    ).toString();\n      //\n      //    const {\n      //        associatedTypeId,\n      //    } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n      //    \n      //    const recipient = await this.colonyClient.getPayment(associatedTypeId);\n      //    Object.assign({}, singleLog, { userAddress: recipient.recipient }); \n      //     break;\n      //};\n      //return parsedLogs;\n      //const employees = await fetchAllEmployees(baseApi)\n\n      return Promise.all(parsedLogs === null || parsedLogs === void 0 ? void 0 : parsedLogs.map(async singleLog => {\n        return async () => {\n          const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n          const {\n            associatedTypeId\n          } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n          return {\n            associatedTypeId\n          };\n        };\n      })).then(async associatedTypeId => {\n        const {\n          recipient: userAddress\n        } = await this.colonyClient.getPayment(associatedTypeId); //Object.assign({}, singleLog, { userAddress: { recipient: userAddress } });\n\n        return parsedLogs;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["utils","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","all","map","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","then","recipient","userAddress","getPayment","error","console","log"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { constants } from \"perf_hooks\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient;\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n            //const [singleLog] = parsedLogs;\n\n\n            //for (let singleLog of parsedLogs) {\n            //    //sleep(100);\n            //    const humanReadableFundingPotId = new utils.BigNumber(\n            //        singleLog.values.fundingPotId\n            //    ).toString();\n            //\n            //    const {\n            //        associatedTypeId,\n            //    } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n            //    \n            //    const recipient = await this.colonyClient.getPayment(associatedTypeId);\n            //    Object.assign({}, singleLog, { userAddress: recipient.recipient }); \n            //     break;\n            //};\n            //return parsedLogs;\n\n\n            //const employees = await fetchAllEmployees(baseApi)\n            return Promise.all(\n                parsedLogs?.map(async singleLog => {\n                    return async () => {\n                        const humanReadableFundingPotId = new utils.BigNumber(\n                            singleLog.values.fundingPotId\n                        ).toString();\n\n                        const {\n                            associatedTypeId,\n                        } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n                        return {\n                            associatedTypeId,\n                        }\n                    }\n                })).then(async (associatedTypeId) => {\n                    const { recipient: userAddress } = await this.colonyClient.getPayment(associatedTypeId);\n                        //Object.assign({}, singleLog, { userAddress: { recipient: userAddress } });\n                        return parsedLogs;\n                });\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAIA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIP,WAAJ,EAApB;MAEA,MAAMQ,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C,CANA,CAQA;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAGA;;MACA,OAAOb,OAAO,CAACc,GAAR,CACHJ,UADG,aACHA,UADG,uBACHA,UAAU,CAAEK,GAAZ,CAAgB,MAAMC,SAAN,IAAmB;QAC/B,OAAO,YAAY;UACf,MAAMC,yBAAyB,GAAG,IAAIlB,KAAK,CAACmB,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;UAIA,MAAM;YACFC;UADE,IAEF,MAAM,KAAKjB,YAAL,CAAkBkB,aAAlB,CAAgCN,yBAAhC,CAFV;UAGA,OAAO;YACHK;UADG,CAAP;QAGH,CAXD;MAYH,CAbD,CADG,EAcCE,IAdD,CAcM,MAAOF,gBAAP,IAA4B;QACjC,MAAM;UAAEG,SAAS,EAAEC;QAAb,IAA6B,MAAM,KAAKrB,YAAL,CAAkBsB,UAAlB,CAA6BL,gBAA7B,CAAzC,CADiC,CAE7B;;QACA,OAAOZ,UAAP;MACP,CAlBE,CAAP;IAmBH,CAhDD,CAgDE,OAAOkB,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;AA9DqC"},"metadata":{},"sourceType":"module"}