{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst index_1 = require(\"./index\");\n\nconst commonExtensions_1 = require(\"./clients/Colony/extensions/commonExtensions\");\n\nconst ROOT_DOMAIN = index_1.ROOT_DOMAIN_ID.toString();\n/**\n * Get the JavaScript timestamp for a block\n *\n * @param provider ethers compatible Provider\n * @param blockHash Hash of block to get time for\n *\n * @returns block timestamp in ms\n */\n\nexports.getBlockTime = (provider, blockHash) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    timestamp\n  } = yield provider.getBlock(blockHash); // timestamp is seconds, Date wants ms\n\n  return timestamp * 1000;\n});\n/**\n * Get raw (unparsed logs) from filter\n *\n * Example:\n * ```typescript\n * // Gets the logs for the `ColonyFundsClaimed` event (not filtered)\n * const filter = colonyClient.filters.ColonyFundsClaimed(null, null, null);\n * const logs = await getLogs(colonyClient, filter);\n * ```\n *\n * @param client Any of the intantiated contract clients\n * @param filter ethers compatible Filter object\n * @param options Configuration options to filter logs\n *\n * @returns ethers Log array\n */\n\n\nexports.getLogs = function (client, filter) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    fromBlock: 1\n  };\n  return __awaiter(void 0, void 0, void 0, function* () {\n    // @TODO: when ethers v5, we can combine topics (so we can get an array of filters here)\n    return client.provider.getLogs(Object.assign(Object.assign({}, filter), options));\n  });\n};\n/**\n * Get parsed event data from filter\n *\n * Example:\n * ```typescript\n * // Gets the logs for the `ColonyFundsClaimed` event (not filtered)\n * const filter = colonyClient.filters.ColonyFundsClaimed(null, null, null);\n * const events = await getEvents(colonyClient, filter);\n * ```\n *\n * @param client Any of the intantiated contract clients\n * @param filter ethers compatible Filter object\n * @param options Configuration options to filter logs\n *\n * @returns Parsed ethers LogDescription array (events)\n */\n\n\nexports.getEvents = (client, filter, options) => __awaiter(void 0, void 0, void 0, function* () {\n  const logs = yield exports.getLogs(client, filter, options);\n  return logs.map(log => client.interface.parseLog(log));\n});\n/**\n * Get multiple events from multiple filters\n *\n * @remarks only works when all events are emitted by the same contract!\n *\n * @param client Any of the intantiated contract clients\n * @param filter Array of ethers compatible Filter objects\n * @param options Configuration options to filter logs\n *\n * @returns Parsed ethers LogDescription array (events)\n */\n\n\nexports.getMultipleEvents = (client, filters, options) => __awaiter(void 0, void 0, void 0, function* () {\n  // Turns\n  // [{ topics: [1, 2, 3] }, { topics: [5, 7] }\n  // into\n  // [[1, 5], [2, 7], [3]]\n  const multipleTopics = filters.reduce((topicsArray, filter) => {\n    if (filter.topics) {\n      filter.topics.forEach((topic, i) => {\n        if (topicsArray[i]) {\n          topicsArray[i].push(topic);\n        } else {\n          // eslint-disable-next-line no-param-reassign\n          topicsArray[i] = [topic];\n        }\n      });\n    }\n\n    return topicsArray;\n  }, []);\n  const filter = Object.assign(Object.assign({}, filters[0]), {\n    topics: multipleTopics\n  });\n  return exports.getEvents(client, filter, options);\n});\n/**\n * Get the associated domain for a pot id\n *\n * @remarks pots can be associated with different types, like domains, payments or tasks\n * See [[`FundingPotAssociatedType`]] for details\n *\n * @param client Any ColonyClient\n * @param potId The funding pot id\n *\n * @returns The associated domainId\n */\n\n\nexports.getPotDomain = (client, potId) => __awaiter(void 0, void 0, void 0, function* () {\n  return commonExtensions_1.getPotDomain(client, potId);\n});\n/**\n * Get the child index for a domain inside its corresponding skills parent children array\n *\n * E.g. (the values *will* differ for you!):\n * domainId = 1\n * corresponding skillId = 2\n * parent of skillId 2:\n * ```\n * {\n *  // ...\n *  children: [2]\n * }\n * ```\n * childSkillIndex would be 0 in this case (0-position in children array)\n *\n * @param client Any ColonyClient\n * @param parentDomainId id of parent domain\n * @param domainId id of the domain\n *\n * @returns Index in the `children` array (see above)\n */\n\n\nexports.getChildIndex = (client, parentDomainId, domainId) => __awaiter(void 0, void 0, void 0, function* () {\n  return commonExtensions_1.getChildIndex(client, parentDomainId, domainId);\n});\n/**\n * Get an array of all roles in the colony\n *\n * E.g.:\n * ```typescript\n * [{\n *  address: 0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef // user address\n *  domains: [{                                         // all domains the user has a role in\n *    domainId: 1,                                      // domainId for the roles\n *    roles: [1, 2, 3]                                  // Array of `ColonyRole`\n *  }]\n * }]\n * ```\n *\n * @param client Any ColonyClient\n *\n * @returns Array of user roles in a colony (see above)\n */\n\n\nexports.getColonyRoles = client => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    oneTxPaymentFactoryClient\n  } = client.networkClient;\n\n  if (client.clientVersion === index_1.ColonyVersion.GoerliGlider) {\n    throw new Error(`Not supported by colony version ${index_1.ColonyVersion.GoerliGlider}`);\n  }\n\n  const colonyRoleSetFilter = client.filters.ColonyRoleSet(null, null, null, null);\n  const colonyRoleEvents = yield exports.getEvents(client, colonyRoleSetFilter); // eslint-disable-next-line max-len\n\n  const recoveryRoleSetFilter = client.awkwardRecoveryRoleEventClient.filters.RecoveryRoleSet(null, null);\n  const recoveryRoleEvents = yield exports.getEvents(client, recoveryRoleSetFilter);\n  const oneTxAddress = yield oneTxPaymentFactoryClient.deployedExtensions(client.address); // We construct a map that holds all users with all domains and the roles as Sets\n\n  const rolesMap = colonyRoleEvents // Don't show roles of OneTxPayment contracts\n  .filter(event => event && event.values.user !== oneTxAddress).reduce((colonyRolesMap, _ref) => {\n    let {\n      values\n    } = _ref;\n    const {\n      user,\n      domainId,\n      role,\n      setTo\n    } = values;\n    const domainKey = domainId.toString();\n\n    if (!colonyRolesMap[user] && setTo) {\n      // eslint-disable-next-line no-param-reassign\n      colonyRolesMap[user] = {\n        [domainKey]: new Set([role])\n      };\n    }\n\n    if (!colonyRolesMap[user][domainKey] && setTo) {\n      // eslint-disable-next-line no-param-reassign\n      colonyRolesMap[user][domainKey] = new Set([role]);\n    }\n\n    if (setTo) {\n      colonyRolesMap[user][domainKey].add(role);\n    } else {\n      colonyRolesMap[user][domainKey].delete(role);\n    }\n\n    return colonyRolesMap;\n  }, {}); // OK, now we also collect all the RecoveryRoleSet events for this colony\n\n  recoveryRoleEvents // Don't show roles of OneTxPayment contracts\n  .filter(event => event && event.values.user !== oneTxAddress).forEach(_ref2 => {\n    let {\n      values\n    } = _ref2;\n    const {\n      user,\n      setTo\n    } = values;\n\n    if (rolesMap[user][ROOT_DOMAIN]) {\n      if (setTo) {\n        rolesMap[user][ROOT_DOMAIN].add(index_1.ColonyRole.Recovery);\n      } else {\n        rolesMap[user][ROOT_DOMAIN].delete(index_1.ColonyRole.Recovery);\n      }\n    } else if (setTo) {\n      rolesMap[user][ROOT_DOMAIN] = new Set([index_1.ColonyRole.Recovery]);\n    }\n  });\n  return Object.entries(rolesMap).map(_ref3 => {\n    let [address, userRoles] = _ref3;\n    const domains = Object.entries(userRoles).map(_ref4 => {\n      let [domainId, domainRoles] = _ref4;\n      return {\n        domainId: parseInt(domainId, 10),\n        roles: Array.from(domainRoles)\n      };\n    });\n    return {\n      address,\n      domains\n    };\n  });\n});\n/**\n * Get the permission proofs for a user address and a certain role\n *\n * Certain methods on Colony contracts require so called \"permission proofs\". These are made up by\n * the `permissionDomainId` and the `childSkillIndex`. We shall attempt an explanation here.\n *\n * Domains within a colony can be nested and all the permissions in a parent domain apply for all child domains.\n * Yet at the time of calling a domain-permissioned method the contracts are unaware of the parent domain\n * a certain user has the required permission in. So when we these methods are called we have to supply them\n * the id of the parent domain the user has the permission in (it could also be the very same domain id they\n * want to act in!). Furthermore for the contracts the unidirectional chain downwards we have to supply\n * the method wuth the index of the domains associated skill in its parents children array\n * (`childSkillIndex`, see [[`getChildIndex`]]).\n * The contracts are then able to verify the permissions (the role) claimed by the caller.\n *\n * tl;dr:\n *\n * * `permissionDomainId`: id of the parent domain of the required domain the user has the required permission in\n * * `childSkillIndex`: the child index for a domain inside its corresponding skills parent children array\n *\n * @param client Any ColonyClient\n * @param domainId Domain id the method needs to act in\n * @param role Permissioning role that the methods needs to function\n * @param customAddress A custom address to get the permission proofs for (defaults to the signer's address)\n *\n * @returns Tuple of `[permissionDomainId, childSkillIndex]`\n */\n\n\nexports.getPermissionProofs = (client, domainId, role, customAddress) => __awaiter(void 0, void 0, void 0, function* () {\n  return commonExtensions_1.getPermissionProofs(client, domainId, role, customAddress);\n});\n/**\n * Get the permission proofs for a user address and the `moveFundsBetweenPots` method\n *\n * The [[`ColonyClientV1.moveFundsBetweenPots`]] method is a special case as it requires the permission proofs for\n * not only one but two domains (source and target domain pots). This helper will call the [[`getPermissionProofs`]]\n * helper internally and apply the correct roles required.\n *\n * @remarks It is required for the `moveFundsBetweenPots` method to work that both the source and the target domain\n * have the same parent domain which provides the role permissions (`Funding` role). That's why we're only returning one\n * `permissionDomainId`.\n *\n * @param client Any ColonyClient\n * @param fromtPotId Source pot id\n * @param toPotId Target pot id\n * @param customAddress A custom address to get the permission proofs for (defaults to the signer's address)\n *\n * @returns Tuple of `[permissionDomainId, fromChildSkillIndex, toChildSkillIndex]`\n */\n\n\nexports.getMoveFundsPermissionProofs = (client, fromtPotId, toPotId, customAddress) => __awaiter(void 0, void 0, void 0, function* () {\n  return commonExtensions_1.getMoveFundsPermissionProofs(client, fromtPotId, toPotId, customAddress);\n});","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","index_1","require","commonExtensions_1","ROOT_DOMAIN","ROOT_DOMAIN_ID","toString","getBlockTime","provider","blockHash","timestamp","getBlock","getLogs","client","filter","options","fromBlock","assign","getEvents","logs","map","log","interface","parseLog","getMultipleEvents","filters","multipleTopics","reduce","topicsArray","topics","forEach","topic","i","push","getPotDomain","potId","getChildIndex","parentDomainId","domainId","getColonyRoles","oneTxPaymentFactoryClient","networkClient","clientVersion","ColonyVersion","GoerliGlider","Error","colonyRoleSetFilter","ColonyRoleSet","colonyRoleEvents","recoveryRoleSetFilter","awkwardRecoveryRoleEventClient","RecoveryRoleSet","recoveryRoleEvents","oneTxAddress","deployedExtensions","address","rolesMap","event","values","user","colonyRolesMap","role","setTo","domainKey","Set","add","delete","ColonyRole","Recovery","entries","userRoles","domains","domainRoles","parseInt","roles","Array","from","getPermissionProofs","customAddress","getMoveFundsPermissionProofs","fromtPotId","toPotId"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/node_modules/@colony/colony-js/lib/helpers.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"./index\");\nconst commonExtensions_1 = require(\"./clients/Colony/extensions/commonExtensions\");\nconst ROOT_DOMAIN = index_1.ROOT_DOMAIN_ID.toString();\n/**\n * Get the JavaScript timestamp for a block\n *\n * @param provider ethers compatible Provider\n * @param blockHash Hash of block to get time for\n *\n * @returns block timestamp in ms\n */\nexports.getBlockTime = (provider, blockHash) => __awaiter(void 0, void 0, void 0, function* () {\n    const { timestamp } = yield provider.getBlock(blockHash);\n    // timestamp is seconds, Date wants ms\n    return timestamp * 1000;\n});\n/**\n * Get raw (unparsed logs) from filter\n *\n * Example:\n * ```typescript\n * // Gets the logs for the `ColonyFundsClaimed` event (not filtered)\n * const filter = colonyClient.filters.ColonyFundsClaimed(null, null, null);\n * const logs = await getLogs(colonyClient, filter);\n * ```\n *\n * @param client Any of the intantiated contract clients\n * @param filter ethers compatible Filter object\n * @param options Configuration options to filter logs\n *\n * @returns ethers Log array\n */\nexports.getLogs = (client, filter, options = {\n    fromBlock: 1,\n}) => __awaiter(void 0, void 0, void 0, function* () {\n    // @TODO: when ethers v5, we can combine topics (so we can get an array of filters here)\n    return client.provider.getLogs(Object.assign(Object.assign({}, filter), options));\n});\n/**\n * Get parsed event data from filter\n *\n * Example:\n * ```typescript\n * // Gets the logs for the `ColonyFundsClaimed` event (not filtered)\n * const filter = colonyClient.filters.ColonyFundsClaimed(null, null, null);\n * const events = await getEvents(colonyClient, filter);\n * ```\n *\n * @param client Any of the intantiated contract clients\n * @param filter ethers compatible Filter object\n * @param options Configuration options to filter logs\n *\n * @returns Parsed ethers LogDescription array (events)\n */\nexports.getEvents = (client, filter, options) => __awaiter(void 0, void 0, void 0, function* () {\n    const logs = yield exports.getLogs(client, filter, options);\n    return logs.map((log) => client.interface.parseLog(log));\n});\n/**\n * Get multiple events from multiple filters\n *\n * @remarks only works when all events are emitted by the same contract!\n *\n * @param client Any of the intantiated contract clients\n * @param filter Array of ethers compatible Filter objects\n * @param options Configuration options to filter logs\n *\n * @returns Parsed ethers LogDescription array (events)\n */\nexports.getMultipleEvents = (client, filters, options) => __awaiter(void 0, void 0, void 0, function* () {\n    // Turns\n    // [{ topics: [1, 2, 3] }, { topics: [5, 7] }\n    // into\n    // [[1, 5], [2, 7], [3]]\n    const multipleTopics = filters.reduce((topicsArray, filter) => {\n        if (filter.topics) {\n            filter.topics.forEach((topic, i) => {\n                if (topicsArray[i]) {\n                    topicsArray[i].push(topic);\n                }\n                else {\n                    // eslint-disable-next-line no-param-reassign\n                    topicsArray[i] = [topic];\n                }\n            });\n        }\n        return topicsArray;\n    }, []);\n    const filter = Object.assign(Object.assign({}, filters[0]), { topics: multipleTopics });\n    return exports.getEvents(client, filter, options);\n});\n/**\n * Get the associated domain for a pot id\n *\n * @remarks pots can be associated with different types, like domains, payments or tasks\n * See [[`FundingPotAssociatedType`]] for details\n *\n * @param client Any ColonyClient\n * @param potId The funding pot id\n *\n * @returns The associated domainId\n */\nexports.getPotDomain = (client, potId) => __awaiter(void 0, void 0, void 0, function* () { return commonExtensions_1.getPotDomain(client, potId); });\n/**\n * Get the child index for a domain inside its corresponding skills parent children array\n *\n * E.g. (the values *will* differ for you!):\n * domainId = 1\n * corresponding skillId = 2\n * parent of skillId 2:\n * ```\n * {\n *  // ...\n *  children: [2]\n * }\n * ```\n * childSkillIndex would be 0 in this case (0-position in children array)\n *\n * @param client Any ColonyClient\n * @param parentDomainId id of parent domain\n * @param domainId id of the domain\n *\n * @returns Index in the `children` array (see above)\n */\nexports.getChildIndex = (client, parentDomainId, domainId) => __awaiter(void 0, void 0, void 0, function* () { return commonExtensions_1.getChildIndex(client, parentDomainId, domainId); });\n/**\n * Get an array of all roles in the colony\n *\n * E.g.:\n * ```typescript\n * [{\n *  address: 0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef // user address\n *  domains: [{                                         // all domains the user has a role in\n *    domainId: 1,                                      // domainId for the roles\n *    roles: [1, 2, 3]                                  // Array of `ColonyRole`\n *  }]\n * }]\n * ```\n *\n * @param client Any ColonyClient\n *\n * @returns Array of user roles in a colony (see above)\n */\nexports.getColonyRoles = (client) => __awaiter(void 0, void 0, void 0, function* () {\n    const { oneTxPaymentFactoryClient } = client.networkClient;\n    if (client.clientVersion === index_1.ColonyVersion.GoerliGlider) {\n        throw new Error(`Not supported by colony version ${index_1.ColonyVersion.GoerliGlider}`);\n    }\n    const colonyRoleSetFilter = client.filters.ColonyRoleSet(null, null, null, null);\n    const colonyRoleEvents = yield exports.getEvents(client, colonyRoleSetFilter);\n    // eslint-disable-next-line max-len\n    const recoveryRoleSetFilter = client.awkwardRecoveryRoleEventClient.filters.RecoveryRoleSet(null, null);\n    const recoveryRoleEvents = yield exports.getEvents(client, recoveryRoleSetFilter);\n    const oneTxAddress = yield oneTxPaymentFactoryClient.deployedExtensions(client.address);\n    // We construct a map that holds all users with all domains and the roles as Sets\n    const rolesMap = colonyRoleEvents\n        // Don't show roles of OneTxPayment contracts\n        .filter((event) => event && event.values.user !== oneTxAddress)\n        .reduce((colonyRolesMap, { values }) => {\n        const { user, domainId, role, setTo } = values;\n        const domainKey = domainId.toString();\n        if (!colonyRolesMap[user] && setTo) {\n            // eslint-disable-next-line no-param-reassign\n            colonyRolesMap[user] = { [domainKey]: new Set([role]) };\n        }\n        if (!colonyRolesMap[user][domainKey] && setTo) {\n            // eslint-disable-next-line no-param-reassign\n            colonyRolesMap[user][domainKey] = new Set([role]);\n        }\n        if (setTo) {\n            colonyRolesMap[user][domainKey].add(role);\n        }\n        else {\n            colonyRolesMap[user][domainKey].delete(role);\n        }\n        return colonyRolesMap;\n    }, {});\n    // OK, now we also collect all the RecoveryRoleSet events for this colony\n    recoveryRoleEvents\n        // Don't show roles of OneTxPayment contracts\n        .filter((event) => event && event.values.user !== oneTxAddress)\n        .forEach(({ values }) => {\n        const { user, setTo } = values;\n        if (rolesMap[user][ROOT_DOMAIN]) {\n            if (setTo) {\n                rolesMap[user][ROOT_DOMAIN].add(index_1.ColonyRole.Recovery);\n            }\n            else {\n                rolesMap[user][ROOT_DOMAIN].delete(index_1.ColonyRole.Recovery);\n            }\n        }\n        else if (setTo) {\n            rolesMap[user][ROOT_DOMAIN] = new Set([index_1.ColonyRole.Recovery]);\n        }\n    });\n    return Object.entries(rolesMap).map(([address, userRoles]) => {\n        const domains = Object.entries(userRoles).map(([domainId, domainRoles]) => ({\n            domainId: parseInt(domainId, 10),\n            roles: Array.from(domainRoles),\n        }));\n        return {\n            address,\n            domains,\n        };\n    });\n});\n/**\n * Get the permission proofs for a user address and a certain role\n *\n * Certain methods on Colony contracts require so called \"permission proofs\". These are made up by\n * the `permissionDomainId` and the `childSkillIndex`. We shall attempt an explanation here.\n *\n * Domains within a colony can be nested and all the permissions in a parent domain apply for all child domains.\n * Yet at the time of calling a domain-permissioned method the contracts are unaware of the parent domain\n * a certain user has the required permission in. So when we these methods are called we have to supply them\n * the id of the parent domain the user has the permission in (it could also be the very same domain id they\n * want to act in!). Furthermore for the contracts the unidirectional chain downwards we have to supply\n * the method wuth the index of the domains associated skill in its parents children array\n * (`childSkillIndex`, see [[`getChildIndex`]]).\n * The contracts are then able to verify the permissions (the role) claimed by the caller.\n *\n * tl;dr:\n *\n * * `permissionDomainId`: id of the parent domain of the required domain the user has the required permission in\n * * `childSkillIndex`: the child index for a domain inside its corresponding skills parent children array\n *\n * @param client Any ColonyClient\n * @param domainId Domain id the method needs to act in\n * @param role Permissioning role that the methods needs to function\n * @param customAddress A custom address to get the permission proofs for (defaults to the signer's address)\n *\n * @returns Tuple of `[permissionDomainId, childSkillIndex]`\n */\nexports.getPermissionProofs = (client, domainId, role, customAddress) => __awaiter(void 0, void 0, void 0, function* () { return commonExtensions_1.getPermissionProofs(client, domainId, role, customAddress); });\n/**\n * Get the permission proofs for a user address and the `moveFundsBetweenPots` method\n *\n * The [[`ColonyClientV1.moveFundsBetweenPots`]] method is a special case as it requires the permission proofs for\n * not only one but two domains (source and target domain pots). This helper will call the [[`getPermissionProofs`]]\n * helper internally and apply the correct roles required.\n *\n * @remarks It is required for the `moveFundsBetweenPots` method to work that both the source and the target domain\n * have the same parent domain which provides the role permissions (`Funding` role). That's why we're only returning one\n * `permissionDomainId`.\n *\n * @param client Any ColonyClient\n * @param fromtPotId Source pot id\n * @param toPotId Target pot id\n * @param customAddress A custom address to get the permission proofs for (defaults to the signer's address)\n *\n * @returns Tuple of `[permissionDomainId, fromChildSkillIndex, toChildSkillIndex]`\n */\nexports.getMoveFundsPermissionProofs = (client, fromtPotId, toPotId, customAddress) => __awaiter(void 0, void 0, void 0, function* () { return commonExtensions_1.getMoveFundsPermissionProofs(client, fromtPotId, toPotId, customAddress); });\n"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;EACrF,SAASC,KAAT,CAAeC,KAAf,EAAsB;IAAE,OAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;MAAEA,OAAO,CAACD,KAAD,CAAP;IAAiB,CAA5C,CAApC;EAAoF;;EAC5G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;IACvD,SAASC,SAAT,CAAmBJ,KAAnB,EAA0B;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;MAA8B,CAApC,CAAqC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC3F,SAASC,QAAT,CAAkBR,KAAlB,EAAyB;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;MAAkC,CAAxC,CAAyC,OAAOO,CAAP,EAAU;QAAEJ,MAAM,CAACI,CAAD,CAAN;MAAY;IAAE;;IAC9F,SAASF,IAAT,CAAcI,MAAd,EAAsB;MAAEA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;IAAsF;;IAC9GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;EACH,CALM,CAAP;AAMH,CARD;;AASAO,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEf,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMgB,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,8CAAD,CAAlC;;AACA,MAAME,WAAW,GAAGH,OAAO,CAACI,cAAR,CAAuBC,QAAvB,EAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAN,OAAO,CAACO,YAAR,GAAuB,CAACC,QAAD,EAAWC,SAAX,KAAyB9B,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAC3F,MAAM;IAAE+B;EAAF,IAAgB,MAAMF,QAAQ,CAACG,QAAT,CAAkBF,SAAlB,CAA5B,CAD2F,CAE3F;;EACA,OAAOC,SAAS,GAAG,IAAnB;AACH,CAJwD,CAAzD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAACY,OAAR,GAAkB,UAACC,MAAD,EAASC,MAAT;EAAA,IAAiBC,OAAjB,uEAA2B;IACzCC,SAAS,EAAE;EAD8B,CAA3B;EAAA,OAEZrC,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;IACjD;IACA,OAAOkC,MAAM,CAACL,QAAP,CAAgBI,OAAhB,CAAwBd,MAAM,CAACmB,MAAP,CAAcnB,MAAM,CAACmB,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAAd,EAAyCC,OAAzC,CAAxB,CAAP;EACH,CAHc,CAFG;AAAA,CAAlB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,OAAO,CAACkB,SAAR,GAAoB,CAACL,MAAD,EAASC,MAAT,EAAiBC,OAAjB,KAA6BpC,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAC5F,MAAMwC,IAAI,GAAG,MAAMnB,OAAO,CAACY,OAAR,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgCC,OAAhC,CAAnB;EACA,OAAOI,IAAI,CAACC,GAAL,CAAUC,GAAD,IAASR,MAAM,CAACS,SAAP,CAAiBC,QAAjB,CAA0BF,GAA1B,CAAlB,CAAP;AACH,CAHyD,CAA1D;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArB,OAAO,CAACwB,iBAAR,GAA4B,CAACX,MAAD,EAASY,OAAT,EAAkBV,OAAlB,KAA8BpC,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EACrG;EACA;EACA;EACA;EACA,MAAM+C,cAAc,GAAGD,OAAO,CAACE,MAAR,CAAe,CAACC,WAAD,EAAcd,MAAd,KAAyB;IAC3D,IAAIA,MAAM,CAACe,MAAX,EAAmB;MACff,MAAM,CAACe,MAAP,CAAcC,OAAd,CAAsB,CAACC,KAAD,EAAQC,CAAR,KAAc;QAChC,IAAIJ,WAAW,CAACI,CAAD,CAAf,EAAoB;UAChBJ,WAAW,CAACI,CAAD,CAAX,CAAeC,IAAf,CAAoBF,KAApB;QACH,CAFD,MAGK;UACD;UACAH,WAAW,CAACI,CAAD,CAAX,GAAiB,CAACD,KAAD,CAAjB;QACH;MACJ,CARD;IASH;;IACD,OAAOH,WAAP;EACH,CAbsB,EAapB,EAboB,CAAvB;EAcA,MAAMd,MAAM,GAAGhB,MAAM,CAACmB,MAAP,CAAcnB,MAAM,CAACmB,MAAP,CAAc,EAAd,EAAkBQ,OAAO,CAAC,CAAD,CAAzB,CAAd,EAA6C;IAAEI,MAAM,EAAEH;EAAV,CAA7C,CAAf;EACA,OAAO1B,OAAO,CAACkB,SAAR,CAAkBL,MAAlB,EAA0BC,MAA1B,EAAkCC,OAAlC,CAAP;AACH,CArBkE,CAAnE;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAf,OAAO,CAACkC,YAAR,GAAuB,CAACrB,MAAD,EAASsB,KAAT,KAAmBxD,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAAE,OAAOwB,kBAAkB,CAAC+B,YAAnB,CAAgCrB,MAAhC,EAAwCsB,KAAxC,CAAP;AAAwD,CAAhG,CAAnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnC,OAAO,CAACoC,aAAR,GAAwB,CAACvB,MAAD,EAASwB,cAAT,EAAyBC,QAAzB,KAAsC3D,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAAE,OAAOwB,kBAAkB,CAACiC,aAAnB,CAAiCvB,MAAjC,EAAyCwB,cAAzC,EAAyDC,QAAzD,CAAP;AAA4E,CAApH,CAAvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtC,OAAO,CAACuC,cAAR,GAA0B1B,MAAD,IAAYlC,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAChF,MAAM;IAAE6D;EAAF,IAAgC3B,MAAM,CAAC4B,aAA7C;;EACA,IAAI5B,MAAM,CAAC6B,aAAP,KAAyBzC,OAAO,CAAC0C,aAAR,CAAsBC,YAAnD,EAAiE;IAC7D,MAAM,IAAIC,KAAJ,CAAW,mCAAkC5C,OAAO,CAAC0C,aAAR,CAAsBC,YAAa,EAAhF,CAAN;EACH;;EACD,MAAME,mBAAmB,GAAGjC,MAAM,CAACY,OAAP,CAAesB,aAAf,CAA6B,IAA7B,EAAmC,IAAnC,EAAyC,IAAzC,EAA+C,IAA/C,CAA5B;EACA,MAAMC,gBAAgB,GAAG,MAAMhD,OAAO,CAACkB,SAAR,CAAkBL,MAAlB,EAA0BiC,mBAA1B,CAA/B,CANgF,CAOhF;;EACA,MAAMG,qBAAqB,GAAGpC,MAAM,CAACqC,8BAAP,CAAsCzB,OAAtC,CAA8C0B,eAA9C,CAA8D,IAA9D,EAAoE,IAApE,CAA9B;EACA,MAAMC,kBAAkB,GAAG,MAAMpD,OAAO,CAACkB,SAAR,CAAkBL,MAAlB,EAA0BoC,qBAA1B,CAAjC;EACA,MAAMI,YAAY,GAAG,MAAMb,yBAAyB,CAACc,kBAA1B,CAA6CzC,MAAM,CAAC0C,OAApD,CAA3B,CAVgF,CAWhF;;EACA,MAAMC,QAAQ,GAAGR,gBAAgB,CAC7B;EAD6B,CAE5BlC,MAFY,CAEJ2C,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsBN,YAFrC,EAGZ1B,MAHY,CAGL,CAACiC,cAAD,WAAgC;IAAA,IAAf;MAAEF;IAAF,CAAe;IACxC,MAAM;MAAEC,IAAF;MAAQrB,QAAR;MAAkBuB,IAAlB;MAAwBC;IAAxB,IAAkCJ,MAAxC;IACA,MAAMK,SAAS,GAAGzB,QAAQ,CAAChC,QAAT,EAAlB;;IACA,IAAI,CAACsD,cAAc,CAACD,IAAD,CAAf,IAAyBG,KAA7B,EAAoC;MAChC;MACAF,cAAc,CAACD,IAAD,CAAd,GAAuB;QAAE,CAACI,SAAD,GAAa,IAAIC,GAAJ,CAAQ,CAACH,IAAD,CAAR;MAAf,CAAvB;IACH;;IACD,IAAI,CAACD,cAAc,CAACD,IAAD,CAAd,CAAqBI,SAArB,CAAD,IAAoCD,KAAxC,EAA+C;MAC3C;MACAF,cAAc,CAACD,IAAD,CAAd,CAAqBI,SAArB,IAAkC,IAAIC,GAAJ,CAAQ,CAACH,IAAD,CAAR,CAAlC;IACH;;IACD,IAAIC,KAAJ,EAAW;MACPF,cAAc,CAACD,IAAD,CAAd,CAAqBI,SAArB,EAAgCE,GAAhC,CAAoCJ,IAApC;IACH,CAFD,MAGK;MACDD,cAAc,CAACD,IAAD,CAAd,CAAqBI,SAArB,EAAgCG,MAAhC,CAAuCL,IAAvC;IACH;;IACD,OAAOD,cAAP;EACH,CArBgB,EAqBd,EArBc,CAAjB,CAZgF,CAkChF;;EACAR,kBAAkB,CACd;EADc,CAEbtC,MAFL,CAEa2C,KAAD,IAAWA,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsBN,YAFtD,EAGKvB,OAHL,CAGa,SAAgB;IAAA,IAAf;MAAE4B;IAAF,CAAe;IACzB,MAAM;MAAEC,IAAF;MAAQG;IAAR,IAAkBJ,MAAxB;;IACA,IAAIF,QAAQ,CAACG,IAAD,CAAR,CAAevD,WAAf,CAAJ,EAAiC;MAC7B,IAAI0D,KAAJ,EAAW;QACPN,QAAQ,CAACG,IAAD,CAAR,CAAevD,WAAf,EAA4B6D,GAA5B,CAAgChE,OAAO,CAACkE,UAAR,CAAmBC,QAAnD;MACH,CAFD,MAGK;QACDZ,QAAQ,CAACG,IAAD,CAAR,CAAevD,WAAf,EAA4B8D,MAA5B,CAAmCjE,OAAO,CAACkE,UAAR,CAAmBC,QAAtD;MACH;IACJ,CAPD,MAQK,IAAIN,KAAJ,EAAW;MACZN,QAAQ,CAACG,IAAD,CAAR,CAAevD,WAAf,IAA8B,IAAI4D,GAAJ,CAAQ,CAAC/D,OAAO,CAACkE,UAAR,CAAmBC,QAApB,CAAR,CAA9B;IACH;EACJ,CAhBD;EAiBA,OAAOtE,MAAM,CAACuE,OAAP,CAAeb,QAAf,EAAyBpC,GAAzB,CAA6B,SAA0B;IAAA,IAAzB,CAACmC,OAAD,EAAUe,SAAV,CAAyB;IAC1D,MAAMC,OAAO,GAAGzE,MAAM,CAACuE,OAAP,CAAeC,SAAf,EAA0BlD,GAA1B,CAA8B;MAAA,IAAC,CAACkB,QAAD,EAAWkC,WAAX,CAAD;MAAA,OAA8B;QACxElC,QAAQ,EAAEmC,QAAQ,CAACnC,QAAD,EAAW,EAAX,CADsD;QAExEoC,KAAK,EAAEC,KAAK,CAACC,IAAN,CAAWJ,WAAX;MAFiE,CAA9B;IAAA,CAA9B,CAAhB;IAIA,OAAO;MACHjB,OADG;MAEHgB;IAFG,CAAP;EAIH,CATM,CAAP;AAUH,CA9D6C,CAA9C;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvE,OAAO,CAAC6E,mBAAR,GAA8B,CAAChE,MAAD,EAASyB,QAAT,EAAmBuB,IAAnB,EAAyBiB,aAAzB,KAA2CnG,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAAE,OAAOwB,kBAAkB,CAAC0E,mBAAnB,CAAuChE,MAAvC,EAA+CyB,QAA/C,EAAyDuB,IAAzD,EAA+DiB,aAA/D,CAAP;AAAuF,CAA/H,CAAlF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9E,OAAO,CAAC+E,4BAAR,GAAuC,CAAClE,MAAD,EAASmE,UAAT,EAAqBC,OAArB,EAA8BH,aAA9B,KAAgDnG,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EAAE,OAAOwB,kBAAkB,CAAC4E,4BAAnB,CAAgDlE,MAAhD,EAAwDmE,UAAxD,EAAoEC,OAApE,EAA6EH,aAA7E,CAAP;AAAqG,CAA7I,CAAhG"},"metadata":{},"sourceType":"script"}