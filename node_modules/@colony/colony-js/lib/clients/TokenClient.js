"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/utils");
const constants_1 = require("../constants");
const TokenFactory_1 = require("../contracts/4/TokenFactory");
const TokenErc20Factory_1 = require("../contracts/4/TokenErc20Factory");
const TokenSaiFactory_1 = require("../contracts/4/TokenSaiFactory");
const isSai = (address) => utils_1.getAddress(address) === constants_1.tokenAddresses.SAI;
const getTokenClient = (address, signerOrProvider) => __awaiter(void 0, void 0, void 0, function* () {
    let tokenClient;
    let isColonyToken = false;
    tokenClient = TokenFactory_1.TokenFactory.connect(address, signerOrProvider);
    // Colony tokens have the `locked()` method. We assume that when it exists on
    // the contract we have a ColonyToken ðŸ¦†. This might not be true though, so can't rely
    // on this 100% when trying to call contract methods
    try {
        yield tokenClient.locked();
        isColonyToken = true;
    }
    catch (_a) {
        isColonyToken = false;
    }
    if (isColonyToken) {
        tokenClient.tokenClientType = constants_1.TokenClientType.Colony;
    }
    else if (isSai(address)) {
        tokenClient = TokenSaiFactory_1.TokenSaiFactory.connect(address, signerOrProvider);
        tokenClient.tokenClientType = constants_1.TokenClientType.Dai;
    }
    else {
        tokenClient = TokenErc20Factory_1.TokenErc20Factory.connect(address, signerOrProvider);
        tokenClient.tokenClientType = constants_1.TokenClientType.Erc20;
    }
    // Before we go, let's check if this resembles a valid ERC20 token, for good measure
    try {
        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
        // @ts-ignore https://github.com/ethereum-ts/TypeChain/pull/255
        yield tokenClient.estimate.transfer(address, 0, {
            from: address,
        });
    }
    catch (err) {
        throw new Error(`Token is probably not a valid ERC20 token, got ${err}`);
    }
    tokenClient.clientType = constants_1.ClientType.TokenClient;
    tokenClient.getTokenInfo = () => __awaiter(void 0, void 0, void 0, function* () {
        let name = yield tokenClient.name();
        // Special case for contracts with bytes32 strings (I'm looking at you, DAI)
        if (utils_1.isHexString(name)) {
            name = utils_1.parseBytes32String(name);
        }
        let symbol = yield tokenClient.symbol();
        if (utils_1.isHexString(symbol)) {
            symbol = utils_1.parseBytes32String(symbol);
        }
        const decimals = yield tokenClient.decimals();
        return {
            name,
            symbol,
            decimals,
        };
    });
    return tokenClient;
});
exports.default = getTokenClient;
