{"ast":null,"code":"import { utils } from 'ethers';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async init() {\n    this.colonyClient = await this.networkClient.getClient();\n  }\n\n  async prepareLogs() {\n    const logsService = new LogsService();\n    let parsedLogs = logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n    parsedLogs.map(async singleLog => {\n      const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n      const {\n        associatedTypeId\n      } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n      const recipient = await this.colonyClient.getPayment(associatedTypeId);\n      singleLog.userAddress = recipient.recipient;\n    });\n    return parsedLogs;\n  }\n\n}","map":{"version":3,"names":["utils","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","init","getClient","prepareLogs","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","map","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","recipient","getPayment","userAddress"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient;\n    }\n\n    async init(){\n        this.colonyClient = await this.networkClient.getClient();\n    }\n\n    public async prepareLogs() {\n\n       \n\n        const logsService = new LogsService();\n\n        let parsedLogs: any = logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n        parsedLogs.map(async (singleLog: PayoutClaimedItem) => {\n            const humanReadableFundingPotId = new utils.BigNumber(\n                singleLog.values.fundingPotId\n            ).toString();\n\n            const {\n                associatedTypeId,\n            } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n\n            const recipient = await this.colonyClient.getPayment(associatedTypeId);\n            singleLog.userAddress = recipient.recipient;\n        });\n\n        return parsedLogs;\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AAEA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAGA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAES,MAAJM,IAAI,GAAE;IACR,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;EACH;;EAEuB,MAAXC,WAAW,GAAG;IAIvB,MAAMC,WAAW,GAAG,IAAIR,WAAJ,EAApB;IAEA,IAAIS,UAAe,GAAGD,WAAW,CAACE,aAAZ,CAA0B,KAAKP,YAAL,CAAkBQ,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAAtB;IAEAH,UAAU,CAACI,GAAX,CAAe,MAAOC,SAAP,IAAwC;MACnD,MAAMC,yBAAyB,GAAG,IAAIjB,KAAK,CAACkB,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;MAIA,MAAM;QACFC;MADE,IAEF,MAAM,KAAKjB,YAAL,CAAkBkB,aAAlB,CAAgCN,yBAAhC,CAFV;MAIA,MAAMO,SAAS,GAAG,MAAM,KAAKnB,YAAL,CAAkBoB,UAAlB,CAA6BH,gBAA7B,CAAxB;MACAN,SAAS,CAACU,WAAV,GAAwBF,SAAS,CAACA,SAAlC;IACH,CAXD;IAaA,OAAOb,UAAP;EACH;;AAnCqC"},"metadata":{},"sourceType":"module"}