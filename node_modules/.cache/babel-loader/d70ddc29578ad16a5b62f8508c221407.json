{"ast":null,"code":"import { getBlockTime } from '@colony/colony-js';\nimport { getLogs } from '@colony/colony-js';\nimport * as ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nexport default class PayoudClaimedService {\n  constructor(colonyClient) {\n    this.colonyClient = void 0;\n    this.eventFilter = void 0;\n    this.displayItems = void 0;\n    this.logsService = void 0;\n    this.parsedLogs = void 0;\n    this.colonyClient = colonyClient;\n    this.eventFilter = this.colonyClient.filters.PayoutClaimed();\n    this.parsedLogs = new Array();\n    this.displayItems = new Array();\n  }\n\n  async prepareLogs() {\n    try {\n      const parsedLogs = await this.getParsedLogs();\n      this.displayItems = new Array();\n      const promises = await parsedLogs.map(async singleLog => {\n        return this.getAssoitaedTypeId(singleLog, this.colonyClient).then(assosiatedTypeId => this.colonyClient.getPayment(assosiatedTypeId)).then(result => this.prepareDisplayItem(singleLog, result.recipient)).then(displayInfo => this.displayItems.push(displayInfo));\n      });\n      await Promise.all(promises);\n      return this.displayItems;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getParsedLogs() {\n    const payoutClaimedLogs = await getLogs(this.colonyClient, this.eventFilter);\n    const getLogsPromices = await payoutClaimedLogs.map(async event => {\n      let res = await this.colonyClient.interface.parseLog(event);\n      return await this.setEventDate(res, event);\n    });\n    await Promise.all(getLogsPromices);\n    return this.parsedLogs;\n  }\n\n  async setEventDate(singleLog, unparsedEvent) {\n    const provider = ethers.getDefaultProvider();\n    const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n    let day = \"\";\n    let month = \"\";\n\n    if (timestamp) {\n      const date = new Date(timestamp);\n      day = date.toLocaleString('default', {\n        day: '2-digit'\n      });\n      month = date.toLocaleString('default', {\n        month: 'short'\n      });\n    }\n\n    this.parsedLogs.push({\n      name: singleLog.name,\n      values: {\n        fundingPotId: singleLog.values.fundingPotId,\n        token: singleLog.values.token,\n        amount: singleLog.values.amount\n      },\n      date: `${day} ${month}`,\n      timestamp: timestamp\n    });\n  }\n\n  async getAssoitaedTypeId(singleLog, colonyClient) {\n    const humanReadableFundingPotId = new ethers.utils.BigNumber(singleLog.values.fundingPotId).toString();\n    const {\n      associatedTypeId\n    } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n    return associatedTypeId;\n  }\n\n  async prepareDisplayItem(singleLog, userAddress) {\n    const provider = ethers.getDefaultProvider();\n    const abi = [// Read-Only Functions\n    \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\", // Authenticated Functions\n    \"function transfer(address to, uint amount) returns (bool)\", // Events\n    \"event Transfer(address indexed from, address indexed to, uint amount)\"];\n    const erc20 = new ethers.Contract(singleLog.values.token, abi, provider);\n    const tokenInfo = await erc20.symbol();\n    const humanReadableAmount = new ethers.utils.BigNumber(singleLog.values.amount);\n    const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n    return {\n      description: `User `,\n      date: singleLog.date,\n      timestamp: singleLog.timestamp,\n      boldItem0: userAddress,\n      description0: `  claimed `,\n      boldItem1: `${convertedAmount.toString()}${tokenInfo}`,\n      description1: ` payout from pot `,\n      boldItem2: singleLog.values.fundingPotId,\n      description2: `.`\n    };\n  }\n\n}","map":{"version":3,"names":["getBlockTime","getLogs","ethers","Promise","PayoudClaimedService","constructor","colonyClient","eventFilter","displayItems","logsService","parsedLogs","filters","PayoutClaimed","Array","prepareLogs","getParsedLogs","promises","map","singleLog","getAssoitaedTypeId","then","assosiatedTypeId","getPayment","result","prepareDisplayItem","recipient","displayInfo","push","all","error","console","log","payoutClaimedLogs","getLogsPromices","event","res","interface","parseLog","setEventDate","unparsedEvent","provider","getDefaultProvider","timestamp","blockHash","day","month","date","Date","toLocaleString","name","values","fundingPotId","token","amount","humanReadableFundingPotId","utils","BigNumber","toString","associatedTypeId","getFundingPot","userAddress","abi","erc20","Contract","tokenInfo","symbol","humanReadableAmount","convertedAmount","div","pow","description","boldItem0","description0","boldItem1","description1","boldItem2","description2"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { EventFilter, Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport * as  ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClientFactory from '../clients/ColonyNetworkClientFactory';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem';\nimport { DisplayEventItem } from \"../interfaces/DisplayEventItem\";\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\nimport { EventLogsService } from \"../interfaces/EventLogsService\";\n\n\n\nexport default class PayoudClaimedService implements EventLogsService {\n\n    colonyClient: any;\n    eventFilter: EventFilter;\n    public displayItems: any;\n    public logsService: any;\n    public parsedLogs: PayoutClaimedItem[];\n\n    constructor(colonyClient: any) {\n        this.colonyClient = colonyClient;\n        this.eventFilter = this.colonyClient.filters.PayoutClaimed();\n        this.parsedLogs = new Array<PayoutClaimedItem>();\n        this.displayItems = new Array<DisplayEventItem>();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            const parsedLogs: PayoutClaimedItem[] = await this.getParsedLogs();\n            this.displayItems = new Array<DisplayEventItem>();\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return this.getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(assosiatedTypeId => this.colonyClient.getPayment(assosiatedTypeId))\n                    .then(result => this.prepareDisplayItem(singleLog, result.recipient))\n                    .then(displayInfo => this.displayItems.push(displayInfo));\n            });\n\n\n            await Promise.all(promises);\n            return this.displayItems;\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    async getParsedLogs() {\n\n        const payoutClaimedLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n        const getLogsPromices = await payoutClaimedLogs.map(async (event: any) => {\n            let res: PayoutClaimedItem = await this.colonyClient.interface.parseLog(event);\n            return await this.setEventDate(res, event);\n        });\n\n        await Promise.all(getLogsPromices);\n\n        return this.parsedLogs;\n    }\n\n\n    async setEventDate(singleLog: PayoutClaimedItem, unparsedEvent: any) {\n\n        const provider = ethers.getDefaultProvider();\n        const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n\n        let day = \"\";\n        let month = \"\";\n\n        if (timestamp) {\n            const date = new Date(timestamp);\n            day = date.toLocaleString('default', { day: '2-digit' });\n            month = date.toLocaleString('default', { month: 'short' });\n        }\n        \n\n        this.parsedLogs.push({\n            name: singleLog.name,\n            values: {\n                fundingPotId: singleLog.values.fundingPotId,\n                token: singleLog.values.token,\n                amount: singleLog.values.amount,\n            },\n            date: `${day} ${month}`,\n            timestamp: timestamp\n        })\n    }\n\n    private async getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n        const humanReadableFundingPotId = new ethers.utils.BigNumber(\n            singleLog.values.fundingPotId\n        ).toString();\n\n        const {\n            associatedTypeId,\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n        return associatedTypeId;\n    }\n\n    private async prepareDisplayItem(singleLog: PayoutClaimedItem, userAddress: any) {\n\n        const provider = ethers.getDefaultProvider();\n\n\n        const abi = [\n            // Read-Only Functions\n            \"function balanceOf(address owner) view returns (uint256)\",\n            \"function decimals() view returns (uint8)\",\n            \"function symbol() view returns (string)\",\n\n            // Authenticated Functions\n            \"function transfer(address to, uint amount) returns (bool)\",\n\n            // Events\n            \"event Transfer(address indexed from, address indexed to, uint amount)\"\n        ];\n\n        const erc20 = new ethers.Contract(singleLog.values.token, abi, provider);\n        const tokenInfo = await erc20.symbol();\n\n        const humanReadableAmount = new ethers.utils.BigNumber(singleLog.values.amount);\n\n        const convertedAmount = humanReadableAmount.div(humanReadableAmount.pow(18));\n\n        return {\n            description: `User `,\n            date: singleLog.date,\n            timestamp: singleLog.timestamp,\n            boldItem0: userAddress,\n            description0: `  claimed `,\n            boldItem1: `${convertedAmount.toString()}${tokenInfo}`,\n            description1: ` payout from pot `,\n            boldItem2: singleLog.values.fundingPotId,\n            description2: `.`\n        };\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}