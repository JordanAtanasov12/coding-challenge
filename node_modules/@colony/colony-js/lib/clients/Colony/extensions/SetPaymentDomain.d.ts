import { BigNumber, BigNumberish } from 'ethers/utils';
import { ContractTransaction } from 'ethers';
import { TransactionOverrides } from '../../../contracts/1';
import { IColony as IColonyV1 } from '../../../contracts/1/IColony';
import { IColony as IColonyV2 } from '../../../contracts/2/IColony';
import { IColony as IColonyV3 } from '../../../contracts/3/IColony';
import { ExtendedIColony } from './commonExtensions';
declare type ValidColony = IColonyV1 | IColonyV2 | IColonyV3;
export interface SetPaymentDomainEstimate {
    setPaymentDomainWithProofs(_id: BigNumberish, _domainId: BigNumberish): Promise<BigNumber>;
}
export declare type SetPaymentDomainExtensions<T extends ValidColony> = {
    setPaymentDomainWithProofs(_id: BigNumberish, _domainId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    estimate: T['estimate'] & SetPaymentDomainEstimate;
};
export declare function setPaymentDomainWithProofs(this: ExtendedIColony<ValidColony> & SetPaymentDomainExtensions<ValidColony>, _id: BigNumberish, _domainId: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;
export declare function estimateSetPaymentDomainWithProofs(this: ExtendedIColony<ValidColony> & SetPaymentDomainExtensions<ValidColony>, _id: BigNumberish, _domainId: BigNumberish): Promise<BigNumber>;
export {};
