import { ContractTransaction } from 'ethers';
import { Arrayish, BigNumber, BigNumberish } from 'ethers/utils';
import { ClientType, ColonyRole } from '../../../constants';
import { IColony as IColonyV1 } from '../../../contracts/1/IColony';
import { IColony as IColonyV2 } from '../../../contracts/2/IColony';
import { IColony as IColonyV3 } from '../../../contracts/3/IColony';
import { IColony as IColonyV4 } from '../../../contracts/4/IColony';
import { TransactionOverrides } from '../../../contracts/1';
import { ColonyNetworkClient } from '../../ColonyNetworkClient';
import { TokenClient } from '../../TokenClient';
import { OneTxPaymentClient } from '../../OneTxPaymentClient';
import type { ReputationOracleResponse } from '../types';
declare type AnyIColony = IColonyV1 | IColonyV2 | IColonyV3 | IColonyV4;
export declare type ExtendedEstimate<T extends AnyIColony = AnyIColony> = T['estimate'] & {
    deployTokenAuthority(tokenAddress: string, allowedToTransfer: string[]): Promise<BigNumber>;
    setArchitectureRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
    setFundingRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
    setAdministrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean): Promise<BigNumber>;
    addDomainWithProofs(_parentDomainId: BigNumberish): Promise<BigNumber>;
    addPaymentWithProofs(_recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
    finalizePaymentWithProofs(_id: BigNumberish, overrides?: TransactionOverrides): Promise<BigNumber>;
    setPaymentRecipientWithProofs(_id: BigNumberish, _recipient: string): Promise<BigNumber>;
    setPaymentSkillWithProofs(_id: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
    setPaymentPayoutWithProofs(_id: BigNumberish, _token: BigNumberish, _amount: BigNumberish): Promise<BigNumber>;
    makeTaskWithProofs(_specificationHash: Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish): Promise<BigNumber>;
    moveFundsBetweenPotsWithProofs(_fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string): Promise<BigNumber>;
};
export declare type ExtendedIColony<T extends AnyIColony = AnyIColony> = T & {
    clientType: ClientType.ColonyClient;
    networkClient: ColonyNetworkClient;
    oneTxPaymentClient?: OneTxPaymentClient;
    tokenClient: TokenClient;
    awkwardRecoveryRoleEventClient: IColonyV4;
    deployTokenAuthority(tokenAddress: string, allowedToTransfer: string[]): Promise<ContractTransaction>;
    setArchitectureRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setFundingRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setAdministrationRoleWithProofs(_user: string, _domainId: BigNumberish, _setTo: boolean, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    addDomainWithProofs(_parentDomainId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    addPaymentWithProofs(_recipient: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    finalizePaymentWithProofs(_id: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setPaymentRecipientWithProofs(_id: BigNumberish, _recipient: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setPaymentSkillWithProofs(_id: BigNumberish, _skillId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    setPaymentPayoutWithProofs(_id: BigNumberish, _token: BigNumberish, _amount: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    makeTaskWithProofs(_specificationHash: Arrayish, _domainId: BigNumberish, _skillId: BigNumberish, _dueDate: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    moveFundsBetweenPotsWithProofs(_fromPot: BigNumberish, _toPot: BigNumberish, _amount: BigNumberish, _token: string, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    estimate: ExtendedEstimate<T>;
    getReputation(skillId: BigNumberish, address: string): Promise<ReputationOracleResponse>;
};
export declare const getPotDomain: (contract: ExtendedIColony<AnyIColony>, potId: BigNumberish) => Promise<BigNumberish>;
export declare const getChildIndex: (contract: ExtendedIColony<AnyIColony>, parentDomainId: BigNumberish, domainId: BigNumberish) => Promise<BigNumber>;
export declare const getPermissionProofs: (contract: ExtendedIColony<AnyIColony>, domainId: BigNumberish, role: ColonyRole, customAddress?: string | undefined) => Promise<[BigNumber, BigNumber]>;
export declare const getMoveFundsPermissionProofs: (contract: ExtendedIColony<AnyIColony>, fromtPotId: BigNumberish, toPotId: BigNumberish, customAddress?: string | undefined) => Promise<[BigNumber, BigNumber, BigNumber]>;
export declare const addExtensions: <T extends ExtendedIColony<AnyIColony>>(instance: T, networkClient: ColonyNetworkClient) => T;
export {};
