{"ast":null,"code":"import { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null)); //=============================================\n\n      const Web3 = require('web3');\n\n      const ERC20Contract = require('erc20-contract-js');\n\n      const web3 = new Web3(new Web3.providers.HttpProvider('https://mainnet.infura.io'));\n      const walletAddr = '0x8d12a197cb00d4747a1fe03395095ce2a5cc6819',\n            // EtherDelta contract address\n      contractAddr = '0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0'; // EOS contract address\n      // Create new instance of ERC20Contract\n\n      const erc20Contract = new ERC20Contract(web3, contractAddr); // Get balance of\n\n      erc20Contract.balanceOf(walletAddr).call().then(balance => console.log(`Balance: ${balance}`)); //=============================================\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(r => Object.assign({}, singleLog, {\n          userAddress: r.recipient\n        }));\n      });\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["utils","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","Web3","require","ERC20Contract","web3","providers","HttpProvider","walletAddr","contractAddr","erc20Contract","balanceOf","call","then","balance","console","log","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","promises","map","getPayment","r","Object","assign","userAddress","recipient","preparedLogs","all","error"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n            //=============================================\n\n            const Web3 = require('web3');\n            const ERC20Contract = require('erc20-contract-js');\n\n            const web3 = new Web3(\n                new Web3.providers.HttpProvider('https://mainnet.infura.io')\n            );\n            \n            const walletAddr = '0x8d12a197cb00d4747a1fe03395095ce2a5cc6819', // EtherDelta contract address\n                contractAddr = '0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0'; // EOS contract address\n            \n            // Create new instance of ERC20Contract\n            const erc20Contract = new ERC20Contract(web3, contractAddr);\n            \n            // Get balance of\n            erc20Contract.balanceOf(walletAddr).call()\n                .then(balance => console.log(`Balance: ${balance}`));\n            //=============================================\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n            });\n\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAOA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIP,WAAJ,EAApB;MAEA,MAAMQ,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C,CANA,CAQA;;MAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;MACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;MAEA,MAAME,IAAI,GAAG,IAAIH,IAAJ,CACT,IAAIA,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgC,2BAAhC,CADS,CAAb;MAIA,MAAMC,UAAU,GAAG,4CAAnB;MAAA,MAAiE;MAC7DC,YAAY,GAAG,4CADnB,CAjBA,CAkBiE;MAEjE;;MACA,MAAMC,aAAa,GAAG,IAAIN,aAAJ,CAAkBC,IAAlB,EAAwBI,YAAxB,CAAtB,CArBA,CAuBA;;MACAC,aAAa,CAACC,SAAd,CAAwBH,UAAxB,EAAoCI,IAApC,GACKC,IADL,CACUC,OAAO,IAAIC,OAAO,CAACC,GAAR,CAAa,YAAWF,OAAQ,EAAhC,CADrB,EAxBA,CA0BA;;MAEA,eAAeG,kBAAf,CAAkCC,SAAlC,EAAgEzB,YAAhE,EAAmF;QAC/E,MAAM0B,yBAAyB,GAAG,IAAIhC,KAAK,CAACiC,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAM/B,YAAY,CAACgC,aAAb,CAA2BN,yBAA3B,CAFV;QAIA,OAAOK,gBAAP;MACH;;MAGD,MAAME,QAAQ,GAAG,MAAM5B,UAAU,CAAC6B,GAAX,CAAe,MAAOT,SAAP,IAAqB;QACvD,OAAOD,kBAAkB,CAACC,SAAD,EAAY,KAAKzB,YAAjB,CAAlB,CACFoB,IADE,CACG,KAAKpB,YAAL,CAAkBmC,UADrB,EAEFf,IAFE,CAEGgB,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,SAAlB,EAA6B;UAAEc,WAAW,EAAEH,CAAC,CAACI;QAAjB,CAA7B,CAFR,CAAP;MAGH,CAJsB,CAAvB;MAMA,MAAMC,YAAY,GAAG,MAAM9C,OAAO,CAAC+C,GAAR,CAAYT,QAAZ,CAA3B;MACA,OAAOQ,YAAP;IACH,CAjDD,CAiDE,OAAOE,KAAP,EAAc;MACZrB,OAAO,CAACC,GAAR,CAAYoB,KAAZ;IACH;EACJ;;AA/DqC"},"metadata":{},"sourceType":"module"}