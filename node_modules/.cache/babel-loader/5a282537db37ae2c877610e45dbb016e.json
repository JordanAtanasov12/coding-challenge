{"ast":null,"code":"import { getBlockTime } from '@colony/colony-js';\nimport { getLogs } from '@colony/colony-js';\nimport * as ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nexport default class DomainAddedService {\n  constructor(colonyClient) {\n    this.colonyClient = void 0;\n    this.eventFilter = void 0;\n    this.displayItems = void 0;\n    this.logsService = void 0;\n    this.parsedLogs = void 0;\n    this.colonyClient = colonyClient;\n    this.eventFilter = this.colonyClient.filters.DomainAdded();\n    this.parsedLogs = new Array();\n  }\n\n  async prepareLogs() {\n    try {\n      const parsedLogs = await this.getParsedLogs();\n      this.displayItems = new Array();\n      parsedLogs.forEach(singleLog => {\n        this.prepareDisplayItem(singleLog);\n      });\n      return this.displayItems;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getParsedLogs() {\n    const domainAddedLogs = await getLogs(this.colonyClient, this.eventFilter);\n    const getLogsPromices = await domainAddedLogs.map(async event => {\n      let res = await this.colonyClient.interface.parseLog(event);\n      return await this.setEventDate(res, event);\n    });\n    await Promise.all(getLogsPromices);\n    return this.parsedLogs;\n  }\n\n  async setEventDate(singleLog, unparsedEvent) {\n    const provider = ethers.getDefaultProvider();\n    const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n    this.parsedLogs.push({\n      name: singleLog.name,\n      values: {\n        domainId: singleLog.values.domainId,\n        user: singleLog.values.user\n      },\n      date: new Date(timestamp),\n      timestamp: timestamp\n    });\n  }\n\n  async prepareDisplayItem(singleLog) {\n    const domainId = new ethers.utils.BigNumber(singleLog.values.domainId).toString();\n    this.displayItems.push({\n      description: `Domain ${domainId} added.`,\n      date: singleLog.date,\n      timestamp: singleLog.timestamp,\n      avatarSeed: singleLog.values.user\n    });\n  }\n\n}","map":{"version":3,"names":["getBlockTime","getLogs","ethers","Promise","DomainAddedService","constructor","colonyClient","eventFilter","displayItems","logsService","parsedLogs","filters","DomainAdded","Array","prepareLogs","getParsedLogs","forEach","singleLog","prepareDisplayItem","error","console","log","domainAddedLogs","getLogsPromices","map","event","res","interface","parseLog","setEventDate","all","unparsedEvent","provider","getDefaultProvider","timestamp","blockHash","push","name","values","domainId","user","date","Date","utils","BigNumber","toString","description","avatarSeed"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/services/DomainAddedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getBlockTime, ColonyRole } from '@colony/colony-js';\nimport { EventFilter, Wallet } from 'ethers';\nimport { getLogs } from '@colony/colony-js';\nimport * as  ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport { DomainAddedItem } from \"../interfaces/DomainAddedItem\";\nimport { DisplayEventItem } from \"../interfaces/DisplayEventItem\";\nimport { EventLogsService } from \"../interfaces/EventLogsService\";\n\n\n\nexport default class DomainAddedService implements EventLogsService {\n\n    colonyClient: any;\n    eventFilter: EventFilter;\n    public displayItems: any;\n    public logsService: any;\n    public parsedLogs: DomainAddedItem[];\n\n    constructor(colonyClient: any) {\n        this.colonyClient = colonyClient;\n        this.eventFilter = this.colonyClient.filters.DomainAdded();\n        this.parsedLogs = new Array<DomainAddedItem>();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            const parsedLogs: DomainAddedItem[] = await this.getParsedLogs();\n            this.displayItems = new Array<DisplayEventItem>();\n\n            parsedLogs.forEach(singleLog => {\n                this.prepareDisplayItem(singleLog);\n            })\n\n            return this.displayItems;\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    async getParsedLogs() {\n\n        const domainAddedLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n        const getLogsPromices = await domainAddedLogs.map(async (event: any) => {\n            let res: DomainAddedItem = await this.colonyClient.interface.parseLog(event);\n            return await this.setEventDate(res, event);\n        });\n\n        await Promise.all(getLogsPromices);\n\n        return this.parsedLogs;\n    }\n\n\n    async setEventDate(singleLog: DomainAddedItem, unparsedEvent: any) {\n\n        const provider = ethers.getDefaultProvider();\n        const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n\n        this.parsedLogs.push({\n            name: singleLog.name,\n            values: {\n                domainId: singleLog.values.domainId,\n                user: singleLog.values.user,\n            },\n            date: new Date(timestamp),\n            timestamp: timestamp,\n\n        })\n    }\n\n    private async prepareDisplayItem(singleLog: DomainAddedItem) {\n\n        const domainId = new ethers.utils.BigNumber(\n            singleLog.values.domainId\n        ).toString();\n\n        this.displayItems.push({\n            description: `Domain ${domainId} added.`,\n            date: singleLog.date,\n            timestamp: singleLog.timestamp,\n            avatarSeed: singleLog.values.user\n        });\n    }\n\n}\n"],"mappings":"AACA,SAASA,YAAT,QAAyC,mBAAzC;AAEA,SAASC,OAAT,QAAwB,mBAAxB;AACA,OAAO,KAAMC,MAAb,MAAyB,QAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAOA,eAAe,MAAMC,kBAAN,CAAqD;EAQhEC,WAAW,CAACC,YAAD,EAAoB;IAAA,KAN/BA,YAM+B;IAAA,KAL/BC,WAK+B;IAAA,KAJxBC,YAIwB;IAAA,KAHxBC,WAGwB;IAAA,KAFxBC,UAEwB;IAC3B,KAAKJ,YAAL,GAAoBA,YAApB;IACA,KAAKC,WAAL,GAAmB,KAAKD,YAAL,CAAkBK,OAAlB,CAA0BC,WAA1B,EAAnB;IACA,KAAKF,UAAL,GAAkB,IAAIG,KAAJ,EAAlB;EACH;;EAEuB,MAAXC,WAAW,GAAG;IAEvB,IAAI;MAEA,MAAMJ,UAA6B,GAAG,MAAM,KAAKK,aAAL,EAA5C;MACA,KAAKP,YAAL,GAAoB,IAAIK,KAAJ,EAApB;MAEAH,UAAU,CAACM,OAAX,CAAmBC,SAAS,IAAI;QAC5B,KAAKC,kBAAL,CAAwBD,SAAxB;MACH,CAFD;MAIA,OAAO,KAAKT,YAAZ;IAEH,CAXD,CAWE,OAAOW,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;EAEkB,MAAbJ,aAAa,GAAG;IAElB,MAAMO,eAAoB,GAAG,MAAMrB,OAAO,CAAC,KAAKK,YAAN,EAAoB,KAAKC,WAAzB,CAA1C;IACA,MAAMgB,eAAe,GAAG,MAAMD,eAAe,CAACE,GAAhB,CAAoB,MAAOC,KAAP,IAAsB;MACpE,IAAIC,GAAoB,GAAG,MAAM,KAAKpB,YAAL,CAAkBqB,SAAlB,CAA4BC,QAA5B,CAAqCH,KAArC,CAAjC;MACA,OAAO,MAAM,KAAKI,YAAL,CAAkBH,GAAlB,EAAuBD,KAAvB,CAAb;IACH,CAH6B,CAA9B;IAKA,MAAMtB,OAAO,CAAC2B,GAAR,CAAYP,eAAZ,CAAN;IAEA,OAAO,KAAKb,UAAZ;EACH;;EAGiB,MAAZmB,YAAY,CAACZ,SAAD,EAA6Bc,aAA7B,EAAiD;IAE/D,MAAMC,QAAQ,GAAG9B,MAAM,CAAC+B,kBAAP,EAAjB;IACA,MAAMC,SAAS,GAAG,MAAMlC,YAAY,CAACgC,QAAD,EAAWD,aAAa,CAACI,SAAzB,CAApC;IAEA,KAAKzB,UAAL,CAAgB0B,IAAhB,CAAqB;MACjBC,IAAI,EAAEpB,SAAS,CAACoB,IADC;MAEjBC,MAAM,EAAE;QACJC,QAAQ,EAAEtB,SAAS,CAACqB,MAAV,CAAiBC,QADvB;QAEJC,IAAI,EAAEvB,SAAS,CAACqB,MAAV,CAAiBE;MAFnB,CAFS;MAMjBC,IAAI,EAAE,IAAIC,IAAJ,CAASR,SAAT,CANW;MAOjBA,SAAS,EAAEA;IAPM,CAArB;EAUH;;EAE+B,MAAlBhB,kBAAkB,CAACD,SAAD,EAA6B;IAEzD,MAAMsB,QAAQ,GAAG,IAAIrC,MAAM,CAACyC,KAAP,CAAaC,SAAjB,CACb3B,SAAS,CAACqB,MAAV,CAAiBC,QADJ,EAEfM,QAFe,EAAjB;IAIA,KAAKrC,YAAL,CAAkB4B,IAAlB,CAAuB;MACnBU,WAAW,EAAG,UAASP,QAAS,SADb;MAEnBE,IAAI,EAAExB,SAAS,CAACwB,IAFG;MAGnBP,SAAS,EAAEjB,SAAS,CAACiB,SAHF;MAInBa,UAAU,EAAE9B,SAAS,CAACqB,MAAV,CAAiBE;IAJV,CAAvB;EAMH;;AA3E+D"},"metadata":{},"sourceType":"module"}