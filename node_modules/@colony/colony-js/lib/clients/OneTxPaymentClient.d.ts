import { ContractTransaction } from 'ethers';
import { BigNumberish, BigNumber } from 'ethers/utils';
import { ClientType } from '../constants';
import { OneTxPayment } from '../contracts/4/OneTxPayment';
import { TransactionOverrides } from '../contracts/4';
import { ColonyClient } from '../index';
declare type OneTxPaymentEstimate = OneTxPayment['estimate'];
interface ExtendedEstimate extends OneTxPaymentEstimate {
    makePaymentWithProofs(_worker: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
    makePaymentFundedFromDomainWithProofs(_worker: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish): Promise<BigNumber>;
}
export interface OneTxPaymentClient extends OneTxPayment {
    clientType: ClientType.OneTxPaymentClient;
    estimate: ExtendedEstimate;
    makePaymentWithProofs(_worker: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
    makePaymentFundedFromDomainWithProofs(_worker: string, _token: string, _amount: BigNumberish, _domainId: BigNumberish, _skillId: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;
}
declare const getOneTxPaymentClient: (address: string, colonyClient: ColonyClient) => OneTxPaymentClient;
export default getOneTxPaymentClient;
