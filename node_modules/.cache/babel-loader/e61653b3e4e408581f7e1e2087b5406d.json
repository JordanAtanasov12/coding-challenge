{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { BigNumber, ethers } from 'ethers';\nimport { defaultAbiCoder } from 'ethers/lib/utils';\nimport { ExecutionType, Networks } from './enums';\nimport { Utils } from './utils';\n\nvar Multicall =\n/** @class */\nfunction () {\n  function Multicall(_options) {\n    this._options = _options;\n    this.ABI = [{\n      constant: false,\n      inputs: [{\n        components: [{\n          name: 'target',\n          type: 'address'\n        }, {\n          name: 'callData',\n          type: 'bytes'\n        }],\n        name: 'calls',\n        type: 'tuple[]'\n      }],\n      name: 'aggregate',\n      outputs: [{\n        name: 'blockNumber',\n        type: 'uint256'\n      }, {\n        name: 'returnData',\n        type: 'bytes[]'\n      }],\n      payable: false,\n      stateMutability: 'nonpayable',\n      type: 'function'\n    }, {\n      inputs: [{\n        internalType: 'bool',\n        name: 'requireSuccess',\n        type: 'bool'\n      }, {\n        components: [{\n          internalType: 'address',\n          name: 'target',\n          type: 'address'\n        }, {\n          internalType: 'bytes',\n          name: 'callData',\n          type: 'bytes'\n        }],\n        internalType: 'struct Multicall2.Call[]',\n        name: 'calls',\n        type: 'tuple[]'\n      }],\n      name: 'tryBlockAndAggregate',\n      outputs: [{\n        internalType: 'uint256',\n        name: 'blockNumber',\n        type: 'uint256'\n      }, {\n        internalType: 'bytes32',\n        name: 'blockHash',\n        type: 'bytes32'\n      }, {\n        components: [{\n          internalType: 'bool',\n          name: 'success',\n          type: 'bool'\n        }, {\n          internalType: 'bytes',\n          name: 'returnData',\n          type: 'bytes'\n        }],\n        internalType: 'struct Multicall2.Result[]',\n        name: 'returnData',\n        type: 'tuple[]'\n      }],\n      stateMutability: 'nonpayable',\n      type: 'function'\n    }];\n\n    if (this._options.web3Instance) {\n      this._executionType = ExecutionType.web3;\n      return;\n    }\n\n    if (this._options.ethersProvider) {\n      this._executionType = ExecutionType.ethers;\n      return;\n    }\n\n    if (this._options.nodeUrl) {\n      this._executionType = ExecutionType.customHttp;\n      return;\n    }\n\n    throw new Error( // tslint:disable-next-line: max-line-length\n    'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\n  }\n  /**\n   * Call all the contract calls in 1\n   * @param calls The calls\n   */\n\n\n  Multicall.prototype.call = function (contractCallContexts, contractCallOptions) {\n    if (contractCallOptions === void 0) {\n      contractCallOptions = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!Array.isArray(contractCallContexts)) {\n              contractCallContexts = [contractCallContexts];\n            }\n\n            return [4\n            /*yield*/\n            , this.execute(this.buildAggregateCallContext(contractCallContexts), contractCallOptions)];\n\n          case 1:\n            aggregateResponse = _a.sent();\n            returnObject = {\n              results: {},\n              blockNumber: aggregateResponse.blockNumber\n            };\n\n            for (response = 0; response < aggregateResponse.results.length; response++) {\n              contractCallsResults = aggregateResponse.results[response];\n              originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\n              returnObjectResult = {\n                originalContractCallContext: Utils.deepClone(originalContractCallContext),\n                callsReturnContext: []\n              };\n\n              for (method = 0; method < contractCallsResults.methodResults.length; method++) {\n                methodContext = contractCallsResults.methodResults[method];\n                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\n                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\n\n                if (this._options.tryAggregate && !methodContext.result.success) {\n                  returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                    returnValues: [],\n                    decoded: false,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters,\n                    success: false\n                  }));\n                  continue;\n                }\n\n                if (outputTypes && outputTypes.length > 0) {\n                  try {\n                    decodedReturnValues = defaultAbiCoder.decode( // tslint:disable-next-line: no-any\n                    outputTypes, this.getReturnDataFromResult(methodContext.result));\n                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                      returnValues: this.formatReturnValues(decodedReturnValues),\n                      decoded: true,\n                      reference: originalContractCallMethodContext.reference,\n                      methodName: originalContractCallMethodContext.methodName,\n                      methodParameters: originalContractCallMethodContext.methodParameters,\n                      success: true\n                    }));\n                  } catch (e) {\n                    if (!this._options.tryAggregate) {\n                      throw e;\n                    }\n\n                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                      returnValues: [],\n                      decoded: false,\n                      reference: originalContractCallMethodContext.reference,\n                      methodName: originalContractCallMethodContext.methodName,\n                      methodParameters: originalContractCallMethodContext.methodParameters,\n                      success: false\n                    }));\n                  }\n                } else {\n                  returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                    returnValues: this.getReturnDataFromResult(methodContext.result),\n                    decoded: false,\n                    reference: originalContractCallMethodContext.reference,\n                    methodName: originalContractCallMethodContext.methodName,\n                    methodParameters: originalContractCallMethodContext.methodParameters,\n                    success: true\n                  }));\n                }\n              }\n\n              returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\n            }\n\n            return [2\n            /*return*/\n            , returnObject];\n        }\n      });\n    });\n  };\n  /**\n   * Get return data from result\n   * @param result The result\n   */\n  // tslint:disable-next-line: no-any\n\n\n  Multicall.prototype.getReturnDataFromResult = function (result) {\n    if (this._options.tryAggregate) {\n      return result.returnData;\n    }\n\n    return result;\n  };\n  /**\n   * Format return values so its always an array\n   * @param decodedReturnValues The decoded return values\n   */\n  // tslint:disable-next-line: no-any\n\n\n  Multicall.prototype.formatReturnValues = function (decodedReturnValues) {\n    var decodedReturnResults = decodedReturnValues;\n\n    if (decodedReturnValues.length === 1) {\n      decodedReturnResults = decodedReturnValues[0];\n    }\n\n    if (Array.isArray(decodedReturnResults)) {\n      return decodedReturnResults;\n    }\n\n    return [decodedReturnResults];\n  };\n  /**\n   * Build aggregate call context\n   * @param contractCallContexts The contract call contexts\n   */\n\n\n  Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\n    var aggregateCallContext = [];\n\n    for (var contract = 0; contract < contractCallContexts.length; contract++) {\n      var contractContext = contractCallContexts[contract];\n      var executingInterface = new ethers.utils.Interface(JSON.stringify(contractContext.abi));\n\n      for (var method = 0; method < contractContext.calls.length; method++) {\n        // https://github.com/ethers-io/ethers.js/issues/211\n        var methodContext = contractContext.calls[method]; // tslint:disable-next-line: no-unused-expression\n\n        var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\n        aggregateCallContext.push({\n          contractContextIndex: Utils.deepClone(contract),\n          contractMethodIndex: Utils.deepClone(method),\n          target: contractContext.contractAddress,\n          encodedData: encodedData\n        });\n      }\n    }\n\n    return aggregateCallContext;\n  };\n  /**\n   * Find output types from abi\n   * @param abi The abi\n   * @param methodName The method name\n   */\n\n\n  Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\n    var _a;\n\n    var contract = new ethers.Contract(ethers.constants.AddressZero, abi);\n    methodName = methodName.trim();\n\n    if (contract.interface.functions[methodName]) {\n      return contract.interface.functions[methodName].outputs;\n    }\n\n    for (var i = 0; i < abi.length; i++) {\n      if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName) {\n        return abi[i].outputs;\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * Execute the multicall contract call\n   * @param calls The calls\n   */\n\n\n  Multicall.prototype.execute = function (calls, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._executionType;\n\n            switch (_a) {\n              case ExecutionType.web3:\n                return [3\n                /*break*/\n                , 1];\n\n              case ExecutionType.ethers:\n                return [3\n                /*break*/\n                , 3];\n\n              case ExecutionType.customHttp:\n                return [3\n                /*break*/\n                , 3];\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.executeWithWeb3(calls, options)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.executeWithEthersOrCustom(calls, options)];\n\n          case 4:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 5:\n            throw new Error(this._executionType + \" is not defined\");\n        }\n      });\n    });\n  };\n  /**\n   * Execute aggregate with web3 instance\n   * @param calls The calls context\n   */\n\n\n  Multicall.prototype.executeWithWeb3 = function (calls, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var web3, networkId, contract, callParams, contractResponse, contractResponse;\n\n      var _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            web3 = this.getTypedOptions().web3Instance;\n            return [4\n            /*yield*/\n            , web3.eth.net.getId()];\n\n          case 1:\n            networkId = _c.sent();\n            contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\n            callParams = [];\n\n            if (options.blockNumber) {\n              callParams.push(options.blockNumber);\n            }\n\n            if (!this._options.tryAggregate) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , (_a = contract.methods.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls))).call.apply(_a, callParams)];\n\n          case 2:\n            contractResponse = _c.sent();\n            contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , (_b = contract.methods.aggregate(this.mapCallContextToMatchContractFormat(calls))).call.apply(_b, callParams)];\n\n          case 4:\n            contractResponse = _c.sent();\n            contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n        }\n      });\n    });\n  };\n  /**\n   * Execute with ethers using passed in provider context or custom one\n   * @param calls The calls\n   */\n\n\n  Multicall.prototype.executeWithEthersOrCustom = function (calls, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ethersProvider, customProvider, network, contract, overrideOptions, contractResponse, contractResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ethersProvider = this.getTypedOptions().ethersProvider;\n\n            if (!ethersProvider) {\n              customProvider = this.getTypedOptions();\n\n              if (customProvider.nodeUrl) {\n                ethersProvider = new ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\n              } else {\n                ethersProvider = ethers.getDefaultProvider();\n              }\n            }\n\n            return [4\n            /*yield*/\n            , ethersProvider.getNetwork()];\n\n          case 1:\n            network = _a.sent();\n            contract = new ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\n            overrideOptions = {};\n\n            if (options.blockNumber) {\n              overrideOptions = __assign(__assign({}, overrideOptions), {\n                blockTag: Number(options.blockNumber)\n              });\n            }\n\n            if (!this._options.tryAggregate) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n\n          case 2:\n            contractResponse = _a.sent();\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n\n          case 4:\n            contractResponse = _a.sent();\n            return [2\n            /*return*/\n            , this.buildUpAggregateResponse(contractResponse, calls)];\n        }\n      });\n    });\n  };\n  /**\n   * Build up the aggregated response from the contract response mapping\n   * metadata from the calls\n   * @param contractResponse The contract response\n   * @param calls The calls\n   */\n\n\n  Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\n    var aggregateResponse = {\n      blockNumber: contractResponse.blockNumber.toNumber(),\n      results: []\n    };\n\n    var _loop_1 = function (i) {\n      var existingResponse = aggregateResponse.results.find(function (c) {\n        return c.contractContextIndex === calls[i].contractContextIndex;\n      });\n\n      if (existingResponse) {\n        existingResponse.methodResults.push({\n          result: contractResponse.returnData[i],\n          contractMethodIndex: calls[i].contractMethodIndex\n        });\n      } else {\n        aggregateResponse.results.push({\n          methodResults: [{\n            result: contractResponse.returnData[i],\n            contractMethodIndex: calls[i].contractMethodIndex\n          }],\n          contractContextIndex: calls[i].contractContextIndex\n        });\n      }\n    };\n\n    for (var i = 0; i < contractResponse.returnData.length; i++) {\n      _loop_1(i);\n    }\n\n    return aggregateResponse;\n  };\n  /**\n   * Map call contract to match contract format\n   * @param calls The calls context\n   */\n\n\n  Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\n    return calls.map(function (call) {\n      return {\n        target: call.target,\n        callData: call.encodedData\n      };\n    });\n  };\n  /**\n   * Get typed options\n   */\n\n\n  Multicall.prototype.getTypedOptions = function () {\n    return this._options;\n  };\n  /**\n   * Get the contract based on the network\n   * @param tryAggregate The tryAggregate\n   * @param network The network\n   */\n\n\n  Multicall.prototype.getContractBasedOnNetwork = function (network) {\n    // if they have overriden the multicall custom contract address then use that\n    if (this._options.multicallCustomContractAddress) {\n      return this._options.multicallCustomContractAddress;\n    }\n\n    switch (network) {\n      case Networks.mainnet:\n      case Networks.kovan:\n      case Networks.rinkeby:\n      case Networks.ropsten:\n      case Networks.goerli:\n        return '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';\n\n      case Networks.bsc:\n        return '0xC50F4c1E81c873B2204D7eFf7069Ffec6Fbe136D';\n\n      case Networks.bsc_testnet:\n        return '0x6e5BB1a5Ad6F68A8D7D6A5e47750eC15773d6042';\n\n      case Networks.xdai:\n        return '0x2325b72990D81892E0e09cdE5C80DD221F147F8B';\n\n      case Networks.mumbai:\n        return '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631';\n\n      case Networks.matic:\n        return '0x275617327c958bD06b5D6b871E7f491D76113dd8';\n\n      case Networks.etherlite:\n        return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';\n\n      case Networks.arbitrum:\n        return '0x80C7DD17B01855a6D2347444a0FCC36136a314de';\n\n      case Networks.avalancheFuji:\n        return '0x3D015943d2780fE97FE3f69C97edA2CCC094f78c';\n\n      case Networks.avalancheMainnet:\n        return '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4';\n\n      case Networks.fantom:\n        return '0xD98e3dBE5950Ca8Ce5a4b59630a5652110403E5c';\n\n      case Networks.cronos:\n        return '0x5e954f5972EC6BFc7dECd75779F10d848230345F';\n\n      case Networks.harmony:\n        return '0x5c41f6817feeb65d7b2178b0b9cebfc8fad97969';\n\n      case Networks.optimism:\n        return '0xeAa6877139d436Dc6d1f75F3aF15B74662617B2C';\n\n      case Networks.kovanOptimism:\n        return '0x91c88479F21203444D2B20Aa001f951EC8CF2F68';\n\n      default:\n        throw new Error(\"Network - \" + network + \" doesn't have a multicall contract address defined. Please check your network or deploy your own contract on it.\");\n    }\n  };\n\n  return Multicall;\n}();\n\nexport { Multicall };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","BigNumber","ethers","defaultAbiCoder","ExecutionType","Networks","Utils","Multicall","_options","ABI","constant","inputs","components","name","type","outputs","payable","stateMutability","internalType","web3Instance","_executionType","web3","ethersProvider","nodeUrl","customHttp","Error","contractCallContexts","contractCallOptions","aggregateResponse","returnObject","response","contractCallsResults","originalContractCallContext","returnObjectResult","method","methodContext","originalContractCallMethodContext","outputTypes","decodedReturnValues","_a","Array","isArray","execute","buildAggregateCallContext","results","blockNumber","contractContextIndex","deepClone","callsReturnContext","methodResults","calls","contractMethodIndex","findOutputTypesFromAbi","abi","methodName","tryAggregate","success","returnValues","decoded","reference","methodParameters","decode","getReturnDataFromResult","formatReturnValues","returnData","decodedReturnResults","aggregateCallContext","contract","contractContext","executingInterface","utils","Interface","JSON","stringify","encodedData","encodeFunctionData","target","contractAddress","Contract","constants","AddressZero","trim","interface","functions","undefined","options","_b","executeWithWeb3","executeWithEthersOrCustom","networkId","callParams","contractResponse","_c","getTypedOptions","eth","net","getId","getContractBasedOnNetwork","methods","tryBlockAndAggregate","mapCallContextToMatchContractFormat","from","buildUpAggregateResponse","aggregate","customProvider","network","overrideOptions","providers","JsonRpcProvider","getDefaultProvider","getNetwork","chainId","blockTag","Number","callStatic","toNumber","_loop_1","existingResponse","find","c","map","callData","multicallCustomContractAddress","mainnet","kovan","rinkeby","ropsten","goerli","bsc","bsc_testnet","xdai","mumbai","matic","etherlite","arbitrum","avalancheFuji","avalancheMainnet","fantom","cronos","harmony","optimism","kovanOptimism"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/node_modules/ethereum-multicall/dist/esm/multicall.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { BigNumber, ethers } from 'ethers';\nimport { defaultAbiCoder } from 'ethers/lib/utils';\nimport { ExecutionType, Networks } from './enums';\nimport { Utils } from './utils';\nvar Multicall = /** @class */ (function () {\n    function Multicall(_options) {\n        this._options = _options;\n        this.ABI = [\n            {\n                constant: false,\n                inputs: [\n                    {\n                        components: [\n                            { name: 'target', type: 'address' },\n                            { name: 'callData', type: 'bytes' },\n                        ],\n                        name: 'calls',\n                        type: 'tuple[]',\n                    },\n                ],\n                name: 'aggregate',\n                outputs: [\n                    { name: 'blockNumber', type: 'uint256' },\n                    { name: 'returnData', type: 'bytes[]' },\n                ],\n                payable: false,\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n            {\n                inputs: [\n                    {\n                        internalType: 'bool',\n                        name: 'requireSuccess',\n                        type: 'bool',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'address',\n                                name: 'target',\n                                type: 'address',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'callData',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct Multicall2.Call[]',\n                        name: 'calls',\n                        type: 'tuple[]',\n                    },\n                ],\n                name: 'tryBlockAndAggregate',\n                outputs: [\n                    {\n                        internalType: 'uint256',\n                        name: 'blockNumber',\n                        type: 'uint256',\n                    },\n                    {\n                        internalType: 'bytes32',\n                        name: 'blockHash',\n                        type: 'bytes32',\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: 'bool',\n                                name: 'success',\n                                type: 'bool',\n                            },\n                            {\n                                internalType: 'bytes',\n                                name: 'returnData',\n                                type: 'bytes',\n                            },\n                        ],\n                        internalType: 'struct Multicall2.Result[]',\n                        name: 'returnData',\n                        type: 'tuple[]',\n                    },\n                ],\n                stateMutability: 'nonpayable',\n                type: 'function',\n            },\n        ];\n        if (this._options.web3Instance) {\n            this._executionType = ExecutionType.web3;\n            return;\n        }\n        if (this._options.ethersProvider) {\n            this._executionType = ExecutionType.ethers;\n            return;\n        }\n        if (this._options.nodeUrl) {\n            this._executionType = ExecutionType.customHttp;\n            return;\n        }\n        throw new Error(\n        // tslint:disable-next-line: max-line-length\n        'Your options passed in our incorrect they need to match either `MulticallOptionsEthers`, `MulticallOptionsWeb3` or `MulticallOptionsCustomJsonRpcProvider` interfaces');\n    }\n    /**\n     * Call all the contract calls in 1\n     * @param calls The calls\n     */\n    Multicall.prototype.call = function (contractCallContexts, contractCallOptions) {\n        if (contractCallOptions === void 0) { contractCallOptions = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var aggregateResponse, returnObject, response, contractCallsResults, originalContractCallContext, returnObjectResult, method, methodContext, originalContractCallMethodContext, outputTypes, decodedReturnValues;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!Array.isArray(contractCallContexts)) {\n                            contractCallContexts = [contractCallContexts];\n                        }\n                        return [4 /*yield*/, this.execute(this.buildAggregateCallContext(contractCallContexts), contractCallOptions)];\n                    case 1:\n                        aggregateResponse = _a.sent();\n                        returnObject = {\n                            results: {},\n                            blockNumber: aggregateResponse.blockNumber,\n                        };\n                        for (response = 0; response < aggregateResponse.results.length; response++) {\n                            contractCallsResults = aggregateResponse.results[response];\n                            originalContractCallContext = contractCallContexts[contractCallsResults.contractContextIndex];\n                            returnObjectResult = {\n                                originalContractCallContext: Utils.deepClone(originalContractCallContext),\n                                callsReturnContext: [],\n                            };\n                            for (method = 0; method < contractCallsResults.methodResults.length; method++) {\n                                methodContext = contractCallsResults.methodResults[method];\n                                originalContractCallMethodContext = originalContractCallContext.calls[methodContext.contractMethodIndex];\n                                outputTypes = this.findOutputTypesFromAbi(originalContractCallContext.abi, originalContractCallMethodContext.methodName);\n                                if (this._options.tryAggregate && !methodContext.result.success) {\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                        returnValues: [],\n                                        decoded: false,\n                                        reference: originalContractCallMethodContext.reference,\n                                        methodName: originalContractCallMethodContext.methodName,\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\n                                        success: false,\n                                    }));\n                                    continue;\n                                }\n                                if (outputTypes && outputTypes.length > 0) {\n                                    try {\n                                        decodedReturnValues = defaultAbiCoder.decode(\n                                        // tslint:disable-next-line: no-any\n                                        outputTypes, this.getReturnDataFromResult(methodContext.result));\n                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                            returnValues: this.formatReturnValues(decodedReturnValues),\n                                            decoded: true,\n                                            reference: originalContractCallMethodContext.reference,\n                                            methodName: originalContractCallMethodContext.methodName,\n                                            methodParameters: originalContractCallMethodContext.methodParameters,\n                                            success: true,\n                                        }));\n                                    }\n                                    catch (e) {\n                                        if (!this._options.tryAggregate) {\n                                            throw e;\n                                        }\n                                        returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                            returnValues: [],\n                                            decoded: false,\n                                            reference: originalContractCallMethodContext.reference,\n                                            methodName: originalContractCallMethodContext.methodName,\n                                            methodParameters: originalContractCallMethodContext.methodParameters,\n                                            success: false,\n                                        }));\n                                    }\n                                }\n                                else {\n                                    returnObjectResult.callsReturnContext.push(Utils.deepClone({\n                                        returnValues: this.getReturnDataFromResult(methodContext.result),\n                                        decoded: false,\n                                        reference: originalContractCallMethodContext.reference,\n                                        methodName: originalContractCallMethodContext.methodName,\n                                        methodParameters: originalContractCallMethodContext.methodParameters,\n                                        success: true,\n                                    }));\n                                }\n                            }\n                            returnObject.results[returnObjectResult.originalContractCallContext.reference] = returnObjectResult;\n                        }\n                        return [2 /*return*/, returnObject];\n                }\n            });\n        });\n    };\n    /**\n     * Get return data from result\n     * @param result The result\n     */\n    // tslint:disable-next-line: no-any\n    Multicall.prototype.getReturnDataFromResult = function (result) {\n        if (this._options.tryAggregate) {\n            return result.returnData;\n        }\n        return result;\n    };\n    /**\n     * Format return values so its always an array\n     * @param decodedReturnValues The decoded return values\n     */\n    // tslint:disable-next-line: no-any\n    Multicall.prototype.formatReturnValues = function (decodedReturnValues) {\n        var decodedReturnResults = decodedReturnValues;\n        if (decodedReturnValues.length === 1) {\n            decodedReturnResults = decodedReturnValues[0];\n        }\n        if (Array.isArray(decodedReturnResults)) {\n            return decodedReturnResults;\n        }\n        return [decodedReturnResults];\n    };\n    /**\n     * Build aggregate call context\n     * @param contractCallContexts The contract call contexts\n     */\n    Multicall.prototype.buildAggregateCallContext = function (contractCallContexts) {\n        var aggregateCallContext = [];\n        for (var contract = 0; contract < contractCallContexts.length; contract++) {\n            var contractContext = contractCallContexts[contract];\n            var executingInterface = new ethers.utils.Interface(JSON.stringify(contractContext.abi));\n            for (var method = 0; method < contractContext.calls.length; method++) {\n                // https://github.com/ethers-io/ethers.js/issues/211\n                var methodContext = contractContext.calls[method];\n                // tslint:disable-next-line: no-unused-expression\n                var encodedData = executingInterface.encodeFunctionData(methodContext.methodName, methodContext.methodParameters);\n                aggregateCallContext.push({\n                    contractContextIndex: Utils.deepClone(contract),\n                    contractMethodIndex: Utils.deepClone(method),\n                    target: contractContext.contractAddress,\n                    encodedData: encodedData,\n                });\n            }\n        }\n        return aggregateCallContext;\n    };\n    /**\n     * Find output types from abi\n     * @param abi The abi\n     * @param methodName The method name\n     */\n    Multicall.prototype.findOutputTypesFromAbi = function (abi, methodName) {\n        var _a;\n        var contract = new ethers.Contract(ethers.constants.AddressZero, abi);\n        methodName = methodName.trim();\n        if (contract.interface.functions[methodName]) {\n            return contract.interface.functions[methodName].outputs;\n        }\n        for (var i = 0; i < abi.length; i++) {\n            if (((_a = abi[i].name) === null || _a === void 0 ? void 0 : _a.trim()) === methodName) {\n                return abi[i].outputs;\n            }\n        }\n        return undefined;\n    };\n    /**\n     * Execute the multicall contract call\n     * @param calls The calls\n     */\n    Multicall.prototype.execute = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this._executionType;\n                        switch (_a) {\n                            case ExecutionType.web3: return [3 /*break*/, 1];\n                            case ExecutionType.ethers: return [3 /*break*/, 3];\n                            case ExecutionType.customHttp: return [3 /*break*/, 3];\n                        }\n                        return [3 /*break*/, 5];\n                    case 1: return [4 /*yield*/, this.executeWithWeb3(calls, options)];\n                    case 2: return [2 /*return*/, _b.sent()];\n                    case 3: return [4 /*yield*/, this.executeWithEthersOrCustom(calls, options)];\n                    case 4: return [2 /*return*/, _b.sent()];\n                    case 5: throw new Error(this._executionType + \" is not defined\");\n                }\n            });\n        });\n    };\n    /**\n     * Execute aggregate with web3 instance\n     * @param calls The calls context\n     */\n    Multicall.prototype.executeWithWeb3 = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var web3, networkId, contract, callParams, contractResponse, contractResponse;\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        web3 = this.getTypedOptions().web3Instance;\n                        return [4 /*yield*/, web3.eth.net.getId()];\n                    case 1:\n                        networkId = _c.sent();\n                        contract = new web3.eth.Contract(this.ABI, this.getContractBasedOnNetwork(networkId));\n                        callParams = [];\n                        if (options.blockNumber) {\n                            callParams.push(options.blockNumber);\n                        }\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\n                        return [4 /*yield*/, (_a = contract.methods\n                                .tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls)))\n                                .call.apply(_a, callParams)];\n                    case 2:\n                        contractResponse = (_c.sent());\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                    case 3: return [4 /*yield*/, (_b = contract.methods\n                            .aggregate(this.mapCallContextToMatchContractFormat(calls)))\n                            .call.apply(_b, callParams)];\n                    case 4:\n                        contractResponse = (_c.sent());\n                        contractResponse.blockNumber = BigNumber.from(contractResponse.blockNumber);\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                }\n            });\n        });\n    };\n    /**\n     * Execute with ethers using passed in provider context or custom one\n     * @param calls The calls\n     */\n    Multicall.prototype.executeWithEthersOrCustom = function (calls, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ethersProvider, customProvider, network, contract, overrideOptions, contractResponse, contractResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ethersProvider = this.getTypedOptions()\n                            .ethersProvider;\n                        if (!ethersProvider) {\n                            customProvider = this.getTypedOptions();\n                            if (customProvider.nodeUrl) {\n                                ethersProvider = new ethers.providers.JsonRpcProvider(customProvider.nodeUrl);\n                            }\n                            else {\n                                ethersProvider = ethers.getDefaultProvider();\n                            }\n                        }\n                        return [4 /*yield*/, ethersProvider.getNetwork()];\n                    case 1:\n                        network = _a.sent();\n                        contract = new ethers.Contract(this.getContractBasedOnNetwork(network.chainId), this.ABI, ethersProvider);\n                        overrideOptions = {};\n                        if (options.blockNumber) {\n                            overrideOptions = __assign(__assign({}, overrideOptions), { blockTag: Number(options.blockNumber) });\n                        }\n                        if (!this._options.tryAggregate) return [3 /*break*/, 3];\n                        return [4 /*yield*/, contract.callStatic.tryBlockAndAggregate(false, this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n                    case 2:\n                        contractResponse = (_a.sent());\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                    case 3: return [4 /*yield*/, contract.callStatic.aggregate(this.mapCallContextToMatchContractFormat(calls), overrideOptions)];\n                    case 4:\n                        contractResponse = (_a.sent());\n                        return [2 /*return*/, this.buildUpAggregateResponse(contractResponse, calls)];\n                }\n            });\n        });\n    };\n    /**\n     * Build up the aggregated response from the contract response mapping\n     * metadata from the calls\n     * @param contractResponse The contract response\n     * @param calls The calls\n     */\n    Multicall.prototype.buildUpAggregateResponse = function (contractResponse, calls) {\n        var aggregateResponse = {\n            blockNumber: contractResponse.blockNumber.toNumber(),\n            results: [],\n        };\n        var _loop_1 = function (i) {\n            var existingResponse = aggregateResponse.results.find(function (c) { return c.contractContextIndex === calls[i].contractContextIndex; });\n            if (existingResponse) {\n                existingResponse.methodResults.push({\n                    result: contractResponse.returnData[i],\n                    contractMethodIndex: calls[i].contractMethodIndex,\n                });\n            }\n            else {\n                aggregateResponse.results.push({\n                    methodResults: [\n                        {\n                            result: contractResponse.returnData[i],\n                            contractMethodIndex: calls[i].contractMethodIndex,\n                        },\n                    ],\n                    contractContextIndex: calls[i].contractContextIndex,\n                });\n            }\n        };\n        for (var i = 0; i < contractResponse.returnData.length; i++) {\n            _loop_1(i);\n        }\n        return aggregateResponse;\n    };\n    /**\n     * Map call contract to match contract format\n     * @param calls The calls context\n     */\n    Multicall.prototype.mapCallContextToMatchContractFormat = function (calls) {\n        return calls.map(function (call) {\n            return {\n                target: call.target,\n                callData: call.encodedData,\n            };\n        });\n    };\n    /**\n     * Get typed options\n     */\n    Multicall.prototype.getTypedOptions = function () {\n        return this._options;\n    };\n    /**\n     * Get the contract based on the network\n     * @param tryAggregate The tryAggregate\n     * @param network The network\n     */\n    Multicall.prototype.getContractBasedOnNetwork = function (network) {\n        // if they have overriden the multicall custom contract address then use that\n        if (this._options.multicallCustomContractAddress) {\n            return this._options.multicallCustomContractAddress;\n        }\n        switch (network) {\n            case Networks.mainnet:\n            case Networks.kovan:\n            case Networks.rinkeby:\n            case Networks.ropsten:\n            case Networks.goerli:\n                return '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696';\n            case Networks.bsc:\n                return '0xC50F4c1E81c873B2204D7eFf7069Ffec6Fbe136D';\n            case Networks.bsc_testnet:\n                return '0x6e5BB1a5Ad6F68A8D7D6A5e47750eC15773d6042';\n            case Networks.xdai:\n                return '0x2325b72990D81892E0e09cdE5C80DD221F147F8B';\n            case Networks.mumbai:\n                return '0xe9939e7Ea7D7fb619Ac57f648Da7B1D425832631';\n            case Networks.matic:\n                return '0x275617327c958bD06b5D6b871E7f491D76113dd8';\n            case Networks.etherlite:\n                return '0x21681750D7ddCB8d1240eD47338dC984f94AF2aC';\n            case Networks.arbitrum:\n                return '0x80C7DD17B01855a6D2347444a0FCC36136a314de';\n            case Networks.avalancheFuji:\n                return '0x3D015943d2780fE97FE3f69C97edA2CCC094f78c';\n            case Networks.avalancheMainnet:\n                return '0xed386Fe855C1EFf2f843B910923Dd8846E45C5A4';\n            case Networks.fantom:\n                return '0xD98e3dBE5950Ca8Ce5a4b59630a5652110403E5c';\n            case Networks.cronos:\n                return '0x5e954f5972EC6BFc7dECd75779F10d848230345F';\n            case Networks.harmony:\n                return '0x5c41f6817feeb65d7b2178b0b9cebfc8fad97969';\n            case Networks.optimism:\n                return '0xeAa6877139d436Dc6d1f75F3aF15B74662617B2C';\n            case Networks.kovanOptimism:\n                return '0x91c88479F21203444D2B20Aa001f951EC8CF2F68';\n            default:\n                throw new Error(\"Network - \" + network + \" doesn't have a multicall contract address defined. Please check your network or deploy your own contract on it.\");\n        }\n    };\n    return Multicall;\n}());\nexport { Multicall };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}