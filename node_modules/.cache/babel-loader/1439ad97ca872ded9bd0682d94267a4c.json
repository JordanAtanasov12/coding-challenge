{"ast":null,"code":"import ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new ethers.utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(r => Object.assign({}, singleLog, {\n          userAddress: r.recipient\n        }));\n      });\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["ethers","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","utils","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","promises","map","then","getPayment","r","Object","assign","userAddress","recipient","preparedLogs","all","error","console","log"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport ethers from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\nimport { constants } from \"perf_hooks\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new ethers.utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n            });\n\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAMA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAKA,OAAO,+CAAP;AAEA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIP,WAAJ,EAApB;MAEA,MAAMQ,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C;;MAIA,eAAeC,kBAAf,CAAkCC,SAAlC,EAAgEV,YAAhE,EAAmF;QAC/E,MAAMW,yBAAyB,GAAG,IAAIjB,MAAM,CAACkB,KAAP,CAAaC,SAAjB,CAC9BH,SAAS,CAACI,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAMjB,YAAY,CAACkB,aAAb,CAA2BP,yBAA3B,CAFV;QAIA,OAAOM,gBAAP;MACH;;MAGD,MAAME,QAAQ,GAAG,MAAMd,UAAU,CAACe,GAAX,CAAe,MAAOV,SAAP,IAAqB;QACvD,OAAOD,kBAAkB,CAACC,SAAD,EAAY,KAAKV,YAAjB,CAAlB,CACFqB,IADE,CACG,KAAKrB,YAAL,CAAkBsB,UADrB,EAEFD,IAFE,CAEGE,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,SAAlB,EAA6B;UAAEgB,WAAW,EAAEH,CAAC,CAACI;QAAjB,CAA7B,CAFR,CAAP;MAGH,CAJsB,CAAvB;MAMA,MAAMC,YAAY,GAAG,MAAMjC,OAAO,CAACkC,GAAR,CAAYV,QAAZ,CAA3B;MACA,OAAOS,YAAP;IACH,CA/BD,CA+BE,OAAOE,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;AA7CqC"},"metadata":{},"sourceType":"module"}