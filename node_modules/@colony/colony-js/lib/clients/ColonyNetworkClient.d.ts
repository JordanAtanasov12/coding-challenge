import { ContractTransaction, Signer } from 'ethers';
import { Provider } from 'ethers/providers';
import { BigNumber } from 'ethers/utils';
import { ColonyClient } from '../index';
import { ClientType, Network } from '../constants';
import { IColonyNetwork } from '../contracts/4/IColonyNetwork';
import { TokenLockingClient } from './TokenLockingClient';
import { OneTxPaymentFactoryClient } from './OneTxPaymentDeployerClient';
declare type NetworkEstimate = IColonyNetwork['estimate'];
interface ExtendedEstimate extends NetworkEstimate {
    deployToken(name: string, symbol: string, decimals?: number): Promise<BigNumber>;
}
export interface ColonyNetworkClient extends IColonyNetwork {
    clientType: ClientType.NetworkClient;
    network: Network;
    reputationOracleEndpoint: string;
    oneTxPaymentFactoryClient: OneTxPaymentFactoryClient;
    estimate: ExtendedEstimate;
    /**
     * Get a ColonyClient instance for the currently deployed version of that Colony by providing the address or the integer colony number
     *
     * @param addressOrId - The colony address (string) or the auto-incremented Colony id (integer)
     *
     * @returns The corresponding initialized ColonyClient instance
     */
    getColonyClient(addressOrId: string | number): Promise<ColonyClient>;
    /**
     * Get the initialized MetaColony client
     *
     * @returns a ColonyClient instance of the MetaColony (id: 1)
     */
    getMetaColonyClient(): Promise<ColonyClient>;
    /**
     * Deploy an ERC20 token contract, compatible with Colony
     *
     * @remarks
     * For valid values see the spec here: https://eips.ethereum.org/EIPS/eip-20
     *
     * @param name - The token name. Can be any string. Be creative
     * @param symbol - The symbol of the token (e.g. CLNY)
     * @param decimals - The number of token decimals
     *
     * @returns ethers compatible ContractTransaction
     */
    deployToken(name: string, symbol: string, decimals?: number): Promise<ContractTransaction>;
    /**
     * Gets the TokenLockingClient
     *
     * @returns an initialized version of the TokenLockingClient
     */
    getTokenLockingClient(): Promise<TokenLockingClient>;
    /**
     * Like [[`lookupRegisteredENSDomain`]], but also working on the Goerli testnet
     *
     * @remarks
     * On Goerli, all ens domains have the `.test` suffix. The contracts return `.eth` anyways.
     * We patch the original function to fix this problem. On any other network it will return the
     * original function
     *
     * @param addr - Address we want to look up
     *
     * @returns an ENS name in the form of `[username].user.joincolony.eth` or `[colonyName].colony.joincolony.eth`
     */
    lookupRegisteredENSDomainWithGoerliPatch(address: string): Promise<string>;
}
interface NetworkClientOptions {
    networkAddress?: string;
    oneTxPaymentFactoryAddress?: string;
    reputationOracleEndpoint?: string;
}
declare const getColonyNetworkClient: (network: Network | undefined, signerOrProvider: Provider | Signer, options?: NetworkClientOptions | undefined) => ColonyNetworkClient;
export default getColonyNetworkClient;
