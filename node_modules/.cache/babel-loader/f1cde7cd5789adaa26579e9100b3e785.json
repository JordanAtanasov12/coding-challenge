{"ast":null,"code":"import * as ethers from 'ethers';\nimport { getLogs, getBlockTime } from '@colony/colony-js';\nexport default class ColonyInitService {\n  constructor(colonyClient) {\n    this.colonyClient = void 0;\n    this.eventFilter = void 0;\n    this.displayItems = void 0;\n    this.logsService = void 0;\n    this.parsedLogs = void 0;\n    this.colonyClient = colonyClient;\n    this.eventFilter = this.colonyClient.filters.ColonyInitialised(null, null);\n    this.parsedLogs = new Array();\n  }\n\n  async prepareLogs() {\n    try {\n      const parsedLogs = await this.getParsedLogs();\n      this.displayItems = new Array();\n      parsedLogs.forEach(singleLog => {\n        const displayItem = {\n          description: \"Congratulations! It's a beautiful baby colony!\",\n          date: singleLog.date,\n          timestamp: singleLog.timestamp\n        };\n        this.displayItems.push(displayItem);\n      });\n      return this.displayItems;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getParsedLogs() {\n    const colonyInitEventLogs = await getLogs(this.colonyClient, this.eventFilter);\n    const getLogsPromices = await colonyInitEventLogs.map(async event => {\n      let res = await this.colonyClient.interface.parseLog(event);\n      return await this.setEventDate(res, event);\n    });\n    await Promise.all(getLogsPromices);\n    return this.parsedLogs;\n  }\n\n  async setEventDate(singleLog, unparsedEvent) {\n    const provider = ethers.getDefaultProvider();\n    const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n    this.parsedLogs.push({\n      name: singleLog.name,\n      values: {\n        fundingPotId: singleLog.values.fundingPotId,\n        user: singleLog.values.user\n      },\n      date: new Date(timestamp),\n      timestamp: timestamp\n    });\n  }\n\n}","map":{"version":3,"names":["ethers","getLogs","getBlockTime","ColonyInitService","constructor","colonyClient","eventFilter","displayItems","logsService","parsedLogs","filters","ColonyInitialised","Array","prepareLogs","getParsedLogs","forEach","singleLog","displayItem","description","date","timestamp","push","error","console","log","colonyInitEventLogs","getLogsPromices","map","event","res","interface","parseLog","setEventDate","Promise","all","unparsedEvent","provider","getDefaultProvider","blockHash","name","values","fundingPotId","user","Date"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/services/ColonyInitService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport * as  ethers from 'ethers';\nimport { getLogs, getBlockTime, ColonyRole } from '@colony/colony-js';\nimport { ColonyInitItem } from \"../interfaces/ColonyInitItem\";\nimport { EventLogsService } from \"../interfaces/EventLogsService\";\nimport {DisplayEventItem} from \"../interfaces/DisplayEventItem\"; \n\n\n\nexport default class ColonyInitService implements EventLogsService{\n\n    colonyClient: any;\n    eventFilter: ethers.EventFilter;\n    public displayItems: any;\n    public logsService: any;\n    public parsedLogs: ColonyInitItem[];\n\n    constructor(colonyClient: any) {\n        this.colonyClient = colonyClient;\n        this.eventFilter = this.colonyClient.filters.ColonyInitialised(null, null);\n        this.parsedLogs = new Array<ColonyInitItem>();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            const parsedLogs: ColonyInitItem[] = await this.getParsedLogs();\n            this.displayItems = new Array<DisplayEventItem>();\n\n            parsedLogs.forEach((singleLog) => {\n                const displayItem = { description: \"Congratulations! It's a beautiful baby colony!\", date: singleLog.date, timestamp: singleLog.timestamp };\n                this.displayItems.push(displayItem);\n            });\n            return this.displayItems;\n\n           \n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    async getParsedLogs() {\n\n        const colonyInitEventLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n        const getLogsPromices  = await colonyInitEventLogs.map(async (event: any) => {\n                let res: ColonyInitItem = await this.colonyClient.interface.parseLog(event);\n                return await this.setEventDate(res, event);\n            });\n        \n        await Promise.all(getLogsPromices);\n\n        return this.parsedLogs;\n    }\n\n\n    async setEventDate(singleLog: ColonyInitItem, unparsedEvent: any) {\n        \n        const provider = ethers.getDefaultProvider();\n        const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n\n        this.parsedLogs.push({  \n            name: singleLog.name,\n            values: {\n                fundingPotId: singleLog.values.fundingPotId,\n                user: singleLog.values.user,\n            },\n            date: new Date(timestamp),\n            timestamp: timestamp\n        })\n    }\n}\n"],"mappings":"AACA,OAAO,KAAMA,MAAb,MAAyB,QAAzB;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAkD,mBAAlD;AAOA,eAAe,MAAMC,iBAAN,CAAmD;EAQ9DC,WAAW,CAACC,YAAD,EAAoB;IAAA,KAN/BA,YAM+B;IAAA,KAL/BC,WAK+B;IAAA,KAJxBC,YAIwB;IAAA,KAHxBC,WAGwB;IAAA,KAFxBC,UAEwB;IAC3B,KAAKJ,YAAL,GAAoBA,YAApB;IACA,KAAKC,WAAL,GAAmB,KAAKD,YAAL,CAAkBK,OAAlB,CAA0BC,iBAA1B,CAA4C,IAA5C,EAAkD,IAAlD,CAAnB;IACA,KAAKF,UAAL,GAAkB,IAAIG,KAAJ,EAAlB;EACH;;EAEuB,MAAXC,WAAW,GAAG;IAEvB,IAAI;MAEA,MAAMJ,UAA4B,GAAG,MAAM,KAAKK,aAAL,EAA3C;MACA,KAAKP,YAAL,GAAoB,IAAIK,KAAJ,EAApB;MAEAH,UAAU,CAACM,OAAX,CAAoBC,SAAD,IAAe;QAC9B,MAAMC,WAAW,GAAG;UAAEC,WAAW,EAAE,gDAAf;UAAiEC,IAAI,EAAEH,SAAS,CAACG,IAAjF;UAAuFC,SAAS,EAAEJ,SAAS,CAACI;QAA5G,CAApB;QACA,KAAKb,YAAL,CAAkBc,IAAlB,CAAuBJ,WAAvB;MACH,CAHD;MAIA,OAAO,KAAKV,YAAZ;IAGH,CAZD,CAYE,OAAOe,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;EAGkB,MAAbR,aAAa,GAAG;IAElB,MAAMW,mBAAwB,GAAG,MAAMxB,OAAO,CAAC,KAAKI,YAAN,EAAoB,KAAKC,WAAzB,CAA9C;IACA,MAAMoB,eAAe,GAAI,MAAMD,mBAAmB,CAACE,GAApB,CAAwB,MAAOC,KAAP,IAAsB;MACrE,IAAIC,GAAmB,GAAG,MAAM,KAAKxB,YAAL,CAAkByB,SAAlB,CAA4BC,QAA5B,CAAqCH,KAArC,CAAhC;MACA,OAAO,MAAM,KAAKI,YAAL,CAAkBH,GAAlB,EAAuBD,KAAvB,CAAb;IACH,CAH0B,CAA/B;IAKA,MAAMK,OAAO,CAACC,GAAR,CAAYR,eAAZ,CAAN;IAEA,OAAO,KAAKjB,UAAZ;EACH;;EAGiB,MAAZuB,YAAY,CAAChB,SAAD,EAA4BmB,aAA5B,EAAgD;IAE9D,MAAMC,QAAQ,GAAGpC,MAAM,CAACqC,kBAAP,EAAjB;IACA,MAAMjB,SAAS,GAAG,MAAMlB,YAAY,CAACkC,QAAD,EAAWD,aAAa,CAACG,SAAzB,CAApC;IAEA,KAAK7B,UAAL,CAAgBY,IAAhB,CAAqB;MACjBkB,IAAI,EAAEvB,SAAS,CAACuB,IADC;MAEjBC,MAAM,EAAE;QACJC,YAAY,EAAEzB,SAAS,CAACwB,MAAV,CAAiBC,YAD3B;QAEJC,IAAI,EAAE1B,SAAS,CAACwB,MAAV,CAAiBE;MAFnB,CAFS;MAMjBvB,IAAI,EAAE,IAAIwB,IAAJ,CAASvB,SAAT,CANW;MAOjBA,SAAS,EAAEA;IAPM,CAArB;EASH;;AA9D6D"},"metadata":{},"sourceType":"module"}