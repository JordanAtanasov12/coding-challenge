{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayItems = void 0;\n    this.state = {\n      events: []\n    };\n  }\n\n  async componentDidMount() {\n    this.displayItems = new Array();\n    const payoutCalimedServise = new PayoutClaimedService(await ColonyNetworkClientFactory.getColonyClient());\n    const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n    this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n    const colonyInitService = new ColonyInitService(await ColonyNetworkClientFactory.getColonyClient());\n    const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs];\n    const colonyRoleSetService = new ColonyRoleSetService(await ColonyNetworkClientFactory.getColonyClient());\n    const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs];\n    const domainAddedService = new DomainAddedService(await ColonyNetworkClientFactory.getColonyClient());\n    const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n    this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n    this.setState({\n      events: this.displayItems\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.events.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.description, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.date.toString(), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","PayoutClaimedService","ColonyInitService","ColonyRoleSetService","DomainAddedService","ColonyNetworkClientFactory","EventLogs","Component","displayItems","state","events","componentDidMount","Array","payoutCalimedServise","getColonyClient","payoutPreparedLogs","prepareLogs","colonyInitService","colonyInitPreparedLogs","colonyRoleSetService","colonyRoleSetPreparedLogs","domainAddedService","domaiAddedPreparedLogs","setState","render","map","post","description","date","toString"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport ColonyInitService from \"../services/ColonyInitService\";\nimport ColonyRoleSetService from \"../services/ColonyRoleSetService\";\nimport DomainAddedService from \"../services/DomainAddedService\";\nimport { DisplayPayoutClaimedItem } from '../interfaces/DisplayPayoutClaimedItem'\nimport { DisplayEventItem } from \"../interfaces/DisplayEventItem\";\nimport ColonyNetworkClientFactory from \"../clients/ColonyNetworkClientFactory\";\n\n\nexport default class EventLogs extends React.Component {\n\n    public displayItems: any;\n\n    state = { events: [] };\n\n    async componentDidMount() {\n        \n       this.displayItems = new Array<DisplayEventItem>();\n       const payoutCalimedServise = new PayoutClaimedService(await ColonyNetworkClientFactory.getColonyClient());\n       const payoutPreparedLogs = await payoutCalimedServise.prepareLogs();\n       this.displayItems = [...this.displayItems, ...payoutPreparedLogs];\n\n        const colonyInitService = new ColonyInitService(await ColonyNetworkClientFactory.getColonyClient());\n        const colonyInitPreparedLogs = await colonyInitService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyInitPreparedLogs]\n\n        const colonyRoleSetService = new ColonyRoleSetService(await ColonyNetworkClientFactory.getColonyClient());\n        const colonyRoleSetPreparedLogs = await colonyRoleSetService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...colonyRoleSetPreparedLogs]\n\n        const domainAddedService = new DomainAddedService(await ColonyNetworkClientFactory.getColonyClient());\n        const domaiAddedPreparedLogs = await domainAddedService.prepareLogs();\n        this.displayItems = [...this.displayItems, ...domaiAddedPreparedLogs];\n\n        this.setState({ events: this.displayItems });\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.state.events.map((post: DisplayEventItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.description} </h4>\n                            <h4> {post.date.toString()} </h4>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AAGA,OAAOC,0BAAP,MAAuC,uCAAvC;;AAGA,eAAe,MAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;EAAA;IAAA;IAAA,KAE5CC,YAF4C;IAAA,KAInDC,KAJmD,GAI3C;MAAEC,MAAM,EAAE;IAAV,CAJ2C;EAAA;;EAM5B,MAAjBC,iBAAiB,GAAG;IAEvB,KAAKH,YAAL,GAAoB,IAAII,KAAJ,EAApB;IACA,MAAMC,oBAAoB,GAAG,IAAIZ,oBAAJ,CAAyB,MAAMI,0BAA0B,CAACS,eAA3B,EAA/B,CAA7B;IACA,MAAMC,kBAAkB,GAAG,MAAMF,oBAAoB,CAACG,WAArB,EAAjC;IACA,KAAKR,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGO,kBAA1B,CAApB;IAEC,MAAME,iBAAiB,GAAG,IAAIf,iBAAJ,CAAsB,MAAMG,0BAA0B,CAACS,eAA3B,EAA5B,CAA1B;IACA,MAAMI,sBAAsB,GAAG,MAAMD,iBAAiB,CAACD,WAAlB,EAArC;IACA,KAAKR,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGU,sBAA1B,CAApB;IAEA,MAAMC,oBAAoB,GAAG,IAAIhB,oBAAJ,CAAyB,MAAME,0BAA0B,CAACS,eAA3B,EAA/B,CAA7B;IACA,MAAMM,yBAAyB,GAAG,MAAMD,oBAAoB,CAACH,WAArB,EAAxC;IACA,KAAKR,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGY,yBAA1B,CAApB;IAEA,MAAMC,kBAAkB,GAAG,IAAIjB,kBAAJ,CAAuB,MAAMC,0BAA0B,CAACS,eAA3B,EAA7B,CAA3B;IACA,MAAMQ,sBAAsB,GAAG,MAAMD,kBAAkB,CAACL,WAAnB,EAArC;IACA,KAAKR,YAAL,GAAoB,CAAC,GAAG,KAAKA,YAAT,EAAuB,GAAGc,sBAA1B,CAApB;IAEA,KAAKC,QAAL,CAAc;MAAEb,MAAM,EAAE,KAAKF;IAAf,CAAd;EACH;;EAGDgB,MAAM,GAAG;IACL,oBACI;MAAA,UACK,KAAKf,KAAL,CAAWC,MAAX,CAAkBe,GAAlB,CAAuBC,IAAD,iBACnB;QAAA,uBACI;UAAA,wBACI;YAAA,gBAAMA,IAAI,CAACC,WAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,gBAAMD,IAAI,CAACE,IAAL,CAAUC,QAAV,EAAN;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADH;IADL;MAAA;MAAA;MAAA;IAAA,QADJ;EAYH;;AA1CkD"},"metadata":{},"sourceType":"module"}