{"ast":null,"code":"import { InfuraProvider } from 'ethers/providers';\nimport { utils, Contract } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null)); //=============================================\n\n      const Web3 = require('web3');\n\n      const ERC20Contract = require('erc20-contract-js');\n\n      const provider = new InfuraProvider();\n      const abi = [// Read-Only Functions\n      \"function balanceOf(address owner) view returns (uint256)\", \"function decimals() view returns (uint8)\", \"function symbol() view returns (string)\", // Authenticated Functions\n      \"function transfer(address to, uint amount) returns (bool)\", // Events\n      \"event Transfer(address indexed from, address indexed to, uint amount)\"];\n      const address = \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\";\n      const erc20 = new Contract(address, abi, provider); //=============================================\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(r => Object.assign({}, singleLog, {\n          userAddress: r.recipient\n        }));\n      });\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["InfuraProvider","utils","Contract","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","Web3","require","ERC20Contract","provider","abi","address","erc20","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","promises","map","then","getPayment","r","Object","assign","userAddress","recipient","preparedLogs","all","error","console","log"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils, Contract } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n            //=============================================\n\n            const Web3 = require('web3');\n            const ERC20Contract = require('erc20-contract-js');\n\n            const provider = new InfuraProvider();\n            \n            const abi = [\n                // Read-Only Functions\n                \"function balanceOf(address owner) view returns (uint256)\",\n                \"function decimals() view returns (uint8)\",\n                \"function symbol() view returns (string)\",\n            \n                // Authenticated Functions\n                \"function transfer(address to, uint amount) returns (bool)\",\n            \n                // Events\n                \"event Transfer(address indexed from, address indexed to, uint amount)\"\n            ];\n\n            const address = \"0x0dd7b8f3d1fa88FAbAa8a04A0c7B52FC35D4312c\";\n\n            const erc20 = new Contract(address, abi, provider);\n\n            \n            //=============================================\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n            });\n\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAGA,SAASA,cAAT,QAA6C,kBAA7C;AAGA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,QAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAOA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIP,WAAJ,EAApB;MAEA,MAAMQ,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C,CANA,CAQA;;MAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;MACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;MAEA,MAAME,QAAQ,GAAG,IAAIpB,cAAJ,EAAjB;MAEA,MAAMqB,GAAG,GAAG,CACR;MACA,0DAFQ,EAGR,0CAHQ,EAIR,yCAJQ,EAMR;MACA,2DAPQ,EASR;MACA,uEAVQ,CAAZ;MAaA,MAAMC,OAAO,GAAG,4CAAhB;MAEA,MAAMC,KAAK,GAAG,IAAIrB,QAAJ,CAAaoB,OAAb,EAAsBD,GAAtB,EAA2BD,QAA3B,CAAd,CA9BA,CAiCA;;MAEA,eAAeI,kBAAf,CAAkCC,SAAlC,EAAgEjB,YAAhE,EAAmF;QAC/E,MAAMkB,yBAAyB,GAAG,IAAIzB,KAAK,CAAC0B,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAMvB,YAAY,CAACwB,aAAb,CAA2BN,yBAA3B,CAFV;QAIA,OAAOK,gBAAP;MACH;;MAGD,MAAME,QAAQ,GAAG,MAAMpB,UAAU,CAACqB,GAAX,CAAe,MAAOT,SAAP,IAAqB;QACvD,OAAOD,kBAAkB,CAACC,SAAD,EAAY,KAAKjB,YAAjB,CAAlB,CACF2B,IADE,CACG,KAAK3B,YAAL,CAAkB4B,UADrB,EAEFD,IAFE,CAEGE,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,SAAlB,EAA6B;UAAEe,WAAW,EAAEH,CAAC,CAACI;QAAjB,CAA7B,CAFR,CAAP;MAGH,CAJsB,CAAvB;MAMA,MAAMC,YAAY,GAAG,MAAMvC,OAAO,CAACwC,GAAR,CAAYV,QAAZ,CAA3B;MACA,OAAOS,YAAP;IACH,CAxDD,CAwDE,OAAOE,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;AAtEqC"},"metadata":{},"sourceType":"module"}