{"ast":null,"code":"import { InfuraProvider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS } from '../helpers/constants';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(r => Object.assign({}, singleLog, {\n          userAddress: r.recipient\n        }));\n      });\n      const associatedTypeId = await getAssoitaedTypeId(parsedLogs[0], this.colonyClient);\n      const userdAddress = await this.colonyClient.getPayment(associatedTypeId);\n      const provider = new InfuraProvider();\n      const balances = await getBalancesForEthereumAddress({\n        // erc20 tokens you want to query!\n        contractAddresses: [parsedLogs[0].values.token // unlimited amount you can keep adding and adding\n        // you can also build up easily through the code as well\n        ],\n        // ethereum address of the user you want to get the balances for\n        ethereumAddress: MAINNET_NETWORK_ADDRESS,\n        // your ethers provider\n        providerOptions: {\n          ethersProvider: provider\n        }\n      });\n      console.log(balances); //const preparedLogs = await Promise.all(promises);\n      //return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["InfuraProvider","utils","ColonyNetworkClient","LogsService","getBalancesForEthereumAddress","MAINNET_NETWORK_ADDRESS","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","promises","map","then","getPayment","r","Object","assign","userAddress","recipient","userdAddress","provider","balances","contractAddresses","token","ethereumAddress","providerOptions","ethersProvider","console","log","error"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\nimport { constants } from \"perf_hooks\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n            });\n\n            const associatedTypeId = await getAssoitaedTypeId(parsedLogs[0], this.colonyClient);\n            const userdAddress = await this.colonyClient.getPayment(associatedTypeId);\n\n            const provider = new InfuraProvider();\n            \n            const balances = await getBalancesForEthereumAddress({\n                // erc20 tokens you want to query!\n                contractAddresses: [\n                    parsedLogs[0].values.token,\n                  // unlimited amount you can keep adding and adding\n                  // you can also build up easily through the code as well\n                ],\n                // ethereum address of the user you want to get the balances for\n                ethereumAddress: MAINNET_NETWORK_ADDRESS,\n                // your ethers provider\n                providerOptions: {\n                  ethersProvider: provider,\n                },\n              });\n\n              console.log(balances);\n\n            //const preparedLogs = await Promise.all(promises);\n            //return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAGA,SAASA,cAAT,QAA+B,kBAA/B;AAGA,SAASC,KAAT,QAAsB,QAAtB;AAEA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,6BAAT,QAA8C,yCAA9C;AACA,SAASC,uBAAT,QAAoE,sBAApE;AAGA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIP,mBAAJ,EAArB;EACH;;EAEuB,MAAXQ,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIT,WAAJ,EAApB;MAEA,MAAMU,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C;;MAIA,eAAeC,kBAAf,CAAkCC,SAAlC,EAAgEV,YAAhE,EAAmF;QAC/E,MAAMW,yBAAyB,GAAG,IAAIlB,KAAK,CAACmB,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAMhB,YAAY,CAACiB,aAAb,CAA2BN,yBAA3B,CAFV;QAIA,OAAOK,gBAAP;MACH;;MAGD,MAAME,QAAQ,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAe,MAAOT,SAAP,IAAqB;QACvD,OAAOD,kBAAkB,CAACC,SAAD,EAAY,KAAKV,YAAjB,CAAlB,CACFoB,IADE,CACG,KAAKpB,YAAL,CAAkBqB,UADrB,EAEFD,IAFE,CAEGE,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,SAAlB,EAA6B;UAAEe,WAAW,EAAEH,CAAC,CAACI;QAAjB,CAA7B,CAFR,CAAP;MAGH,CAJsB,CAAvB;MAMA,MAAMV,gBAAgB,GAAG,MAAMP,kBAAkB,CAACJ,UAAU,CAAC,CAAD,CAAX,EAAgB,KAAKL,YAArB,CAAjD;MACA,MAAM2B,YAAY,GAAG,MAAM,KAAK3B,YAAL,CAAkBqB,UAAlB,CAA6BL,gBAA7B,CAA3B;MAEA,MAAMY,QAAQ,GAAG,IAAIpC,cAAJ,EAAjB;MAEA,MAAMqC,QAAQ,GAAG,MAAMjC,6BAA6B,CAAC;QACjD;QACAkC,iBAAiB,EAAE,CACfzB,UAAU,CAAC,CAAD,CAAV,CAAcQ,MAAd,CAAqBkB,KADN,CAEjB;QACA;QAHiB,CAF8B;QAOjD;QACAC,eAAe,EAAEnC,uBARgC;QASjD;QACAoC,eAAe,EAAE;UACfC,cAAc,EAAEN;QADD;MAVgC,CAAD,CAApD;MAeEO,OAAO,CAACC,GAAR,CAAYP,QAAZ,EAjDF,CAmDA;MACA;IACH,CArDD,CAqDE,OAAOQ,KAAP,EAAc;MACZF,OAAO,CAACC,GAAR,CAAYC,KAAZ;IACH;EACJ;;AAnEqC"},"metadata":{},"sourceType":"module"}