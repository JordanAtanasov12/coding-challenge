{"ast":null,"code":"import * as ethers from 'ethers';\nimport { getLogs, getBlockTime } from '@colony/colony-js';\n\n/*\n    Colony Initilize Event Service, preparing respective event logs\n*/\nexport default class ColonyInitService {\n  constructor(colonyClient) {\n    this.colonyClient = void 0;\n    this.eventFilter = void 0;\n    this.displayItems = void 0;\n    this.logsService = void 0;\n    this.parsedLogs = void 0;\n    this.colonyClient = colonyClient;\n    this.eventFilter = this.colonyClient.filters.ColonyInitialised(null, null);\n    this.parsedLogs = new Array();\n  }\n\n  async prepareLogs() {\n    try {\n      const parsedLogs = await this.getParsedLogs();\n      this.displayItems = new Array();\n      parsedLogs.forEach(singleLog => {\n        const displayItem = {\n          description: \"Congratulations! It's a beautiful baby colony!\",\n          date: singleLog.date,\n          timestamp: singleLog.timestamp,\n          avatarSeed: singleLog.values.user\n        };\n        this.displayItems.push(displayItem);\n      });\n      return this.displayItems;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async getParsedLogs() {\n    const colonyInitEventLogs = await getLogs(this.colonyClient, this.eventFilter);\n    const getLogsPromices = await colonyInitEventLogs.map(async event => {\n      let res = await this.colonyClient.interface.parseLog(event);\n      return await this.mapLog(res, event);\n    });\n    await Promise.all(getLogsPromices);\n    return this.parsedLogs;\n  }\n\n  async mapLog(singleLog, unparsedEvent) {\n    const provider = ethers.getDefaultProvider();\n    const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n    let day = \"\";\n    let month = \"\";\n\n    if (timestamp) {\n      const date = new Date(timestamp);\n      day = date.toLocaleString('default', {\n        day: '2-digit'\n      });\n      month = date.toLocaleString('default', {\n        month: 'short'\n      });\n    }\n\n    this.parsedLogs.push({\n      name: singleLog.name,\n      values: {\n        fundingPotId: singleLog.values.fundingPotId,\n        user: singleLog.values.user ? singleLog.values.user : this.colonyClient.address\n      },\n      date: `${day} ${month}`,\n      timestamp: timestamp\n    });\n  }\n\n}","map":{"version":3,"names":["ethers","getLogs","getBlockTime","ColonyInitService","constructor","colonyClient","eventFilter","displayItems","logsService","parsedLogs","filters","ColonyInitialised","Array","prepareLogs","getParsedLogs","forEach","singleLog","displayItem","description","date","timestamp","avatarSeed","values","user","push","error","console","log","colonyInitEventLogs","getLogsPromices","map","event","res","interface","parseLog","mapLog","Promise","all","unparsedEvent","provider","getDefaultProvider","blockHash","day","month","Date","toLocaleString","name","fundingPotId","address"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP copy/coding-challenge-events-list-bootstrap/src/services/ColonyInitService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport * as  ethers from 'ethers';\nimport { getLogs, getBlockTime, ColonyRole } from '@colony/colony-js';\nimport { ColonyInitItem } from \"../interfaces/eventObjects/ColonyInitItem\";\nimport { EventLogsService } from \"../interfaces/services/EventLogsService\";\nimport { DisplayEventItem } from \"../interfaces/eventObjects/DisplayEventItem\";\n\n\n/*\n    Colony Initilize Event Service, preparing respective event logs\n*/\nexport default class ColonyInitService implements EventLogsService {\n\n    colonyClient: any;\n    eventFilter: ethers.EventFilter;\n    public displayItems: any;\n    public logsService: any;\n    public parsedLogs: ColonyInitItem[];\n\n    constructor(colonyClient: any) {\n        this.colonyClient = colonyClient;\n        this.eventFilter = this.colonyClient.filters.ColonyInitialised(null, null);\n        this.parsedLogs = new Array<ColonyInitItem>();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            const parsedLogs: ColonyInitItem[] = await this.getParsedLogs();\n            this.displayItems = new Array<DisplayEventItem>();\n\n            parsedLogs.forEach((singleLog) => {\n                const displayItem = {\n                    description: \"Congratulations! It's a beautiful baby colony!\",\n                    date: singleLog.date,\n                    timestamp: singleLog.timestamp,\n                    avatarSeed: singleLog.values.user\n                };\n                this.displayItems.push(displayItem);\n            });\n            return this.displayItems;\n\n\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n    async getParsedLogs() {\n\n        const colonyInitEventLogs: any = await getLogs(this.colonyClient, this.eventFilter);\n        const getLogsPromices = await colonyInitEventLogs.map(async (event: any) => {\n            let res: ColonyInitItem = await this.colonyClient.interface.parseLog(event);\n            return await this.mapLog(res, event);\n        });\n\n        await Promise.all(getLogsPromices);\n\n        return this.parsedLogs;\n    }\n\n\n    async mapLog(singleLog: ColonyInitItem, unparsedEvent: any) {\n\n        const provider = ethers.getDefaultProvider();\n        const timestamp = await getBlockTime(provider, unparsedEvent.blockHash);\n        let day = \"\";\n        let month = \"\";\n\n        if (timestamp) {\n            const date = new Date(timestamp);\n            day = date.toLocaleString('default', { day: '2-digit' });\n            month = date.toLocaleString('default', { month: 'short' });\n        }\n\n        this.parsedLogs.push({\n            name: singleLog.name,\n            values: {\n                fundingPotId: singleLog.values.fundingPotId,\n                user: singleLog.values.user ? singleLog.values.user : this.colonyClient.address,\n            },\n            date: `${day} ${month}`,\n            timestamp: timestamp\n        })\n    }\n}\n    "],"mappings":"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"},"metadata":{},"sourceType":"module"}