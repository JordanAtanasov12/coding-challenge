{"ast":null,"code":"import { getColonyNetworkClient, Network } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\nexport default class ColonyNetworkClient {\n  async getClient() {\n    try {\n      const provider = new InfuraProvider(); // Get a random wallet\n\n      const wallet = Wallet.createRandom(); // Connect wallet to the provider\n\n      const connectedWallet = wallet.connect(provider);\n      const networkClient = await getColonyNetworkClient(Network.Mainnet, connectedWallet, {\n        networkAddress: MAINNET_NETWORK_ADDRESS\n      }); // Get the colony client instance for the betacolony\n\n      const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS);\n      return colonyClient;\n    } catch (e) {\n      throw new Error(`Failed to instantiate Colony Client with error : ${e}`);\n    }\n  }\n\n}","map":{"version":3,"names":["getColonyNetworkClient","Network","Wallet","InfuraProvider","MAINNET_NETWORK_ADDRESS","MAINNET_BETACOLONY_ADDRESS","ColonyNetworkClient","getClient","provider","wallet","createRandom","connectedWallet","connect","networkClient","Mainnet","networkAddress","colonyClient","getColonyClient","e","Error"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/clients/ColonyNetworkClient.ts"],"sourcesContent":["\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\nexport default class ColonyNetworkClient {\n\n    public async getClient() {\n        try {\n            const provider = new InfuraProvider();\n\n            // Get a random wallet\n            const wallet = Wallet.createRandom();\n            // Connect wallet to the provider\n            const connectedWallet = wallet.connect(provider);\n            const networkClient = await getColonyNetworkClient(\n                Network.Mainnet,\n                connectedWallet,\n                {\n                    networkAddress: MAINNET_NETWORK_ADDRESS\n                },\n            );\n\n            // Get the colony client instance for the betacolony\n            const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS);\n\n            return colonyClient;\n        }\n        catch (e) {\n            throw new Error(`Failed to instantiate Colony Client with error : ${e}`);\n        }\n    }\n\n}\n"],"mappings":"AACA,SAASA,sBAAT,EAAiCC,OAAjC,QAA0E,mBAA1E;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,uBAAT,EAAkCC,0BAAlC,QAAoE,sBAApE;AAGA,eAAe,MAAMC,mBAAN,CAA0B;EAEf,MAATC,SAAS,GAAG;IACrB,IAAI;MACA,MAAMC,QAAQ,GAAG,IAAIL,cAAJ,EAAjB,CADA,CAGA;;MACA,MAAMM,MAAM,GAAGP,MAAM,CAACQ,YAAP,EAAf,CAJA,CAKA;;MACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,OAAP,CAAeJ,QAAf,CAAxB;MACA,MAAMK,aAAa,GAAG,MAAMb,sBAAsB,CAC9CC,OAAO,CAACa,OADsC,EAE9CH,eAF8C,EAG9C;QACII,cAAc,EAAEX;MADpB,CAH8C,CAAlD,CAPA,CAeA;;MACA,MAAMY,YAAY,GAAG,MAAMH,aAAa,CAACI,eAAd,CAA8BZ,0BAA9B,CAA3B;MAEA,OAAOW,YAAP;IACH,CAnBD,CAoBA,OAAOE,CAAP,EAAU;MACN,MAAM,IAAIC,KAAJ,CAAW,oDAAmDD,CAAE,EAAhE,CAAN;IACH;EACJ;;AA1BoC"},"metadata":{},"sourceType":"module"}