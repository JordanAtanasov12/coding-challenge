import { Signer } from 'ethers';
import { Provider } from 'ethers/providers';
import { ClientType, TokenClientType } from '../constants';
import { Token } from '../contracts/4/Token';
import { TokenErc20 } from '../contracts/4/TokenErc20';
import { TokenSai } from '../contracts/4/TokenSai';
export interface TokenInfo {
    name: string;
    symbol: string;
    decimals: number;
}
/** The TokenClient is a good client that does awesome things */
export interface ColonyTokenClient extends Token {
    clientType: ClientType.TokenClient;
    tokenClientType: TokenClientType.Colony;
    getTokenInfo(): Promise<TokenInfo>;
}
export interface Erc20TokenClient extends TokenErc20 {
    clientType: ClientType.TokenClient;
    tokenClientType: TokenClientType.Erc20;
    getTokenInfo(): Promise<TokenInfo>;
}
export interface DaiTokenClient extends TokenSai {
    clientType: ClientType.TokenClient;
    tokenClientType: TokenClientType.Dai;
    getTokenInfo(): Promise<TokenInfo>;
}
export declare type TokenClient = ColonyTokenClient | Erc20TokenClient | DaiTokenClient;
declare const getTokenClient: (address: string, signerOrProvider: Provider | Signer) => Promise<TokenClient>;
export default getTokenClient;
