{"ast":null,"code":"import { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    function sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    this.colonyClient = await this.networkClient.getClient();\n    const logsService = new LogsService();\n    let parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n    const [singleLog] = parsedLogs; //for (let singleLog of parsedLogs){\n\n    const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n    const {\n      associatedTypeId\n    } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n    const recipient = await this.colonyClient.getPayment(associatedTypeId);\n    Object.assign({}, singleLog, {\n      userAddress: recipient.recipient\n    }); //     break;\n    // };\n\n    return parsedLogs;\n  }\n\n}","map":{"version":3,"names":["utils","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","sleep","ms","resolve","setTimeout","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","recipient","getPayment","Object","assign","userAddress"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient;\n    }\n\n    public async prepareLogs() {\n\n        function sleep(ms: number) {\n            return new Promise((resolve) => {\n                setTimeout(resolve, ms);\n            });\n        }\n\n        this.colonyClient = await this.networkClient.getClient();\n\n        const logsService = new LogsService();\n\n        let parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n        const [singleLog] = parsedLogs;\n\n\n        //for (let singleLog of parsedLogs){\n        const humanReadableFundingPotId = new utils.BigNumber(\n            singleLog.values.fundingPotId\n        ).toString();\n\n        const {\n            associatedTypeId,\n        } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n\n        const recipient = await this.colonyClient.getPayment(associatedTypeId);\n        Object.assign({}, singleLog, { userAddress: recipient.recipient });\n        //     break;\n        // };\n        return parsedLogs;\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAGA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,SAASC,KAAT,CAAeC,EAAf,EAA2B;MACvB,OAAO,IAAIT,OAAJ,CAAaU,OAAD,IAAa;QAC5BC,UAAU,CAACD,OAAD,EAAUD,EAAV,CAAV;MACH,CAFM,CAAP;IAGH;;IAED,KAAKJ,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBM,SAAnB,EAA1B;IAEA,MAAMC,WAAW,GAAG,IAAIX,WAAJ,EAApB;IAEA,IAAIY,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKV,YAAL,CAAkBW,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA5C;IAEA,MAAM,CAACC,SAAD,IAAcJ,UAApB,CAduB,CAiBvB;;IACA,MAAMK,yBAAyB,GAAG,IAAIpB,KAAK,CAACqB,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;IAIA,MAAM;MACFC;IADE,IAEF,MAAM,KAAKnB,YAAL,CAAkBoB,aAAlB,CAAgCN,yBAAhC,CAFV;IAIA,MAAMO,SAAS,GAAG,MAAM,KAAKrB,YAAL,CAAkBsB,UAAlB,CAA6BH,gBAA7B,CAAxB;IACAI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,SAAlB,EAA6B;MAAEY,WAAW,EAAEJ,SAAS,CAACA;IAAzB,CAA7B,EA3BuB,CA4BvB;IACA;;IACA,OAAOZ,UAAP;EACH;;AAxCqC"},"metadata":{},"sourceType":"module"}