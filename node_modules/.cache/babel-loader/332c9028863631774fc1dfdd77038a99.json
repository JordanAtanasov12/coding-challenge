{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport { getColonyNetworkClient, Network } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise'; //import { ColonyRole } from '@colony/colony-js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      colonyInitialisedLogs: [],\n      payoutClaimedLogs: []\n    };\n  }\n\n  async componentDidMount() {\n    const MAINNET_NETWORK_ADDRESS = `0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef`;\n    const MAINNET_BETACOLONY_ADDRESS = `0x869814034d96544f3C62DE2aC22448ed79Ac8e70`;\n    const provider = new InfuraProvider(); // Get a random wallet\n\n    const wallet = Wallet.createRandom(); // Connect your wallet to the provider\n\n    const connectedWallet = wallet.connect(provider); // Check out the logs to see the wallet address\n\n    console.log('Wallet Address:', wallet.address);\n    const networkClient = await getColonyNetworkClient(Network.Mainnet, connectedWallet, {\n      networkAddress: MAINNET_NETWORK_ADDRESS\n    }); // Get the colony client instance for the betacolony\n\n    const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS); // Get the filter for Colony Initilised\n\n    const eventFilter = colonyClient.filters.ColonyInitialised(null, null);\n    const colonyInitEventLogs = await getLogs(colonyClient, eventFilter);\n    const colonyInitialisedLogs = colonyInitEventLogs.map(event => colonyClient.interface.parseLog(event)); // Get the filter for Payout Claimed\n\n    const payoutFilter = colonyClient.filters.PayoutClaimed(null, null, null);\n    const payoutClaimedEventLogs = await getLogs(colonyClient, payoutFilter);\n    const payoutClaimedLogs = payoutClaimedEventLogs.map(event => colonyClient.interface.parseLog(event)); //const [singleLog] = colonyInitialisedLogs;\n\n    console.log(\"============ Colony Initilised ============\"); //console.log(JSON.stringify(colonyInitialisedLogs));\n\n    console.log(\"============ PAYOUT CLAIMED ============\");\n    console.log(JSON.stringify(payoutClaimedLogs));\n    this.setState({\n      colonyInitialisedLogs: colonyInitialisedLogs,\n      payoutClaimedLogs: payoutClaimedLogs\n    }); //const [singleLog] = payoutClaimedLogs;\n    //const humanReadableFundingPotId = new utils.BigNumber(\n    //    singleLog.values.fundingPotId\n    //).toString();\n    //const {\n    //    associatedTypeId,\n    //} = await colonyClient.getFundingPot(humanReadableFundingPotId);\n    //const recipient: PaymentObject = await colonyClient.getPayment(associatedTypeId);\n    //console.log(JSON.stringify(recipient.recipient));\n\n    async function getPayment(singleLog) {\n      const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n      const {\n        associatedTypeId\n      } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n      const recipient = await colonyClient.getPayment(associatedTypeId);\n      return recipient;\n    } //Promise.all(payoutClaimedLogs.map(singleLog => (\n    //    getPayment(singleLog)\n    //      .then(recipient => ({\n    //        userAddress: recipient,\n    //      }))\n    //      .catch(err => console.log(\"Error fetching image: \", err))\n    //      ))\n    //  )\n    //    .then(payoutClaimedLogs => this.setState({ payoutClaimedLogs }))\n    //    .catch(err => console.log(\"Error setting up payoutClaimedLogs: \", err))\n\n\n    const asyncRes = await Promise.all(payoutClaimedLogs.map(async singleLog => {\n      const recipent = getPayment(singleLog);\n      singleLog.userAddress = (await recipent).recipient;\n      debugger;\n      console.log(\"========================================================\");\n      console.log(singleLog.userAddress);\n      console.log(\"========================================================\");\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.colonyInitialisedLogs.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.signature, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this)), this.state.payoutClaimedLogs.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.userAddress, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","getColonyNetworkClient","Network","Wallet","InfuraProvider","getLogs","utils","Promise","EventLogs","Component","state","colonyInitialisedLogs","payoutClaimedLogs","componentDidMount","MAINNET_NETWORK_ADDRESS","MAINNET_BETACOLONY_ADDRESS","provider","wallet","createRandom","connectedWallet","connect","console","log","address","networkClient","Mainnet","networkAddress","colonyClient","getColonyClient","eventFilter","filters","ColonyInitialised","colonyInitEventLogs","map","event","interface","parseLog","payoutFilter","PayoutClaimed","payoutClaimedEventLogs","JSON","stringify","setState","getPayment","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","recipient","asyncRes","all","recipent","userAddress","render","post","name","signature"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["\nimport React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport {Promise} from 'es6-promise';\n//import { ColonyRole } from '@colony/colony-js';\n\n\n\ninterface ColonyInitValue {\n    colonyNetwork: string;\n    token: string;\n    length: string;\n    fundingPotId: string;\n\n}\n\ninterface PayoutClaimedValue {\n    colonyNetwork: string;\n    token: string;\n    length: string;\n    fundingPotId: string;\n\n}\n\ninterface ColonyInitialisedItem {\n    name: string;\n    signature: string;\n    topic: string;\n    values: ColonyInitValue[];\n}\n\ninterface PayoutClaimedItem {\n    name: string;\n    signature: string;\n    topic: string;\n    values: {\n        0: string;\n        1: string;\n        2: string;\n        fundingPotId: string;\n    };\n    userAddress: string;\n}\n\ninterface PaymentObject {\n    recipient: string;\n    finalized: boolean;\n}\n\n\n\nexport default class EventLogs extends React.Component {\n    \n    state = { colonyInitialisedLogs: [], payoutClaimedLogs: [] };\n\n    async componentDidMount() {\n        const MAINNET_NETWORK_ADDRESS = `0x5346D0f80e2816FaD329F2c140c870ffc3c3E2Ef`;\n        const MAINNET_BETACOLONY_ADDRESS = `0x869814034d96544f3C62DE2aC22448ed79Ac8e70`;\n        const provider = new InfuraProvider();\n\n        // Get a random wallet\n        const wallet = Wallet.createRandom();\n        // Connect your wallet to the provider\n        const connectedWallet = wallet.connect(provider);\n\n        // Check out the logs to see the wallet address\n        console.log('Wallet Address:', wallet.address);\n\n        const networkClient = await getColonyNetworkClient(\n            Network.Mainnet,\n            connectedWallet,\n            {\n                networkAddress: MAINNET_NETWORK_ADDRESS\n            },\n        );\n\n        // Get the colony client instance for the betacolony\n        const colonyClient = await networkClient.getColonyClient(MAINNET_BETACOLONY_ADDRESS);\n\n\n        // Get the filter for Colony Initilised\n        const eventFilter = colonyClient.filters.ColonyInitialised(null, null);\n        const colonyInitEventLogs: any = await getLogs(colonyClient, eventFilter);\n        const colonyInitialisedLogs: ColonyInitialisedItem[] = colonyInitEventLogs.map((event: any) => colonyClient.interface.parseLog(event));\n\n        // Get the filter for Payout Claimed\n        const payoutFilter = colonyClient.filters.PayoutClaimed(null, null, null);\n        const payoutClaimedEventLogs: any = await getLogs(colonyClient, payoutFilter);\n        const payoutClaimedLogs: PayoutClaimedItem[] = payoutClaimedEventLogs.map((event: any) => colonyClient.interface.parseLog(event));\n\n        //const [singleLog] = colonyInitialisedLogs;\n        console.log(\"============ Colony Initilised ============\");\n        //console.log(JSON.stringify(colonyInitialisedLogs));\n\n        console.log(\"============ PAYOUT CLAIMED ============\");\n        console.log(JSON.stringify(payoutClaimedLogs));\n\n        this.setState({ colonyInitialisedLogs: colonyInitialisedLogs, payoutClaimedLogs: payoutClaimedLogs });\n\n        //const [singleLog] = payoutClaimedLogs;\n\n        //const humanReadableFundingPotId = new utils.BigNumber(\n        //    singleLog.values.fundingPotId\n        //).toString();\n\n        //const {\n        //    associatedTypeId,\n        //} = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n        //const recipient: PaymentObject = await colonyClient.getPayment(associatedTypeId);\n\n        //console.log(JSON.stringify(recipient.recipient));\n\n        async function getPayment(singleLog: PayoutClaimedItem) {\n            const humanReadableFundingPotId = new utils.BigNumber(\n                singleLog.values.fundingPotId\n            ).toString();\n    \n            const {\n                associatedTypeId,\n            } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n    \n            const recipient: PaymentObject = await colonyClient.getPayment(associatedTypeId);\n            return recipient;\n        }\n\n        //Promise.all(payoutClaimedLogs.map(singleLog => (\n        //    getPayment(singleLog)\n        //      .then(recipient => ({\n        //        userAddress: recipient,\n        //      }))\n        //      .catch(err => console.log(\"Error fetching image: \", err))\n        //      ))\n        //  )\n        //    .then(payoutClaimedLogs => this.setState({ payoutClaimedLogs }))\n        //    .catch(err => console.log(\"Error setting up payoutClaimedLogs: \", err))\n\n        const asyncRes = await Promise.all(payoutClaimedLogs.map(async (singleLog) => {\n            const recipent = getPayment(singleLog);\n            singleLog.userAddress = (await recipent).recipient;\n            debugger;\n            console.log(\"========================================================\");\n            console.log(singleLog.userAddress);\n            console.log(\"========================================================\");\n        }));\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.colonyInitialisedLogs.map((post: ColonyInitialisedItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.name} </h4>\n                            <h4> {post.signature} </h4>\n                        </div>\n                    </div>\n                ))}\n                {this.state.payoutClaimedLogs.map((post: PayoutClaimedItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.name} </h4>\n                            <h4> {post.userAddress} </h4>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}