{"ast":null,"code":"var _jsxFileName = \"/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx\";\nimport React from \"react\";\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class EventLogs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      colonyInitialisedLogs: [],\n      payoutClaimedLogs: []\n    };\n  }\n\n  async componentDidMount() {\n    const payoutCalimedServise = new PayoutClaimedService();\n    const payoutPreparedLogs = await payoutCalimedServise.prepareLogs(); // Get the filter for Colony Initilised\n    //const eventFilter = colonyClient.filters.ColonyInitialised(null, null);\n    //const colonyInitEventLogs: any = await getLogs(colonyClient, eventFilter);\n    //const colonyInitialisedLogs: ColonyInitialisedItem[] = colonyInitEventLogs.map((event: any) => colonyClient.interface.parseLog(event));\n\n    console.log(\"============ PAYOUT CLAIMED ============\");\n    console.log(JSON.stringify(payoutPreparedLogs));\n    this.setState({\n      colonyInitialisedLogs: payoutPreparedLogs,\n      payoutClaimedLogs: payoutPreparedLogs\n    });\n    debugger;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.colonyInitialisedLogs.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.signature, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)), this.state.payoutClaimedLogs.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\" \", post.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"ADRESS: \", post.userAddress, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","PayoutClaimedService","EventLogs","Component","state","colonyInitialisedLogs","payoutClaimedLogs","componentDidMount","payoutCalimedServise","payoutPreparedLogs","prepareLogs","console","log","JSON","stringify","setState","render","map","post","name","signature","userAddress"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/components/EventLogs.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport {Promise} from 'es6-promise';\nimport PayoutClaimedService from '../services/PayoudClaimedService';\nimport {PayoutClaimedItem} from '../interfaces/PayoutClaimedItem';\n//import { ColonyRole } from '@colony/colony-js';\n\n\n\ninterface ColonyInitValue {\n    colonyNetwork: string;\n    token: string;\n    length: string;\n    fundingPotId: string;\n\n}\n\ninterface PayoutClaimedValue {\n    colonyNetwork: string;\n    token: string;\n    length: string;\n    fundingPotId: string;\n\n}\n\ninterface ColonyInitialisedItem {\n    name: string;\n    signature: string;\n    topic: string;\n    values: ColonyInitValue[];\n}\n\n\ninterface PaymentObject {\n    recipient: string;\n    finalized: boolean;\n}\n\ninterface DisplayPayoutClaimedItem {\n    fundingPotId: string;\n    token: string;\n    userAddress: string;\n}\n\n\n\nexport default class EventLogs extends React.Component {\n\n\n    \n    state = { colonyInitialisedLogs: [], payoutClaimedLogs: [] };\n\n    async componentDidMount() {\n    \n        const payoutCalimedServise = new PayoutClaimedService();\n        const payoutPreparedLogs =  await payoutCalimedServise.prepareLogs();\n\n        // Get the filter for Colony Initilised\n        //const eventFilter = colonyClient.filters.ColonyInitialised(null, null);\n        //const colonyInitEventLogs: any = await getLogs(colonyClient, eventFilter);\n        //const colonyInitialisedLogs: ColonyInitialisedItem[] = colonyInitEventLogs.map((event: any) => colonyClient.interface.parseLog(event));\n\n        \n\n        console.log(\"============ PAYOUT CLAIMED ============\");\n        console.log(JSON.stringify(payoutPreparedLogs));\n        this.setState({ colonyInitialisedLogs: payoutPreparedLogs, payoutClaimedLogs: payoutPreparedLogs });\n        debugger;\n    }\n    \n\n    render() {\n        return (\n            <div>\n                {this.state.colonyInitialisedLogs.map((post: ColonyInitialisedItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.name} </h4>\n                            <h4> {post.signature} </h4>\n                        </div>\n                    </div>\n                ))}\n                {this.state.payoutClaimedLogs.map((post: PayoutClaimedItem) => (\n                    <div>\n                        <div>\n                            <h4> {post.name} </h4>\n                            <h4>ADRESS: {post.userAddress} </h4>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n}\n"],"mappings":";AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAQA,OAAOC,oBAAP,MAAiC,kCAAjC;;AA2CA,eAAe,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;EAAA;IAAA;IAAA,KAInDC,KAJmD,GAI3C;MAAEC,qBAAqB,EAAE,EAAzB;MAA6BC,iBAAiB,EAAE;IAAhD,CAJ2C;EAAA;;EAM5B,MAAjBC,iBAAiB,GAAG;IAEtB,MAAMC,oBAAoB,GAAG,IAAIP,oBAAJ,EAA7B;IACA,MAAMQ,kBAAkB,GAAI,MAAMD,oBAAoB,CAACE,WAArB,EAAlC,CAHsB,CAKtB;IACA;IACA;IACA;;IAIAC,OAAO,CAACC,GAAR,CAAY,0CAAZ;IACAD,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeL,kBAAf,CAAZ;IACA,KAAKM,QAAL,CAAc;MAAEV,qBAAqB,EAAEI,kBAAzB;MAA6CH,iBAAiB,EAAEG;IAAhE,CAAd;IACA;EACH;;EAGDO,MAAM,GAAG;IACL,oBACI;MAAA,WACK,KAAKZ,KAAL,CAAWC,qBAAX,CAAiCY,GAAjC,CAAsCC,IAAD,iBAClC;QAAA,uBACI;UAAA,wBACI;YAAA,gBAAMA,IAAI,CAACC,IAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,gBAAMD,IAAI,CAACE,SAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADH,CADL,EASK,KAAKhB,KAAL,CAAWE,iBAAX,CAA6BW,GAA7B,CAAkCC,IAAD,iBAC9B;QAAA,uBACI;UAAA,wBACI;YAAA,gBAAMA,IAAI,CAACC,IAAX;UAAA;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAA,uBAAaD,IAAI,CAACG,WAAlB;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADH,CATL;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAoBH;;AA9CkD"},"metadata":{},"sourceType":"module"}