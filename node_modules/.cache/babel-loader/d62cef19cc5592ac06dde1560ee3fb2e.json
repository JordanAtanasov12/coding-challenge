{"ast":null,"code":"import { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    function sleep(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      });\n    }\n\n    this.colonyClient = await this.networkClient.getClient();\n    const logsService = new LogsService();\n    let parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n    const [singleLog] = parsedLogs; //for (let singleLog of parsedLogs) {\n    //    //sleep(100);\n    //    const humanReadableFundingPotId = new utils.BigNumber(\n    //        singleLog.values.fundingPotId\n    //    ).toString();\n    //\n    //    const {\n    //        associatedTypeId,\n    //    } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n    //    \n    //    const recipient = await this.colonyClient.getPayment(associatedTypeId);\n    //    Object.assign({}, singleLog, { userAddress: recipient.recipient }); \n    //     break;\n    //};\n    //return parsedLogs;\n\n    try {\n      //const employees = await fetchAllEmployees(baseApi)\n      Promise.all(parsedLogs.map(async singlelog => {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n        const {\n          recipient: userAddress\n        } = await this.colonyClient.getPayment(associatedTypeId);\n        Object.assign({}, singleLog, {\n          userAddress: {\n            recipient: userAddress\n          }\n        });\n        return parsedLogs;\n      }));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["utils","Promise","ColonyNetworkClient","LogsService","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","sleep","ms","resolve","setTimeout","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","singleLog","all","map","singlelog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","recipient","userAddress","getPayment","Object","assign","error","console","log"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient;\n    }\n\n    public async prepareLogs() {\n\n        function sleep(ms: number) {\n            return new Promise((resolve) => {\n                setTimeout(resolve, ms);\n            });\n        }\n\n        this.colonyClient = await this.networkClient.getClient();\n\n        const logsService = new LogsService();\n\n        let parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n        const [singleLog] = parsedLogs;\n\n\n        //for (let singleLog of parsedLogs) {\n        //    //sleep(100);\n        //    const humanReadableFundingPotId = new utils.BigNumber(\n        //        singleLog.values.fundingPotId\n        //    ).toString();\n//\n        //    const {\n        //        associatedTypeId,\n        //    } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n        //    \n        //    const recipient = await this.colonyClient.getPayment(associatedTypeId);\n        //    Object.assign({}, singleLog, { userAddress: recipient.recipient }); \n        //     break;\n        //};\n        //return parsedLogs;\n\n        try {\n            //const employees = await fetchAllEmployees(baseApi)\n            Promise.all(\n                parsedLogs.map(async singlelog => {\n                    const humanReadableFundingPotId = new utils.BigNumber(\n                        singleLog.values.fundingPotId\n                    ).toString();\n        \n                    const {\n                        associatedTypeId,\n                    } = await this.colonyClient.getFundingPot(humanReadableFundingPotId);\n                    \n                    const {recipient: userAddress} = await this.colonyClient.getPayment(associatedTypeId);\n                     Object.assign({}, singleLog, { userAddress: {recipient: userAddress}});\n                     return parsedLogs;\n                }));\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAMA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAGA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIL,mBAAJ,EAArB;EACH;;EAEuB,MAAXM,WAAW,GAAG;IAEvB,SAASC,KAAT,CAAeC,EAAf,EAA2B;MACvB,OAAO,IAAIT,OAAJ,CAAaU,OAAD,IAAa;QAC5BC,UAAU,CAACD,OAAD,EAAUD,EAAV,CAAV;MACH,CAFM,CAAP;IAGH;;IAED,KAAKJ,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBM,SAAnB,EAA1B;IAEA,MAAMC,WAAW,GAAG,IAAIX,WAAJ,EAApB;IAEA,IAAIY,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKV,YAAL,CAAkBW,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA5C;IAEA,MAAM,CAACC,SAAD,IAAcJ,UAApB,CAduB,CAiBvB;IACA;IACA;IACA;IACA;IACR;IACQ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAI;MACA;MACAd,OAAO,CAACmB,GAAR,CACIL,UAAU,CAACM,GAAX,CAAe,MAAMC,SAAN,IAAmB;QAC9B,MAAMC,yBAAyB,GAAG,IAAIvB,KAAK,CAACwB,SAAV,CAC9BL,SAAS,CAACM,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAM,KAAKtB,YAAL,CAAkBuB,aAAlB,CAAgCN,yBAAhC,CAFV;QAIA,MAAM;UAACO,SAAS,EAAEC;QAAZ,IAA2B,MAAM,KAAKzB,YAAL,CAAkB0B,UAAlB,CAA6BJ,gBAA7B,CAAvC;QACCK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,SAAlB,EAA6B;UAAEY,WAAW,EAAE;YAACD,SAAS,EAAEC;UAAZ;QAAf,CAA7B;QACA,OAAOhB,UAAP;MACJ,CAZD,CADJ;IAcH,CAhBD,CAgBE,OAAOoB,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;AA7DqC"},"metadata":{},"sourceType":"module"}