{"ast":null,"code":"import { Wallet } from 'ethers';\nimport { InfuraProvider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { MAINNET_NETWORK_ADDRESS } from '../helpers/constants';\nexport default class PayoudClaimedService {\n  constructor() {\n    this.colonyClient = void 0;\n    this.networkClient = void 0;\n    this.networkClient = new ColonyNetworkClient();\n  }\n\n  async prepareLogs() {\n    try {\n      this.colonyClient = await this.networkClient.getClient();\n      const logsService = new LogsService();\n      const parsedLogs = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null)); //=============================================\n\n      const Web3 = require('web3');\n\n      const ERC20Contract = require('erc20-contract-js');\n\n      const provider = new InfuraProvider();\n      const web3 = new Web3(provider); // Get a random wallet\n\n      const wallet = Wallet.createRandom(); // Connect wallet to the provider\n\n      const connectedWallet = wallet.connect(provider);\n      const erc20Contract = new ERC20Contract(web3, MAINNET_NETWORK_ADDRESS); // Get balance of\n\n      erc20Contract.balanceOf(connectedWallet.address).call().then(balance => console.log(`Balance: ${balance}`)); //=============================================\n\n      async function getAssoitaedTypeId(singleLog, colonyClient) {\n        const humanReadableFundingPotId = new utils.BigNumber(singleLog.values.fundingPotId).toString();\n        const {\n          associatedTypeId\n        } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n        return associatedTypeId;\n      }\n\n      const promises = await parsedLogs.map(async singleLog => {\n        return getAssoitaedTypeId(singleLog, this.colonyClient).then(this.colonyClient.getPayment).then(r => Object.assign({}, singleLog, {\n          userAddress: r.recipient\n        }));\n      });\n      const preparedLogs = await Promise.all(promises);\n      return preparedLogs;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}","map":{"version":3,"names":["Wallet","InfuraProvider","utils","Promise","ColonyNetworkClient","LogsService","MAINNET_NETWORK_ADDRESS","PayoudClaimedService","constructor","colonyClient","networkClient","prepareLogs","getClient","logsService","parsedLogs","getParsedLogs","filters","PayoutClaimed","Web3","require","ERC20Contract","provider","web3","wallet","createRandom","connectedWallet","connect","erc20Contract","balanceOf","address","call","then","balance","console","log","getAssoitaedTypeId","singleLog","humanReadableFundingPotId","BigNumber","values","fundingPotId","toString","associatedTypeId","getFundingPot","promises","map","getPayment","r","Object","assign","userAddress","recipient","preparedLogs","all","error"],"sources":["/Users/jatanasov/Documents/Projects/Colony/coding-challenge-events-list-bootstrap/src/services/PayoudClaimedService.ts"],"sourcesContent":["import React, { useState } from \"react\";\nimport { getColonyNetworkClient, Network, ColonyRole, getBlockTime } from '@colony/colony-js';\nimport { Wallet } from 'ethers';\nimport { InfuraProvider, Web3Provider } from 'ethers/providers';\nimport { getLogs } from '@colony/colony-js';\nimport { Filter, Log, Provider } from 'ethers/providers';\nimport { utils } from 'ethers';\nimport { Promise } from 'es6-promise';\nimport ColonyNetworkClient from '../clients/ColonyNetworkClient';\nimport LogsService from './LogsService';\nimport { PayoutClaimedItem } from \"../interfaces/PayoutClaimedItem\";\nimport { getBalancesForEthereumAddress } from 'ethereum-erc20-token-balances-multicall';\nimport { MAINNET_NETWORK_ADDRESS, MAINNET_BETACOLONY_ADDRESS } from '../helpers/constants';\n\n\n\nexport default class PayoudClaimedService {\n\n    private colonyClient: any;\n    private networkClient: any;\n\n    constructor() {\n        this.networkClient = new ColonyNetworkClient();\n    }\n\n    public async prepareLogs() {\n\n        try {\n\n            this.colonyClient = await this.networkClient.getClient();\n\n            const logsService = new LogsService();\n\n            const parsedLogs: PayoutClaimedItem[] = await logsService.getParsedLogs(this.colonyClient.filters.PayoutClaimed(null, null, null));\n\n            //=============================================\n\n            const Web3 = require('web3');\n            const ERC20Contract = require('erc20-contract-js');\n\n            const provider = new InfuraProvider();\n\n            const web3 = new Web3(\n                provider\n            );\n\n            // Get a random wallet\n            const wallet = Wallet.createRandom();\n            // Connect wallet to the provider\n            const connectedWallet = wallet.connect(provider);\n\n            const erc20Contract = new ERC20Contract(web3, MAINNET_NETWORK_ADDRESS);\n\n            // Get balance of\n            erc20Contract.balanceOf(connectedWallet.address).call()\n                .then(balance => console.log(`Balance: ${balance}`));\n            //=============================================\n\n            async function getAssoitaedTypeId(singleLog: PayoutClaimedItem, colonyClient: any) {\n                const humanReadableFundingPotId = new utils.BigNumber(\n                    singleLog.values.fundingPotId\n                ).toString();\n\n                const {\n                    associatedTypeId,\n                } = await colonyClient.getFundingPot(humanReadableFundingPotId);\n\n                return associatedTypeId;\n            }\n\n\n            const promises = await parsedLogs.map(async (singleLog) => {\n                return getAssoitaedTypeId(singleLog, this.colonyClient)\n                    .then(this.colonyClient.getPayment)\n                    .then(r => Object.assign({}, singleLog, { userAddress: r.recipient }))\n            });\n\n            const preparedLogs = await Promise.all(promises);\n            return preparedLogs;\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n\n}\n"],"mappings":"AAEA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA6C,kBAA7C;AAGA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAGA,SAASC,uBAAT,QAAoE,sBAApE;AAIA,eAAe,MAAMC,oBAAN,CAA2B;EAKtCC,WAAW,GAAG;IAAA,KAHNC,YAGM;IAAA,KAFNC,aAEM;IACV,KAAKA,aAAL,GAAqB,IAAIN,mBAAJ,EAArB;EACH;;EAEuB,MAAXO,WAAW,GAAG;IAEvB,IAAI;MAEA,KAAKF,YAAL,GAAoB,MAAM,KAAKC,aAAL,CAAmBE,SAAnB,EAA1B;MAEA,MAAMC,WAAW,GAAG,IAAIR,WAAJ,EAApB;MAEA,MAAMS,UAA+B,GAAG,MAAMD,WAAW,CAACE,aAAZ,CAA0B,KAAKN,YAAL,CAAkBO,OAAlB,CAA0BC,aAA1B,CAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,CAA1B,CAA9C,CANA,CAQA;;MAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;MACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;MAEA,MAAME,QAAQ,GAAG,IAAIpB,cAAJ,EAAjB;MAEA,MAAMqB,IAAI,GAAG,IAAIJ,IAAJ,CACTG,QADS,CAAb,CAfA,CAmBA;;MACA,MAAME,MAAM,GAAGvB,MAAM,CAACwB,YAAP,EAAf,CApBA,CAqBA;;MACA,MAAMC,eAAe,GAAGF,MAAM,CAACG,OAAP,CAAeL,QAAf,CAAxB;MAEA,MAAMM,aAAa,GAAG,IAAIP,aAAJ,CAAkBE,IAAlB,EAAwBhB,uBAAxB,CAAtB,CAxBA,CA0BA;;MACAqB,aAAa,CAACC,SAAd,CAAwBH,eAAe,CAACI,OAAxC,EAAiDC,IAAjD,GACKC,IADL,CACUC,OAAO,IAAIC,OAAO,CAACC,GAAR,CAAa,YAAWF,OAAQ,EAAhC,CADrB,EA3BA,CA6BA;;MAEA,eAAeG,kBAAf,CAAkCC,SAAlC,EAAgE3B,YAAhE,EAAmF;QAC/E,MAAM4B,yBAAyB,GAAG,IAAInC,KAAK,CAACoC,SAAV,CAC9BF,SAAS,CAACG,MAAV,CAAiBC,YADa,EAEhCC,QAFgC,EAAlC;QAIA,MAAM;UACFC;QADE,IAEF,MAAMjC,YAAY,CAACkC,aAAb,CAA2BN,yBAA3B,CAFV;QAIA,OAAOK,gBAAP;MACH;;MAGD,MAAME,QAAQ,GAAG,MAAM9B,UAAU,CAAC+B,GAAX,CAAe,MAAOT,SAAP,IAAqB;QACvD,OAAOD,kBAAkB,CAACC,SAAD,EAAY,KAAK3B,YAAjB,CAAlB,CACFsB,IADE,CACG,KAAKtB,YAAL,CAAkBqC,UADrB,EAEFf,IAFE,CAEGgB,CAAC,IAAIC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,SAAlB,EAA6B;UAAEc,WAAW,EAAEH,CAAC,CAACI;QAAjB,CAA7B,CAFR,CAAP;MAGH,CAJsB,CAAvB;MAMA,MAAMC,YAAY,GAAG,MAAMjD,OAAO,CAACkD,GAAR,CAAYT,QAAZ,CAA3B;MACA,OAAOQ,YAAP;IACH,CApDD,CAoDE,OAAOE,KAAP,EAAc;MACZrB,OAAO,CAACC,GAAR,CAAYoB,KAAZ;IACH;EACJ;;AAlEqC"},"metadata":{},"sourceType":"module"}