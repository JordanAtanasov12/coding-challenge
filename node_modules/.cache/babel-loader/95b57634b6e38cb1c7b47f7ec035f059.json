{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst constants_1 = require(\"../constants\");\n\nconst OneTxPaymentFactory_1 = require(\"../contracts/4/OneTxPaymentFactory\");\n\nconst commonExtensions_1 = require(\"../clients/Colony/extensions/commonExtensions\");\n\nconst getExtensionPermissionProofs = (colonyClient, domainId, address) => __awaiter(void 0, void 0, void 0, function* () {\n  const [fundingPDID, fundingCSI] = yield commonExtensions_1.getPermissionProofs(colonyClient, domainId, constants_1.ColonyRole.Funding, address);\n  const [adminPDID, adminCSI] = yield commonExtensions_1.getPermissionProofs(colonyClient, domainId, constants_1.ColonyRole.Administration, address);\n\n  if (!fundingPDID.eq(adminPDID) || !fundingCSI.eq(adminCSI)) {\n    // @TODO: this can surely be improved\n    throw new Error( // eslint-disable-next-line max-len\n    `${address || 'User'} has to have the funding and administration role in the same domain`);\n  }\n\n  return [adminPDID, adminCSI];\n});\n\nconst getOneTxPaymentClient = (address, colonyClient) => {\n  const oneTxPaymentClient = OneTxPaymentFactory_1.OneTxPaymentFactory.connect(address, colonyClient.signer || colonyClient.provider);\n  oneTxPaymentClient.clientType = constants_1.ClientType.OneTxPaymentClient;\n\n  oneTxPaymentClient.makePaymentWithProofs = (_worker, _token, _amount, _domainId, _skillId, overrides) => __awaiter(void 0, void 0, void 0, function* () {\n    const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n    const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n    return oneTxPaymentClient.makePayment(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId, overrides);\n  });\n\n  oneTxPaymentClient.makePaymentFundedFromDomainWithProofs = (_worker, _token, _amount, _domainId, _skillId, overrides) => __awaiter(void 0, void 0, void 0, function* () {\n    const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n    const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n    return oneTxPaymentClient.makePaymentFundedFromDomain(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId, overrides);\n  });\n\n  oneTxPaymentClient.estimate.makePaymentWithProofs = (_worker, _token, _amount, _domainId, _skillId) => __awaiter(void 0, void 0, void 0, function* () {\n    const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n    const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n    return oneTxPaymentClient.estimate.makePayment(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId);\n  });\n\n  oneTxPaymentClient.estimate.makePaymentFundedFromDomainWithProofs = (_worker, _token, _amount, _domainId, _skillId) => __awaiter(void 0, void 0, void 0, function* () {\n    const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n    const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n    return oneTxPaymentClient.estimate.makePaymentFundedFromDomain(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId);\n  });\n\n  return oneTxPaymentClient;\n};\n\nexports.default = getOneTxPaymentClient;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","constants_1","require","OneTxPaymentFactory_1","commonExtensions_1","getExtensionPermissionProofs","colonyClient","domainId","address","fundingPDID","fundingCSI","getPermissionProofs","ColonyRole","Funding","adminPDID","adminCSI","Administration","eq","Error","getOneTxPaymentClient","oneTxPaymentClient","OneTxPaymentFactory","connect","signer","provider","clientType","ClientType","OneTxPaymentClient","makePaymentWithProofs","_worker","_token","_amount","_domainId","_skillId","overrides","extensionPDID","extensionCSI","userPDID","userCSI","makePayment","makePaymentFundedFromDomainWithProofs","makePaymentFundedFromDomain","estimate","default"],"sources":["/Users/jatanasov/Documents/Projects/Colony_BACKUP/coding-challenge-events-list-bootstrap/node_modules/@colony/colony-js/lib/clients/OneTxPaymentClient.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst OneTxPaymentFactory_1 = require(\"../contracts/4/OneTxPaymentFactory\");\nconst commonExtensions_1 = require(\"../clients/Colony/extensions/commonExtensions\");\nconst getExtensionPermissionProofs = (colonyClient, domainId, address) => __awaiter(void 0, void 0, void 0, function* () {\n    const [fundingPDID, fundingCSI] = yield commonExtensions_1.getPermissionProofs(colonyClient, domainId, constants_1.ColonyRole.Funding, address);\n    const [adminPDID, adminCSI] = yield commonExtensions_1.getPermissionProofs(colonyClient, domainId, constants_1.ColonyRole.Administration, address);\n    if (!fundingPDID.eq(adminPDID) || !fundingCSI.eq(adminCSI)) {\n        // @TODO: this can surely be improved\n        throw new Error(\n        // eslint-disable-next-line max-len\n        `${address || 'User'} has to have the funding and administration role in the same domain`);\n    }\n    return [adminPDID, adminCSI];\n});\nconst getOneTxPaymentClient = (address, colonyClient) => {\n    const oneTxPaymentClient = OneTxPaymentFactory_1.OneTxPaymentFactory.connect(address, colonyClient.signer || colonyClient.provider);\n    oneTxPaymentClient.clientType = constants_1.ClientType.OneTxPaymentClient;\n    oneTxPaymentClient.makePaymentWithProofs = (_worker, _token, _amount, _domainId, _skillId, overrides) => __awaiter(void 0, void 0, void 0, function* () {\n        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n        return oneTxPaymentClient.makePayment(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId, overrides);\n    });\n    oneTxPaymentClient.makePaymentFundedFromDomainWithProofs = (_worker, _token, _amount, _domainId, _skillId, overrides) => __awaiter(void 0, void 0, void 0, function* () {\n        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n        return oneTxPaymentClient.makePaymentFundedFromDomain(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId, overrides);\n    });\n    oneTxPaymentClient.estimate.makePaymentWithProofs = (_worker, _token, _amount, _domainId, _skillId) => __awaiter(void 0, void 0, void 0, function* () {\n        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n        return oneTxPaymentClient.estimate.makePayment(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId);\n    });\n    oneTxPaymentClient.estimate.makePaymentFundedFromDomainWithProofs = (_worker, _token, _amount, _domainId, _skillId) => __awaiter(void 0, void 0, void 0, function* () {\n        const [extensionPDID, extensionCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId, oneTxPaymentClient.address);\n        const [userPDID, userCSI] = yield getExtensionPermissionProofs(colonyClient, _domainId);\n        return oneTxPaymentClient.estimate.makePaymentFundedFromDomain(extensionPDID, extensionCSI, userPDID, userCSI, _worker, _token, _amount, _domainId, _skillId);\n    });\n    return oneTxPaymentClient;\n};\nexports.default = getOneTxPaymentClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}